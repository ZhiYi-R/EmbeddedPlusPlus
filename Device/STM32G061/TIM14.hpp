/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32G061_TIM14_HPP
#define EMBEDDED_PP_STM32G061_TIM14_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief General purpose timers */
namespace STM32G061::TIM14 {

    /** @brief control register 1 */
    using CR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. */
    using CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint32_t CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint32_t CR1_CEN_B_0x1 = 1;

    /** @brief Update disable This bit is set and cleared by software to enable/disable update interrupt (UEV) event generation. Counter overflow Setting the UG bit. Buffered registers are then loaded with their preload values. */
    using CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. An UEV is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. No UEV is generated, shadow registers keep their value (ARR, PSC, CCRx). The counter and the prescaler are reinitialized if the UG bit is set. (value: 1)
     */
        /** @brief UEV enabled. An UEV is generated by one of the following events: */
    constexpr std::uint32_t CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. No UEV is generated, shadow registers keep their value (ARR, PSC, CCRx). The counter and the prescaler are reinitialized if the UG bit is set. */
    constexpr std::uint32_t CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source This bit is set and cleared by software to select the update interrupt (UEV) sources. Counter overflow Setting the UG bit */
    using CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generate an UEV if enabled: (value: 0)
     *          - B_0x1: Only counter overflow generates an UEV if enabled. (value: 1)
     */
        /** @brief Any of the following events generate an UEV if enabled: */
    constexpr std::uint32_t CR1_URS_B_0x0 = 0;
        /** @brief Only counter overflow generates an UEV if enabled. */
    constexpr std::uint32_t CR1_URS_B_0x1 = 1;

    /** @brief One-pulse mode */
    using CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped on the update event (value: 0)
     *          - B_0x1: Counter stops counting on the next update event (clearing the CEN bit). (value: 1)
     */
        /** @brief Counter is not stopped on the update event */
    constexpr std::uint32_t CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting on the next update event (clearing the CEN bit). */
    constexpr std::uint32_t CR1_OPM_B_0x1 = 1;

    /** @brief Auto-reload preload enable */
    using CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered */
    constexpr std::uint32_t CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered */
    constexpr std::uint32_t CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (TIx), */
    using CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tDTS = tCK_INT (value: 0)
     *          - B_0x1: tDTS = 2 (value: 1)
     *          - B_0x2: tDTS = 4 (value: 2)
     */
        /** @brief tDTS = tCK_INT */
    constexpr std::uint32_t CR1_CKD_B_0x0 = 0;
        /** @brief tDTS = 2 */
    constexpr std::uint32_t CR1_CKD_B_0x1 = 1;
        /** @brief tDTS = 4 */
    constexpr std::uint32_t CR1_CKD_B_0x2 = 2;

    /** @brief UIF status bit remapping */
    using CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint32_t CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint32_t CR1_UIFREMAP_B_0x1 = 1;

    /** @brief DMA/Interrupt enable register */
    using DIER = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled (value: 0)
     *          - B_0x1: Update interrupt enabled (value: 1)
     */
        /** @brief Update interrupt disabled */
    constexpr std::uint32_t DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled */
    constexpr std::uint32_t DIER_UIE_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt enable */
    using DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled (value: 0)
     *          - B_0x1: CC1 interrupt enabled (value: 1)
     */
        /** @brief CC1 interrupt disabled */
    constexpr std::uint32_t DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled */
    constexpr std::uint32_t DIER_CC1IE_B_0x1 = 1;

    /** @brief status register */
    using SR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS='0' in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS='0' and UDIS='0' in the TIMx_CR1 register. */
    using SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred. (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred. */
    constexpr std::uint32_t SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint32_t SR_UIF_B_0x1 = 1;

    /** @brief Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER). */
    using SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred. (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint32_t SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred. */
    constexpr std::uint32_t SR_CC1IF_B_0x1 = 1;

    /** @brief Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'. */
    using SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected. (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected. */
    constexpr std::uint32_t SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint32_t SR_CC1OF_B_0x1 = 1;

    /** @brief event generation register */
    using EGR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation This bit can be set by software, it is automatically cleared by hardware. */
    using EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t EGR_UG_B_0x0 = 0;
        /** @brief Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared. */
    constexpr std::uint32_t EGR_UG_B_0x1 = 1;

    /** @brief Capture/compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high. */
    using EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint32_t EGR_CC1G_B_0x1 = 1;

    /** @brief capture/compare mode register 1 (output mode) */
    using CCMR1_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using CCMR1_Output_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output. (value: 0)
     *          - B_0x1: CC1 channel is configured as input, IC1 is mapped on TI1. (value: 1)
     */
        /** @brief CC1 channel is configured as output. */
    constexpr std::uint32_t CCMR1_Output_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TI1. */
    constexpr std::uint32_t CCMR1_Output_CC1S_B_0x1 = 1;

    /** @brief Output compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger. */
    using CCMR1_Output_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on CC1 output. OC is then set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. */
    constexpr std::uint32_t CCMR1_Output_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on CC1 output. OC is then set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t CCMR1_Output_OC1FE_B_0x1 = 1;

    /** @brief Output compare 1 preload enable Note: The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed. */
    using CCMR1_Output_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. */
    constexpr std::uint32_t CCMR1_Output_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. */
    constexpr std::uint32_t CCMR1_Output_OC1PE_B_0x1 = 1;

    /** @brief Output compare 1 mode (refer to bit 16 for OC1M[3]) These bits define the behavior of the output reference signal OC1REF from which OC1 is derived. OC1REF is active high whereas OC1 active level depends on CC1P bit. Others: Reserved Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison changes or when the output compare mode switches from frozen to PWM mode. Note: The OC1M[3] bit is not contiguous, located in bit 16. */
    using CCMR1_Output_OC1M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggle - OC1REF toggles when TIMx_CNT = TIMx_CCR1. (value: 3)
     *          - B_0x4: Force inactive level - OC1REF is forced low. (value: 4)
     *          - B_0x5: Force active level - OC1REF is forced high. (value: 5)
     *          - B_0x6: PWM mode 1 - Channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. (value: 6)
     *          - B_0x7: PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT TIMx_CCR1 else active (value: 7)
     */
        /** @brief Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x2 = 2;
        /** @brief Toggle - OC1REF toggles when TIMx_CNT = TIMx_CCR1. */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x3 = 3;
        /** @brief Force inactive level - OC1REF is forced low. */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x4 = 4;
        /** @brief Force active level - OC1REF is forced high. */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x5 = 5;
        /** @brief PWM mode 1 - Channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x6 = 6;
        /** @brief PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT TIMx_CCR1 else active */
    constexpr std::uint32_t CCMR1_Output_OC1M1_B_0x7 = 7;

    /** @brief Output compare 1 mode (refer to bit 16 for OC1M[3]) These bits define the behavior of the output reference signal OC1REF from which OC1 is derived. OC1REF is active high whereas OC1 active level depends on CC1P bit. Others: Reserved Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison changes or when the output compare mode switches from frozen to PWM mode. Note: The OC1M[3] bit is not contiguous, located in bit 16. */
    using CCMR1_Output_OC1M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     */
        /** @brief Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. */
    constexpr std::uint32_t CCMR1_Output_OC1M2_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t CCMR1_Output_OC1M2_B_0x1 = 1;

    /** @brief capture/compare mode register 1 (input mode) */
    using CCMR1_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using CCMR1_Input_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, IC1 is mapped on TI1 (value: 1)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t CCMR1_Input_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TI1 */
    constexpr std::uint32_t CCMR1_Input_CC1S_B_0x1 = 1;

    /** @brief Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E='0' (TIMx_CCER register). */
    using CCMR1_Input_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input */
    constexpr std::uint32_t CCMR1_Input_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t CCMR1_Input_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t CCMR1_Input_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t CCMR1_Input_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using CCMR1_Input_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at fDTS (value: 0)
     *          - B_0x1: fSAMPLING=fCK_INT, N=2 (value: 1)
     *          - B_0x2: fSAMPLING=fCK_INT, N=4 (value: 2)
     *          - B_0x3: fSAMPLING=fCK_INT, N=8 (value: 3)
     *          - B_0x4: fSAMPLING=fDTS/2, N=6 (value: 4)
     *          - B_0x5: fSAMPLING=fDTS/2, N=8 (value: 5)
     *          - B_0x6: fSAMPLING=fDTS/4, N=6 (value: 6)
     *          - B_0x7: fSAMPLING=fDTS/4, N=8 (value: 7)
     *          - B_0x8: fSAMPLING=fDTS/8, N=6 (value: 8)
     *          - B_0x9: fSAMPLING=fDTS/8, N=8 (value: 9)
     *          - B_0xA: fSAMPLING=fDTS/16, N=5 (value: 10)
     *          - B_0xB: fSAMPLING=fDTS/16, N=6 (value: 11)
     *          - B_0xC: fSAMPLING=fDTS/16, N=8 (value: 12)
     *          - B_0xD: fSAMPLING=fDTS/32, N=5 (value: 13)
     *          - B_0xE: fSAMPLING=fDTS/32, N=6 (value: 14)
     *          - B_0xF: fSAMPLING=fDTS/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at fDTS */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x0 = 0;
        /** @brief fSAMPLING=fCK_INT, N=2 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x1 = 1;
        /** @brief fSAMPLING=fCK_INT, N=4 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x2 = 2;
        /** @brief fSAMPLING=fCK_INT, N=8 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x3 = 3;
        /** @brief fSAMPLING=fDTS/2, N=6 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x4 = 4;
        /** @brief fSAMPLING=fDTS/2, N=8 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x5 = 5;
        /** @brief fSAMPLING=fDTS/4, N=6 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x6 = 6;
        /** @brief fSAMPLING=fDTS/4, N=8 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x7 = 7;
        /** @brief fSAMPLING=fDTS/8, N=6 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x8 = 8;
        /** @brief fSAMPLING=fDTS/8, N=8 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0x9 = 9;
        /** @brief fSAMPLING=fDTS/16, N=5 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0xA = 10;
        /** @brief fSAMPLING=fDTS/16, N=6 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0xB = 11;
        /** @brief fSAMPLING=fDTS/16, N=8 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0xC = 12;
        /** @brief fSAMPLING=fDTS/32, N=5 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0xD = 13;
        /** @brief fSAMPLING=fDTS/32, N=6 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0xE = 14;
        /** @brief fSAMPLING=fDTS/32, N=8 */
    constexpr std::uint32_t CCMR1_Input_IC1F_B_0xF = 15;

    /** @brief capture/compare enable register */
    using CCER = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 output enable. */
    using CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / OC1 is not active (value: 0)
     *          - B_0x1: Capture mode enabled / OC1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / OC1 is not active */
    constexpr std::uint32_t CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / OC1 signal is output on the corresponding output pin */
    constexpr std::uint32_t CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/Compare 1 output Polarity. When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0:	This configuration is reserved, it must not be used. */
    using CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint32_t CCER_CC1P_B_0x0 = 0;
        /** @brief OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint32_t CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/Compare 1 complementary output Polarity. CC1 channel configured as output: CC1NP must be kept cleared. CC1 channel configured as input: CC1NP bit is used in conjunction with CC1P to define TI1FP1 polarity (refer to CC1P description). */
    using CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief counter */
    using CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief low counter value */
    using CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief UIF Copy */
    using CNT_UIFCPY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief prescaler */
    using PSC = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value */
    using PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief auto-reload register */
    using ARR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Low Auto-reload value */
    using ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief capture/compare register 1 */
    using CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Low Capture/Compare 1 value */
    using CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM timer input selection register */
    using TISEL = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief selects TI1[0] to TI1[15] input Others: Reserved */
    using TISEL_TI1SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIM14_CH1 input (value: 0)
     *          - B_0x1: RTC CLK (value: 1)
     *          - B_0x2: HSE/32 (value: 2)
     *          - B_0x3: MCO (value: 3)
     */
        /** @brief TIM14_CH1 input */
    constexpr std::uint32_t TISEL_TI1SEL_B_0x0 = 0;
        /** @brief RTC CLK */
    constexpr std::uint32_t TISEL_TI1SEL_B_0x1 = 1;
        /** @brief HSE/32 */
    constexpr std::uint32_t TISEL_TI1SEL_B_0x2 = 2;
        /** @brief MCO */
    constexpr std::uint32_t TISEL_TI1SEL_B_0x3 = 3;

}

#endif
