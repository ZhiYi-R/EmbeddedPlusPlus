/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32H533_TIM12_HPP
#define EMBEDDED_PP_STM32H533_TIM12_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief General-purpose timers */
namespace STM32H533::TIM12 {

    /** @brief TIM12 control register 1 */
    using TIM12_CR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable */
    using TIM12_CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint16_t TIM12_CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint16_t TIM12_CR1_CEN_B_0x1 = 1;

    /** @brief Update disable */
    using TIM12_CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. The Update (UEV) event is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. (value: 1)
     */
        /** @brief UEV enabled. The Update (UEV) event is generated by one of the following events: */
    constexpr std::uint16_t TIM12_CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. */
    constexpr std::uint16_t TIM12_CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source */
    using TIM12_CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generate an update interrupt or DMA request if enabled. These events can be: (value: 0)
     *          - B_0x1: Only counter overflow/underflow generates an update interrupt or DMA request if enabled. (value: 1)
     */
        /** @brief Any of the following events generate an update interrupt or DMA request if enabled. These events can be: */
    constexpr std::uint16_t TIM12_CR1_URS_B_0x0 = 0;
        /** @brief Only counter overflow/underflow generates an update interrupt or DMA request if enabled. */
    constexpr std::uint16_t TIM12_CR1_URS_B_0x1 = 1;

    /** @brief One-pulse mode */
    using TIM12_CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped at update event (value: 0)
     *          - B_0x1: Counter stops counting at the next update event (clearing the bit CEN) (value: 1)
     */
        /** @brief Counter is not stopped at update event */
    constexpr std::uint16_t TIM12_CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting at the next update event (clearing the bit CEN) */
    constexpr std::uint16_t TIM12_CR1_OPM_B_0x1 = 1;

    /** @brief Auto-reload preload enable */
    using TIM12_CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered */
    constexpr std::uint16_t TIM12_CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered */
    constexpr std::uint16_t TIM12_CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division */
    using TIM12_CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tDTS = ttim_ker_ck (value: 0)
     *          - B_0x1: tDTS = 2 ttim_ker_ck (value: 1)
     *          - B_0x2: tDTS = 4 ttim_ker_ck (value: 2)
     */
        /** @brief tDTS = ttim_ker_ck */
    constexpr std::uint16_t TIM12_CR1_CKD_B_0x0 = 0;
        /** @brief tDTS = 2 ttim_ker_ck */
    constexpr std::uint16_t TIM12_CR1_CKD_B_0x1 = 1;
        /** @brief tDTS = 4 ttim_ker_ck */
    constexpr std::uint16_t TIM12_CR1_CKD_B_0x2 = 2;

    /** @brief UIF status bit remapping */
    using TIM12_CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM12_CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM12_CR1_UIFREMAP_B_0x1 = 1;

    /** @brief Dithering Enable */
    using TIM12_CR1_DITHEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Dithering disabled (value: 0)
     *          - B_0x1: Dithering enabled (value: 1)
     */
        /** @brief Dithering disabled */
    constexpr std::uint16_t TIM12_CR1_DITHEN_B_0x0 = 0;
        /** @brief Dithering enabled */
    constexpr std::uint16_t TIM12_CR1_DITHEN_B_0x1 = 1;

    /** @brief TIM12 control register 2 */
    using TIM12_CR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Master mode selection */
    using TIM12_CR2_MMS1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on (value: 1)
     *          - B_0x2: Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. (value: 2)
     *          - B_0x3: Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo). (value: 3)
     *          - B_0x4: Compare - tim_oc1refc signal is used as trigger output (tim_trgo) (value: 4)
     *          - B_0x5: Compare - tim_oc2refc signal is used as trigger output (tim_trgo) (value: 5)
     *          - B_0x6: Compare - tim_oc3refc signal is used as trigger output (tim_trgo) (value: 6)
     *          - B_0x7: Compare - tim_oc4refc signal is used as trigger output (tim_trgo) (value: 7)
     */
        /** @brief Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x0 = 0;
        /** @brief Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x1 = 1;
        /** @brief Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x2 = 2;
        /** @brief Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo). */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x3 = 3;
        /** @brief Compare - tim_oc1refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x4 = 4;
        /** @brief Compare - tim_oc2refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x5 = 5;
        /** @brief Compare - tim_oc3refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x6 = 6;
        /** @brief Compare - tim_oc4refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM12_CR2_MMS1_B_0x7 = 7;

    /** @brief tim_ti1 selection */
    using TIM12_CR2_TI1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The tim_ti1_in[15..0] multiplexer output is to tim_ti1 input (value: 0)
     *          - B_0x1: The tim_ti1_in[15..0], tim_ti2_in[15..0] and tim_ti3_in[15..0] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 1494. (value: 1)
     */
        /** @brief The tim_ti1_in[15..0] multiplexer output is to tim_ti1 input */
    constexpr std::uint32_t TIM12_CR2_TI1S_B_0x0 = 0;
        /** @brief The tim_ti1_in[15..0], tim_ti2_in[15..0] and tim_ti3_in[15..0] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 1494. */
    constexpr std::uint32_t TIM12_CR2_TI1S_B_0x1 = 1;

    /** @brief TIM12 slave mode control register */
    using TIM12_SMCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Slave mode selection */
    using TIM12_SMCR_SMS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: Encoder mode 1 - Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. (value: 1)
     *          - B_0x2: Encoder mode 2 - Counter counts up/down on tim_ti2fp2 edge depending on tim_ti1fp1 level. (value: 2)
     *          - B_0x3: Encoder mode 3 - Counter counts up/down on both tim_ti1fp1 and tim_ti2fp2 edges depending on the level of the other input. (value: 3)
     *          - B_0x4: Reset Mode - Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. (value: 4)
     *          - B_0x5: Gated Mode - The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. (value: 5)
     *          - B_0x6: Trigger Mode - The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. (value: 6)
     *          - B_0x7: External Clock Mode 1 - Rising edges of the selected trigger (tim_trgi) clock the counter. (value: 7)
     */
        /** @brief Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x0 = 0;
        /** @brief Encoder mode 1 - Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x1 = 1;
        /** @brief Encoder mode 2 - Counter counts up/down on tim_ti2fp2 edge depending on tim_ti1fp1 level. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x2 = 2;
        /** @brief Encoder mode 3 - Counter counts up/down on both tim_ti1fp1 and tim_ti2fp2 edges depending on the level of the other input. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x3 = 3;
        /** @brief Reset Mode - Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x4 = 4;
        /** @brief Gated Mode - The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x5 = 5;
        /** @brief Trigger Mode - The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x6 = 6;
        /** @brief External Clock Mode 1 - Rising edges of the selected trigger (tim_trgi) clock the counter. */
    constexpr std::uint32_t TIM12_SMCR_SMS_B_0x7 = 7;

    /** @brief Trigger selection (see bits 21:20 for TS[4:3]) */
    using TIM12_SMCR_TS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal trigger 3 (tim_itr3) (value: 3)
     *          - B_0x4: tim_ti1 edge detector (tim_ti1f_ed) (value: 4)
     *          - B_0x5: Filtered timer input 1 (tim_ti1fp1) (value: 5)
     *          - B_0x6: Filtered timer input 2 (tim_ti2fp2) (value: 6)
     *          - B_0x7: External trigger input (tim_etrf) (value: 7)
     */
        /** @brief Internal trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x0 = 0;
        /** @brief Internal trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x1 = 1;
        /** @brief Internal trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x2 = 2;
        /** @brief Internal trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x3 = 3;
        /** @brief tim_ti1 edge detector (tim_ti1f_ed) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x4 = 4;
        /** @brief Filtered timer input 1 (tim_ti1fp1) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x5 = 5;
        /** @brief Filtered timer input 2 (tim_ti2fp2) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x6 = 6;
        /** @brief External trigger input (tim_etrf) */
    constexpr std::uint32_t TIM12_SMCR_TS_B_0x7 = 7;

    /** @brief Master/Slave mode */
    using TIM12_SMCR_MSM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful if we want to synchronize several timers on a single external event. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t TIM12_SMCR_MSM_B_0x0 = 0;
        /** @brief The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful if we want to synchronize several timers on a single external event. */
    constexpr std::uint32_t TIM12_SMCR_MSM_B_0x1 = 1;

    /** @brief Slave mode selection */
    using TIM12_SMCR_SMS_2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: Encoder mode 1 - Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. (value: 1)
     */
        /** @brief Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM12_SMCR_SMS_2_B_0x0 = 0;
        /** @brief Encoder mode 1 - Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. */
    constexpr std::uint32_t TIM12_SMCR_SMS_2_B_0x1 = 1;

    /** @brief Trigger selection (see bits 21:20 for TS[4:3]) */
    using TIM12_SMCR_TS_2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal trigger 3 (tim_itr3) (value: 3)
     */
        /** @brief Internal trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM12_SMCR_TS_2_B_0x0 = 0;
        /** @brief Internal trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM12_SMCR_TS_2_B_0x1 = 1;
        /** @brief Internal trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM12_SMCR_TS_2_B_0x2 = 2;
        /** @brief Internal trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM12_SMCR_TS_2_B_0x3 = 3;

    /** @brief TIM12 DMA/Interrupt enable register */
    using TIM12_DIER = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using TIM12_DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled. (value: 0)
     *          - B_0x1: Update interrupt enabled. (value: 1)
     */
        /** @brief Update interrupt disabled. */
    constexpr std::uint32_t TIM12_DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled. */
    constexpr std::uint32_t TIM12_DIER_UIE_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt enable */
    using TIM12_DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled. (value: 0)
     *          - B_0x1: CC1 interrupt enabled. (value: 1)
     */
        /** @brief CC1 interrupt disabled. */
    constexpr std::uint32_t TIM12_DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled. */
    constexpr std::uint32_t TIM12_DIER_CC1IE_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt enable */
    using TIM12_DIER_CC2IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 interrupt disabled. (value: 0)
     *          - B_0x1: CC2 interrupt enabled. (value: 1)
     */
        /** @brief CC2 interrupt disabled. */
    constexpr std::uint32_t TIM12_DIER_CC2IE_B_0x0 = 0;
        /** @brief CC2 interrupt enabled. */
    constexpr std::uint32_t TIM12_DIER_CC2IE_B_0x1 = 1;

    /** @brief Trigger interrupt enable */
    using TIM12_DIER_TIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger interrupt disabled. (value: 0)
     *          - B_0x1: Trigger interrupt enabled. (value: 1)
     */
        /** @brief Trigger interrupt disabled. */
    constexpr std::uint32_t TIM12_DIER_TIE_B_0x0 = 0;
        /** @brief Trigger interrupt enabled. */
    constexpr std::uint32_t TIM12_DIER_TIE_B_0x1 = 1;

    /** @brief TIM12 status register */
    using TIM12_SR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag */
    using TIM12_SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred */
    constexpr std::uint32_t TIM12_SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint32_t TIM12_SR_UIF_B_0x1 = 1;

    /** @brief Capture/compare 1 interrupt flag */
    using TIM12_SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint32_t TIM12_SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred */
    constexpr std::uint32_t TIM12_SR_CC1IF_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt flag */
    using TIM12_SR_CC2IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Trigger interrupt flag */
    using TIM12_SR_TIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No trigger event occurred. (value: 0)
     *          - B_0x1: Trigger interrupt pending. (value: 1)
     */
        /** @brief No trigger event occurred. */
    constexpr std::uint32_t TIM12_SR_TIF_B_0x0 = 0;
        /** @brief Trigger interrupt pending. */
    constexpr std::uint32_t TIM12_SR_TIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 overcapture flag */
    using TIM12_SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected. (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected. */
    constexpr std::uint32_t TIM12_SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint32_t TIM12_SR_CC1OF_B_0x1 = 1;

    /** @brief Capture/compare 2 overcapture flag */
    using TIM12_SR_CC2OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 event generation register */
    using TIM12_EGR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation */
    using TIM12_EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting). (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM12_EGR_UG_B_0x0 = 0;
        /** @brief Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting). */
    constexpr std::uint16_t TIM12_EGR_UG_B_0x1 = 1;

    /** @brief Capture/compare 1 generation */
    using TIM12_EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM12_EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint16_t TIM12_EGR_CC1G_B_0x1 = 1;

    /** @brief Capture/compare 2 generation */
    using TIM12_EGR_CC2G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Trigger generation */
    using TIM12_EGR_TG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM12_EGR_TG_B_0x0 = 0;
        /** @brief The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled. */
    constexpr std::uint16_t TIM12_EGR_TG_B_0x1 = 1;

    /** @brief TIM12 capture/compare mode register 1 [alternate] */
    using TIM12_CCMR1_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection */
    using TIM12_CCMR1_Input_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC1S_B_0x3 = 3;

    /** @brief Input capture 1 prescaler */
    using TIM12_CCMR1_Input_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter */
    using TIM12_CCMR1_Input_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at fDTS (value: 0)
     *          - B_0x1: fSAMPLING=ftim_ker_ck, N=2 (value: 1)
     *          - B_0x2: fSAMPLING=ftim_ker_ck, N=4 (value: 2)
     *          - B_0x3: fSAMPLING=ftim_ker_ck, N=8 (value: 3)
     *          - B_0x4: fSAMPLING=fDTS/2, N=6 (value: 4)
     *          - B_0x5: fSAMPLING=fDTS/2, N=8 (value: 5)
     *          - B_0x6: fSAMPLING=fDTS/4, N=6 (value: 6)
     *          - B_0x7: fSAMPLING=fDTS/4, N=8 (value: 7)
     *          - B_0x8: fSAMPLING=fDTS/8, N=6 (value: 8)
     *          - B_0x9: fSAMPLING=fDTS/8, N=8 (value: 9)
     *          - B_0xA: fSAMPLING=fDTS/16, N=5 (value: 10)
     *          - B_0xB: fSAMPLING=fDTS/16, N=6 (value: 11)
     *          - B_0xC: fSAMPLING=fDTS/16, N=8 (value: 12)
     *          - B_0xD: fSAMPLING=fDTS/32, N=5 (value: 13)
     *          - B_0xE: fSAMPLING=fDTS/32, N=6 (value: 14)
     *          - B_0xF: fSAMPLING=fDTS/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at fDTS */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x0 = 0;
        /** @brief fSAMPLING=ftim_ker_ck, N=2 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x1 = 1;
        /** @brief fSAMPLING=ftim_ker_ck, N=4 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x2 = 2;
        /** @brief fSAMPLING=ftim_ker_ck, N=8 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x3 = 3;
        /** @brief fSAMPLING=fDTS/2, N=6 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x4 = 4;
        /** @brief fSAMPLING=fDTS/2, N=8 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x5 = 5;
        /** @brief fSAMPLING=fDTS/4, N=6 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x6 = 6;
        /** @brief fSAMPLING=fDTS/4, N=8 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x7 = 7;
        /** @brief fSAMPLING=fDTS/8, N=6 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x8 = 8;
        /** @brief fSAMPLING=fDTS/8, N=8 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0x9 = 9;
        /** @brief fSAMPLING=fDTS/16, N=5 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0xA = 10;
        /** @brief fSAMPLING=fDTS/16, N=6 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0xB = 11;
        /** @brief fSAMPLING=fDTS/16, N=8 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0xC = 12;
        /** @brief fSAMPLING=fDTS/32, N=5 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0xD = 13;
        /** @brief fSAMPLING=fDTS/32, N=6 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0xE = 14;
        /** @brief fSAMPLING=fDTS/32, N=8 */
    constexpr std::uint32_t TIM12_CCMR1_Input_IC1F_B_0xF = 15;

    /** @brief Capture/compare 2 selection */
    using TIM12_CCMR1_Input_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output. (value: 0)
     *          - B_0x1: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2. (value: 1)
     *          - B_0x2: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1. (value: 2)
     *          - B_0x3: CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output. */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2. */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1. */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM12_CCMR1_Input_CC2S_B_0x3 = 3;

    /** @brief Input capture 2 prescaler */
    using TIM12_CCMR1_Input_IC2PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 2 filter */
    using TIM12_CCMR1_Input_IC2F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 capture/compare mode register 1 [alternate] */
    using TIM12_CCMR1_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection */
    using TIM12_CCMR1_Output_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output. (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1. (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2. (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output. */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1. */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2. */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC1S_B_0x3 = 3;

    /** @brief Output compare 1 fast enable */
    using TIM12_CCMR1_Output_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1FE_B_0x1 = 1;

    /** @brief Output compare 1 preload enable */
    using TIM12_CCMR1_Output_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1PE_B_0x1 = 1;

    /** @brief Output compare 1 mode */
    using TIM12_CCMR1_Output_OC1M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggle - tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. (value: 3)
     *          - B_0x4: Force inactive level - tim_oc1ref is forced low. (value: 4)
     *          - B_0x5: Force active level - tim_oc1ref is forced high. (value: 5)
     *          - B_0x6: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNTless thanTIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (tim_oc1ref=0) as long as TIMx_CNT>TIMx_CCR1 else active (tim_oc1ref=1). (value: 6)
     *          - B_0x7: PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNTless thanTIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT>TIMx_CCR1 else inactive. (value: 7)
     */
        /** @brief Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x2 = 2;
        /** @brief Toggle - tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x3 = 3;
        /** @brief Force inactive level - tim_oc1ref is forced low. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x4 = 4;
        /** @brief Force active level - tim_oc1ref is forced high. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x5 = 5;
        /** @brief PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNTless thanTIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (tim_oc1ref=0) as long as TIMx_CNT>TIMx_CCR1 else active (tim_oc1ref=1). */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x6 = 6;
        /** @brief PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNTless thanTIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT>TIMx_CCR1 else inactive. */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M1_B_0x7 = 7;

    /** @brief Capture/Compare 2 selection */
    using TIM12_CCMR1_Output_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM12_CCMR1_Output_CC2S_B_0x3 = 3;

    /** @brief Output compare 2 fast enable */
    using TIM12_CCMR1_Output_OC2FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 preload enable */
    using TIM12_CCMR1_Output_OC2PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 mode */
    using TIM12_CCMR1_Output_OC2M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 1 mode */
    using TIM12_CCMR1_Output_OC1M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     */
        /** @brief Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M2_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM12_CCMR1_Output_OC1M2_B_0x1 = 1;

    /** @brief Output compare 2 mode */
    using TIM12_CCMR1_Output_OC2M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 capture/compare enable register */
    using TIM12_CCER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 output enable. */
    using TIM12_CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / OC1 is not active (value: 0)
     *          - B_0x1: Capture mode enabled / OC1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / OC1 is not active */
    constexpr std::uint16_t TIM12_CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / OC1 signal is output on the corresponding output pin */
    constexpr std::uint16_t TIM12_CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/Compare 1 output Polarity. */
    using TIM12_CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM12_CCER_CC1P_B_0x0 = 0;
        /** @brief OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM12_CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/Compare 1 output Polarity. */
    using TIM12_CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output enable. */
    using TIM12_CCER_CC2E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output Polarity. */
    using TIM12_CCER_CC2P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output Polarity. */
    using TIM12_CCER_CC2NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 counter */
    using TIM12_CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief or UIFCPY: Value depends on IUFREMAP in TIMx_CR1. */
    using TIM12_CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief UIF Copy */
    using TIM12_CNT_UIFCPY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 prescaler */
    using TIM12_PSC = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value */
    using TIM12_PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 auto-reload register */
    using TIM12_ARR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Auto-reload value */
    using TIM12_ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 capture/compare register 1 */
    using TIM12_CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 value */
    using TIM12_CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 capture/compare register 2 */
    using TIM12_CCR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 value */
    using TIM12_CCR2_CCR2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM12 timer input selection register */
    using TIM12_TISEL = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Selects tim_ti1[0..15] input */
    using TIM12_TISEL_TI1SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti1_in0: TIMx_CH1 (value: 0)
     *          - B_0x1: tim_ti1_in1 (value: 1)
     *          - B_0xF: tim_ti1_in15 (value: 15)
     */
        /** @brief tim_ti1_in0: TIMx_CH1 */
    constexpr std::uint32_t TIM12_TISEL_TI1SEL_B_0x0 = 0;
        /** @brief tim_ti1_in1 */
    constexpr std::uint32_t TIM12_TISEL_TI1SEL_B_0x1 = 1;
        /** @brief tim_ti1_in15 */
    constexpr std::uint32_t TIM12_TISEL_TI1SEL_B_0xF = 15;

    /** @brief Selects tim_ti2[0..15] input */
    using TIM12_TISEL_TI2SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti2_in0: TIMx_CH2 (value: 0)
     *          - B_0x1: tim_ti2_in1 (value: 1)
     *          - B_0xF: tim_ti2_in15 (value: 15)
     */
        /** @brief tim_ti2_in0: TIMx_CH2 */
    constexpr std::uint32_t TIM12_TISEL_TI2SEL_B_0x0 = 0;
        /** @brief tim_ti2_in1 */
    constexpr std::uint32_t TIM12_TISEL_TI2SEL_B_0x1 = 1;
        /** @brief tim_ti2_in15 */
    constexpr std::uint32_t TIM12_TISEL_TI2SEL_B_0xF = 15;

}

#endif
