/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32H562_TIM8_HPP
#define EMBEDDED_PP_STM32H562_TIM8_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief Advanced-control timers */
namespace STM32H562::TIM8 {

    /** @brief TIM8 control register 1 */
    using TIM8_CR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. */
    using TIM8_CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint16_t TIM8_CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint16_t TIM8_CR1_CEN_B_0x1 = 1;

    /** @brief Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values. */
    using TIM8_CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. The Update (UEV) event is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. (value: 1)
     */
        /** @brief UEV enabled. The Update (UEV) event is generated by one of the following events: */
    constexpr std::uint16_t TIM8_CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. */
    constexpr std::uint16_t TIM8_CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller */
    using TIM8_CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generate an update interrupt or DMA request if enabled. These events can be: (value: 0)
     *          - B_0x1: Only counter overflow/underflow generates an update interrupt or DMA request if enabled. (value: 1)
     */
        /** @brief Any of the following events generate an update interrupt or DMA request if enabled. These events can be: */
    constexpr std::uint16_t TIM8_CR1_URS_B_0x0 = 0;
        /** @brief Only counter overflow/underflow generates an update interrupt or DMA request if enabled. */
    constexpr std::uint16_t TIM8_CR1_URS_B_0x1 = 1;

    /** @brief One-pulse mode */
    using TIM8_CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped at update event (value: 0)
     *          - B_0x1: Counter stops counting at the next update event (clearing the bit CEN) (value: 1)
     */
        /** @brief Counter is not stopped at update event */
    constexpr std::uint16_t TIM8_CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting at the next update event (clearing the bit CEN) */
    constexpr std::uint16_t TIM8_CR1_OPM_B_0x1 = 1;

    /** @brief Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode. */
    using TIM8_CR1_DIR = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter used as upcounter (value: 0)
     *          - B_0x1: Counter used as downcounter (value: 1)
     */
        /** @brief Counter used as upcounter */
    constexpr std::uint16_t TIM8_CR1_DIR_B_0x0 = 0;
        /** @brief Counter used as downcounter */
    constexpr std::uint16_t TIM8_CR1_DIR_B_0x1 = 1;

    /** @brief Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1) */
    using TIM8_CR1_CMS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR). (value: 0)
     *          - B_0x1: Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down. (value: 1)
     *          - B_0x2: Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up. (value: 2)
     *          - B_0x3: Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down. (value: 3)
     */
        /** @brief Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR). */
    constexpr std::uint16_t TIM8_CR1_CMS_B_0x0 = 0;
        /** @brief Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down. */
    constexpr std::uint16_t TIM8_CR1_CMS_B_0x1 = 1;
        /** @brief Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up. */
    constexpr std::uint16_t TIM8_CR1_CMS_B_0x2 = 2;
        /** @brief Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down. */
    constexpr std::uint16_t TIM8_CR1_CMS_B_0x3 = 3;

    /** @brief Auto-reload preload enable */
    using TIM8_CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered */
    constexpr std::uint16_t TIM8_CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered */
    constexpr std::uint16_t TIM8_CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and the dead-time and sampling clock (t sub DTS /sub )used by the dead-time generators and the digital filters (tim_etr_in, tim_tix), */
    using TIM8_CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: t sub DTS /sub =t sub tim_ker_ck /sub (value: 0)
     *          - B_0x1: t sub DTS /sub =2*t sub tim_ker_ck /sub (value: 1)
     *          - B_0x2: t sub DTS /sub =4*t sub tim_ker_ck /sub (value: 2)
     *          - B_0x3: Reserved, do not program this value (value: 3)
     */
        /** @brief t sub DTS /sub =t sub tim_ker_ck /sub */
    constexpr std::uint16_t TIM8_CR1_CKD_B_0x0 = 0;
        /** @brief t sub DTS /sub =2*t sub tim_ker_ck /sub */
    constexpr std::uint16_t TIM8_CR1_CKD_B_0x1 = 1;
        /** @brief t sub DTS /sub =4*t sub tim_ker_ck /sub */
    constexpr std::uint16_t TIM8_CR1_CKD_B_0x2 = 2;
        /** @brief Reserved, do not program this value */
    constexpr std::uint16_t TIM8_CR1_CKD_B_0x3 = 3;

    /** @brief UIF status bit remapping */
    using TIM8_CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM8_CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM8_CR1_UIFREMAP_B_0x1 = 1;

    /** @brief Dithering enable Note: The DITHEN bit can only be modified when CEN bit is reset. */
    using TIM8_CR1_DITHEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Dithering disabled (value: 0)
     *          - B_0x1: Dithering enabled (value: 1)
     */
        /** @brief Dithering disabled */
    constexpr std::uint16_t TIM8_CR1_DITHEN_B_0x0 = 0;
        /** @brief Dithering enabled */
    constexpr std::uint16_t TIM8_CR1_DITHEN_B_0x1 = 1;

    /** @brief TIM8 control register 2 */
    using TIM8_CR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output. */
    using TIM8_CR2_CCPC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCxE, CCxNE and OCxM bits are not preloaded (value: 0)
     *          - B_0x1: CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on tim_trgi, depending on the CCUS bit). (value: 1)
     */
        /** @brief CCxE, CCxNE and OCxM bits are not preloaded */
    constexpr std::uint32_t TIM8_CR2_CCPC_B_0x0 = 0;
        /** @brief CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on tim_trgi, depending on the CCUS bit). */
    constexpr std::uint32_t TIM8_CR2_CCPC_B_0x1 = 1;

    /** @brief Capture/compare control update selection Note: This bit acts only on channels that have a complementary output. */
    using TIM8_CR2_CCUS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only (value: 0)
     *          - B_0x1: When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on tim_trgi (value: 1)
     */
        /** @brief When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only */
    constexpr std::uint32_t TIM8_CR2_CCUS_B_0x0 = 0;
        /** @brief When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on tim_trgi */
    constexpr std::uint32_t TIM8_CR2_CCUS_B_0x1 = 1;

    /** @brief Capture/compare DMA selection */
    using TIM8_CR2_CCDS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCx DMA request sent when CCx event occurs (value: 0)
     *          - B_0x1: CCx DMA requests sent when update event occurs (value: 1)
     */
        /** @brief CCx DMA request sent when CCx event occurs */
    constexpr std::uint32_t TIM8_CR2_CCDS_B_0x0 = 0;
        /** @brief CCx DMA requests sent when update event occurs */
    constexpr std::uint32_t TIM8_CR2_CCDS_B_0x1 = 1;

    /** @brief MMS[2:0]: Master mode selection These bits select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: Other codes reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM8_CR2_MMS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable the Counter Enable signal CNT_EN is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). (value: 1)
     *          - B_0x2: Update The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. (value: 2)
     *          - B_0x3: Compare Pulse The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (tim_trgo). (value: 3)
     *          - B_0x4: Compare tim_oc1refc signal is used as trigger output (tim_trgo) (value: 4)
     *          - B_0x5: Compare tim_oc2refc signal is used as trigger output (tim_trgo) (value: 5)
     *          - B_0x6: Compare tim_oc3refc signal is used as trigger output (tim_trgo) (value: 6)
     *          - B_0x7: Compare tim_oc4refc signal is used as trigger output (tim_trgo) (value: 7)
     */
        /** @brief Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x0 = 0;
        /** @brief Enable the Counter Enable signal CNT_EN is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x1 = 1;
        /** @brief Update The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x2 = 2;
        /** @brief Compare Pulse The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (tim_trgo). */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x3 = 3;
        /** @brief Compare tim_oc1refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x4 = 4;
        /** @brief Compare tim_oc2refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x5 = 5;
        /** @brief Compare tim_oc3refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x6 = 6;
        /** @brief Compare tim_oc4refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM8_CR2_MMS_B_0x7 = 7;

    /** @brief tim_ti1 selection */
    using TIM8_CR2_TI1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The tim_ti1_in[15..0] multiplexer output is connected to tim_ti1 input (value: 0)
     *          - B_0x1: tim_ti1_in[15..0], tim_ti2_in[15..0] and tim_ti3_in[15..0] multiplexers outputs are XORed and connected to the tim_ti1 input (value: 1)
     */
        /** @brief The tim_ti1_in[15..0] multiplexer output is connected to tim_ti1 input */
    constexpr std::uint32_t TIM8_CR2_TI1S_B_0x0 = 0;
        /** @brief tim_ti1_in[15..0], tim_ti2_in[15..0] and tim_ti3_in[15..0] multiplexers outputs are XORed and connected to the tim_ti1 input */
    constexpr std::uint32_t TIM8_CR2_TI1S_B_0x1 = 1;

    /** @brief Output idle state 1 (tim_oc1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_CR2_OIS1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1=0 (after a dead-time) when MOE=0 (value: 0)
     *          - B_0x1: tim_oc1=1 (after a dead-time) when MOE=0 (value: 1)
     */
        /** @brief tim_oc1=0 (after a dead-time) when MOE=0 */
    constexpr std::uint32_t TIM8_CR2_OIS1_B_0x0 = 0;
        /** @brief tim_oc1=1 (after a dead-time) when MOE=0 */
    constexpr std::uint32_t TIM8_CR2_OIS1_B_0x1 = 1;

    /** @brief Output idle state 1 (tim_oc1n output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_CR2_OIS1N = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1n=0 after a dead-time when MOE=0 (value: 0)
     *          - B_0x1: tim_oc1n=1 after a dead-time when MOE=0 (value: 1)
     */
        /** @brief tim_oc1n=0 after a dead-time when MOE=0 */
    constexpr std::uint32_t TIM8_CR2_OIS1N_B_0x0 = 0;
        /** @brief tim_oc1n=1 after a dead-time when MOE=0 */
    constexpr std::uint32_t TIM8_CR2_OIS1N_B_0x1 = 1;

    /** @brief Output idle state 2 (tim_oc2 output) Refer to OIS1 bit */
    using TIM8_CR2_OIS2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 2 (tim_oc2n output) Refer to OIS1N bit */
    using TIM8_CR2_OIS2N = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 3 (tim_oc3n output) Refer to OIS1 bit */
    using TIM8_CR2_OIS3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 3 (tim_oc3n output) Refer to OIS1N bit */
    using TIM8_CR2_OIS3N = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 4 (tim_oc4 output) Refer to OIS1 bit */
    using TIM8_CR2_OIS4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 4 (tim_oc4n output) Refer to OIS1N bit */
    using TIM8_CR2_OIS4N = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 5 (tim_oc5 output) Refer to OIS1 bit */
    using TIM8_CR2_OIS5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output idle state 6 (tim_oc6 output) Refer to OIS1 bit */
    using TIM8_CR2_OIS6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Master mode selection 2 These bits allow the information to be sent to ADC for synchronization (tim_trgo2) to be selected. The combination is as follows: Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM8_CR2_MMS2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo2). If the reset is generated by the trigger input (slave mode controller configured in reset mode), the signal on tim_trgo2 is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable the Counter Enable signal CNT_EN is used as trigger output (tim_trgo2). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between the CEN control bit and the trigger input when configured in Gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on tim_trgo2, except if the Master/Slave mode is selected (see the MSM bit description in TIMx_SMCR register). (value: 1)
     *          - B_0x2: Update the update event is selected as trigger output (tim_trgo2). For instance, a master timer can then be used as a prescaler for a slave timer. (value: 2)
     *          - B_0x3: Compare pulse the trigger output sends a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or compare match occurs (tim_trgo2). (value: 3)
     *          - B_0x4: Compare tim_oc1refc signal is used as trigger output (tim_trgo2) (value: 4)
     *          - B_0x5: Compare tim_oc2refc signal is used as trigger output (tim_trgo2) (value: 5)
     *          - B_0x6: Compare tim_oc3refc signal is used as trigger output (tim_trgo2) (value: 6)
     *          - B_0x7: Compare tim_oc4refc signal is used as trigger output (tim_trgo2) (value: 7)
     *          - B_0x8: Compare tim_oc5refc signal is used as trigger output (tim_trgo2) (value: 8)
     *          - B_0x9: Compare tim_oc6refc signal is used as trigger output (tim_trgo2) (value: 9)
     *          - B_0xA: Compare Pulse tim_oc4refc rising or falling edges generate pulses on tim_trgo2 (value: 10)
     *          - B_0xB: Compare pulse tim_oc6refc rising or falling edges generate pulses on tim_trgo2 (value: 11)
     *          - B_0xC: Compare pulse tim_oc4refc or tim_oc6refc rising edges generate pulses on tim_trgo2 (value: 12)
     *          - B_0xD: Compare pulse tim_oc4refc rising or tim_oc6refc falling edges generate pulses on tim_trgo2 (value: 13)
     *          - B_0xE: Compare pulse tim_oc5refc or tim_oc6refc rising edges generate pulses on tim_trgo2 (value: 14)
     *          - B_0xF: Compare pulse tim_oc5refc rising or tim_oc6refc falling edges generate pulses on tim_trgo2 (value: 15)
     */
        /** @brief Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo2). If the reset is generated by the trigger input (slave mode controller configured in reset mode), the signal on tim_trgo2 is delayed compared to the actual reset. */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x0 = 0;
        /** @brief Enable the Counter Enable signal CNT_EN is used as trigger output (tim_trgo2). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between the CEN control bit and the trigger input when configured in Gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on tim_trgo2, except if the Master/Slave mode is selected (see the MSM bit description in TIMx_SMCR register). */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x1 = 1;
        /** @brief Update the update event is selected as trigger output (tim_trgo2). For instance, a master timer can then be used as a prescaler for a slave timer. */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x2 = 2;
        /** @brief Compare pulse the trigger output sends a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or compare match occurs (tim_trgo2). */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x3 = 3;
        /** @brief Compare tim_oc1refc signal is used as trigger output (tim_trgo2) */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x4 = 4;
        /** @brief Compare tim_oc2refc signal is used as trigger output (tim_trgo2) */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x5 = 5;
        /** @brief Compare tim_oc3refc signal is used as trigger output (tim_trgo2) */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x6 = 6;
        /** @brief Compare tim_oc4refc signal is used as trigger output (tim_trgo2) */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x7 = 7;
        /** @brief Compare tim_oc5refc signal is used as trigger output (tim_trgo2) */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x8 = 8;
        /** @brief Compare tim_oc6refc signal is used as trigger output (tim_trgo2) */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0x9 = 9;
        /** @brief Compare Pulse tim_oc4refc rising or falling edges generate pulses on tim_trgo2 */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0xA = 10;
        /** @brief Compare pulse tim_oc6refc rising or falling edges generate pulses on tim_trgo2 */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0xB = 11;
        /** @brief Compare pulse tim_oc4refc or tim_oc6refc rising edges generate pulses on tim_trgo2 */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0xC = 12;
        /** @brief Compare pulse tim_oc4refc rising or tim_oc6refc falling edges generate pulses on tim_trgo2 */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0xD = 13;
        /** @brief Compare pulse tim_oc5refc or tim_oc6refc rising edges generate pulses on tim_trgo2 */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0xE = 14;
        /** @brief Compare pulse tim_oc5refc rising or tim_oc6refc falling edges generate pulses on tim_trgo2 */
    constexpr std::uint32_t TIM8_CR2_MMS2_B_0xF = 15;

    /** @brief MMS[3] */
    using TIM8_CR2_MMS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 slave mode control register */
    using TIM8_SMCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief SMS[2:0]: Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo or the tim_trgo2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM8_SMCR_SMS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled if CEN = '1' then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: Quadrature encoder mode 1, x2 mode- Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. (value: 1)
     *          - B_0x2: Quadrature encoder mode 2, x2 mode Counter counts up/down on tim_ti2fp2 edge depending on tim_ti1fp1 level. (value: 2)
     *          - B_0x3: Quadrature encoder mode 3, x4 mode Counter counts up/down on both tim_ti1fp1 and tim_ti2fp2 edges depending on the level of the other input. (value: 3)
     *          - B_0x4: Reset Mode Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. (value: 4)
     *          - B_0x5: Gated Mode The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. (value: 5)
     *          - B_0x6: Trigger Mode The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. (value: 6)
     *          - B_0x7: External Clock Mode 1 Rising edges of the selected trigger (tim_trgi) clock the counter. (value: 7)
     */
        /** @brief Slave mode disabled if CEN = '1' then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x0 = 0;
        /** @brief Quadrature encoder mode 1, x2 mode- Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x1 = 1;
        /** @brief Quadrature encoder mode 2, x2 mode Counter counts up/down on tim_ti2fp2 edge depending on tim_ti1fp1 level. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x2 = 2;
        /** @brief Quadrature encoder mode 3, x4 mode Counter counts up/down on both tim_ti1fp1 and tim_ti2fp2 edges depending on the level of the other input. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x3 = 3;
        /** @brief Reset Mode Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x4 = 4;
        /** @brief Gated Mode The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x5 = 5;
        /** @brief Trigger Mode The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x6 = 6;
        /** @brief External Clock Mode 1 Rising edges of the selected trigger (tim_trgi) clock the counter. */
    constexpr std::uint32_t TIM8_SMCR_SMS_B_0x7 = 7;

    /** @brief OCREF clear selection This bit is used to select the OCREF clear source. */
    using TIM8_SMCR_OCCS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ocref_clr_int is connected to the tim_ocref_clr input (value: 0)
     *          - B_0x1: tim_ocref_clr_int is connected to tim_etrf (value: 1)
     */
        /** @brief tim_ocref_clr_int is connected to the tim_ocref_clr input */
    constexpr std::uint32_t TIM8_SMCR_OCCS_B_0x0 = 0;
        /** @brief tim_ocref_clr_int is connected to tim_etrf */
    constexpr std::uint32_t TIM8_SMCR_OCCS_B_0x1 = 1;

    /** @brief TS[2:0]: Trigger selection This bitfield is combined with TS[4:3] bits. This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See Table 605: TIMx internal trigger connection for more details on tim_itrx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition. */
    using TIM8_SMCR_TS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal Trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal Trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal Trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal Trigger 3 (tim_itr3) (value: 3)
     *          - B_0x4: tim_ti1 Edge Detector (tim_ti1f_ed) (value: 4)
     *          - B_0x5: Filtered Timer Input 1 (tim_ti1fp1) (value: 5)
     *          - B_0x6: Filtered Timer Input 2 (tim_ti2fp2) (value: 6)
     *          - B_0x7: External Trigger input (tim_etrf) (value: 7)
     */
        /** @brief Internal Trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x0 = 0;
        /** @brief Internal Trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x1 = 1;
        /** @brief Internal Trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x2 = 2;
        /** @brief Internal Trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x3 = 3;
        /** @brief tim_ti1 Edge Detector (tim_ti1f_ed) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x4 = 4;
        /** @brief Filtered Timer Input 1 (tim_ti1fp1) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x5 = 5;
        /** @brief Filtered Timer Input 2 (tim_ti2fp2) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x6 = 6;
        /** @brief External Trigger input (tim_etrf) */
    constexpr std::uint32_t TIM8_SMCR_TS_B_0x7 = 7;

    /** @brief Master/slave mode */
    using TIM8_SMCR_MSM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful if we want to synchronize several timers on a single external event. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t TIM8_SMCR_MSM_B_0x0 = 0;
        /** @brief The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful if we want to synchronize several timers on a single external event. */
    constexpr std::uint32_t TIM8_SMCR_MSM_B_0x1 = 1;

    /** @brief External trigger filter This bit-field then defines the frequency used to sample tim_etrp signal and the length of the digital filter applied to tim_etrp. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM8_SMCR_ETF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at f sub DTS /sub (value: 0)
     *          - B_0x1: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 (value: 1)
     *          - B_0x2: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 (value: 2)
     *          - B_0x3: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 (value: 3)
     *          - B_0x4: f sub SAMPLING /sub =f sub DTS /sub /2, N=6 (value: 4)
     *          - B_0x5: f sub SAMPLING /sub =f sub DTS /sub /2, N=8 (value: 5)
     *          - B_0x6: f sub SAMPLING /sub =f sub DTS /sub /4, N=6 (value: 6)
     *          - B_0x7: f sub SAMPLING /sub =f sub DTS /sub /4, N=8 (value: 7)
     *          - B_0x8: f sub SAMPLING /sub =f sub DTS /sub /8, N=6 (value: 8)
     *          - B_0x9: f sub SAMPLING /sub =f sub DTS /sub /8, N=8 (value: 9)
     *          - B_0xA: f sub SAMPLING /sub =f sub DTS /sub /16, N=5 (value: 10)
     *          - B_0xB: f sub SAMPLING /sub =f sub DTS /sub /16, N=6 (value: 11)
     *          - B_0xC: f sub SAMPLING /sub =f sub DTS /sub /16, N=8 (value: 12)
     *          - B_0xD: f sub SAMPLING /sub =f sub DTS /sub /32, N=5 (value: 13)
     *          - B_0xE: f sub SAMPLING /sub =f sub DTS /sub /32, N=6 (value: 14)
     *          - B_0xF: f sub SAMPLING /sub =f sub DTS /sub /32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at f sub DTS /sub */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x0 = 0;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x1 = 1;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x2 = 2;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x3 = 3;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=6 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x4 = 4;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=8 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x5 = 5;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=6 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x6 = 6;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=8 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x7 = 7;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=6 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x8 = 8;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=8 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0x9 = 9;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=5 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0xA = 10;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=6 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0xB = 11;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=8 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0xC = 12;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=5 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0xD = 13;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=6 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0xE = 14;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=8 */
    constexpr std::uint32_t TIM8_SMCR_ETF_B_0xF = 15;

    /** @brief External trigger prescaler External trigger signal tim_etrp frequency must be at most 1/4 of TIMxCLK frequency. A prescaler can be enabled to reduce tim_etrp frequency. It is useful when inputting fast external clocks on tim_etr_in. */
    using TIM8_SMCR_ETPS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Prescaler OFF (value: 0)
     *          - B_0x1: tim_etr_in frequency divided by 2 (value: 1)
     *          - B_0x2: tim_etr_in frequency divided by 4 (value: 2)
     *          - B_0x3: tim_etr_in frequency divided by 8 (value: 3)
     */
        /** @brief Prescaler OFF */
    constexpr std::uint32_t TIM8_SMCR_ETPS_B_0x0 = 0;
        /** @brief tim_etr_in frequency divided by 2 */
    constexpr std::uint32_t TIM8_SMCR_ETPS_B_0x1 = 1;
        /** @brief tim_etr_in frequency divided by 4 */
    constexpr std::uint32_t TIM8_SMCR_ETPS_B_0x2 = 2;
        /** @brief tim_etr_in frequency divided by 8 */
    constexpr std::uint32_t TIM8_SMCR_ETPS_B_0x3 = 3;

    /** @brief External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with tim_trgi connected to tim_etrf (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, tim_trgi must not be connected to tim_etrf in this case (TS bits must not be 00111). Note: If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is tim_etrf. */
    using TIM8_SMCR_ECE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: External clock mode 2 disabled (value: 0)
     *          - B_0x1: External clock mode 2 enabled. The counter is clocked by any active edge on the tim_etrf signal. (value: 1)
     */
        /** @brief External clock mode 2 disabled */
    constexpr std::uint32_t TIM8_SMCR_ECE_B_0x0 = 0;
        /** @brief External clock mode 2 enabled. The counter is clocked by any active edge on the tim_etrf signal. */
    constexpr std::uint32_t TIM8_SMCR_ECE_B_0x1 = 1;

    /** @brief External trigger polarity This bit selects whether tim_etr_in or tim_etr_in is used for trigger operations */
    using TIM8_SMCR_ETP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_etr_in is non-inverted, active at high level or rising edge. (value: 0)
     *          - B_0x1: tim_etr_in is inverted, active at low level or falling edge. (value: 1)
     */
        /** @brief tim_etr_in is non-inverted, active at high level or rising edge. */
    constexpr std::uint32_t TIM8_SMCR_ETP_B_0x0 = 0;
        /** @brief tim_etr_in is inverted, active at low level or falling edge. */
    constexpr std::uint32_t TIM8_SMCR_ETP_B_0x1 = 1;

    /** @brief Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM8_SMCR_SMS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: Encoder mode 1 - Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. (value: 1)
     */
        /** @brief Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM8_SMCR_SMS_1_B_0x0 = 0;
        /** @brief Encoder mode 1 - Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. */
    constexpr std::uint32_t TIM8_SMCR_SMS_1_B_0x1 = 1;

    /** @brief Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition. */
    using TIM8_SMCR_TS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal trigger 3 (tim_itr3) (value: 3)
     */
        /** @brief Internal trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM8_SMCR_TS_1_B_0x0 = 0;
        /** @brief Internal trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM8_SMCR_TS_1_B_0x1 = 1;
        /** @brief Internal trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM8_SMCR_TS_1_B_0x2 = 2;
        /** @brief Internal trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM8_SMCR_TS_1_B_0x3 = 3;

    /** @brief SMS preload enable This bit selects whether the SMS[3:0] bitfield is preloaded */
    using TIM8_SMCR_SMSPE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: SMS[3:0] bitfield is not preloaded (value: 0)
     *          - B_0x1: SMS[3:0] preload is enabled (value: 1)
     */
        /** @brief SMS[3:0] bitfield is not preloaded */
    constexpr std::uint32_t TIM8_SMCR_SMSPE_B_0x0 = 0;
        /** @brief SMS[3:0] preload is enabled */
    constexpr std::uint32_t TIM8_SMCR_SMSPE_B_0x1 = 1;

    /** @brief SMS preload source This bit selects whether the events that triggers the SMS[3:0] bitfield transfer from preload to active */
    using TIM8_SMCR_SMSPS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The transfer is triggered by the Timer's Update event (value: 0)
     *          - B_0x1: The transfer is triggered by the Index event (value: 1)
     */
        /** @brief The transfer is triggered by the Timer's Update event */
    constexpr std::uint32_t TIM8_SMCR_SMSPS_B_0x0 = 0;
        /** @brief The transfer is triggered by the Index event */
    constexpr std::uint32_t TIM8_SMCR_SMSPS_B_0x1 = 1;

    /** @brief TIM8 DMA/interrupt enable register */
    using TIM8_DIER = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using TIM8_DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled (value: 0)
     *          - B_0x1: Update interrupt enabled (value: 1)
     */
        /** @brief Update interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_UIE_B_0x1 = 1;

    /** @brief Capture/compare 1 interrupt enable */
    using TIM8_DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled (value: 0)
     *          - B_0x1: CC1 interrupt enabled (value: 1)
     */
        /** @brief CC1 interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_CC1IE_B_0x1 = 1;

    /** @brief Capture/compare 2 interrupt enable */
    using TIM8_DIER_CC2IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 interrupt disabled (value: 0)
     *          - B_0x1: CC2 interrupt enabled (value: 1)
     */
        /** @brief CC2 interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_CC2IE_B_0x0 = 0;
        /** @brief CC2 interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_CC2IE_B_0x1 = 1;

    /** @brief Capture/compare 3 interrupt enable */
    using TIM8_DIER_CC3IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 interrupt disabled (value: 0)
     *          - B_0x1: CC3 interrupt enabled (value: 1)
     */
        /** @brief CC3 interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_CC3IE_B_0x0 = 0;
        /** @brief CC3 interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_CC3IE_B_0x1 = 1;

    /** @brief Capture/compare 4 interrupt enable */
    using TIM8_DIER_CC4IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 interrupt disabled (value: 0)
     *          - B_0x1: CC4 interrupt enabled (value: 1)
     */
        /** @brief CC4 interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_CC4IE_B_0x0 = 0;
        /** @brief CC4 interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_CC4IE_B_0x1 = 1;

    /** @brief COM interrupt enable */
    using TIM8_DIER_COMIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COM interrupt disabled (value: 0)
     *          - B_0x1: COM interrupt enabled (value: 1)
     */
        /** @brief COM interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_COMIE_B_0x0 = 0;
        /** @brief COM interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_COMIE_B_0x1 = 1;

    /** @brief Trigger interrupt enable */
    using TIM8_DIER_TIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger interrupt disabled (value: 0)
     *          - B_0x1: Trigger interrupt enabled (value: 1)
     */
        /** @brief Trigger interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_TIE_B_0x0 = 0;
        /** @brief Trigger interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_TIE_B_0x1 = 1;

    /** @brief Break interrupt enable */
    using TIM8_DIER_BIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break interrupt disabled (value: 0)
     *          - B_0x1: Break interrupt enabled (value: 1)
     */
        /** @brief Break interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_BIE_B_0x0 = 0;
        /** @brief Break interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_BIE_B_0x1 = 1;

    /** @brief Update DMA request enable */
    using TIM8_DIER_UDE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update DMA request disabled (value: 0)
     *          - B_0x1: Update DMA request enabled (value: 1)
     */
        /** @brief Update DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_UDE_B_0x0 = 0;
        /** @brief Update DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_UDE_B_0x1 = 1;

    /** @brief Capture/compare 1 DMA request enable */
    using TIM8_DIER_CC1DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 DMA request disabled (value: 0)
     *          - B_0x1: CC1 DMA request enabled (value: 1)
     */
        /** @brief CC1 DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_CC1DE_B_0x0 = 0;
        /** @brief CC1 DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_CC1DE_B_0x1 = 1;

    /** @brief Capture/compare 2 DMA request enable */
    using TIM8_DIER_CC2DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 DMA request disabled (value: 0)
     *          - B_0x1: CC2 DMA request enabled (value: 1)
     */
        /** @brief CC2 DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_CC2DE_B_0x0 = 0;
        /** @brief CC2 DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_CC2DE_B_0x1 = 1;

    /** @brief Capture/compare 3 DMA request enable */
    using TIM8_DIER_CC3DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 DMA request disabled (value: 0)
     *          - B_0x1: CC3 DMA request enabled (value: 1)
     */
        /** @brief CC3 DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_CC3DE_B_0x0 = 0;
        /** @brief CC3 DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_CC3DE_B_0x1 = 1;

    /** @brief Capture/compare 4 DMA request enable */
    using TIM8_DIER_CC4DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 DMA request disabled (value: 0)
     *          - B_0x1: CC4 DMA request enabled (value: 1)
     */
        /** @brief CC4 DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_CC4DE_B_0x0 = 0;
        /** @brief CC4 DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_CC4DE_B_0x1 = 1;

    /** @brief COM DMA request enable */
    using TIM8_DIER_COMDE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COM DMA request disabled (value: 0)
     *          - B_0x1: COM DMA request enabled (value: 1)
     */
        /** @brief COM DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_COMDE_B_0x0 = 0;
        /** @brief COM DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_COMDE_B_0x1 = 1;

    /** @brief Trigger DMA request enable */
    using TIM8_DIER_TDE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger DMA request disabled (value: 0)
     *          - B_0x1: Trigger DMA request enabled (value: 1)
     */
        /** @brief Trigger DMA request disabled */
    constexpr std::uint32_t TIM8_DIER_TDE_B_0x0 = 0;
        /** @brief Trigger DMA request enabled */
    constexpr std::uint32_t TIM8_DIER_TDE_B_0x1 = 1;

    /** @brief Index interrupt enable */
    using TIM8_DIER_IDXIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index interrupt disabled (value: 0)
     *          - B_0x1: Index Change interrupt enabled (value: 1)
     */
        /** @brief Index interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_IDXIE_B_0x0 = 0;
        /** @brief Index Change interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_IDXIE_B_0x1 = 1;

    /** @brief Direction change interrupt enable */
    using TIM8_DIER_DIRIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Direction Change interrupt disabled (value: 0)
     *          - B_0x1: Direction Change interrupt enabled (value: 1)
     */
        /** @brief Direction Change interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_DIRIE_B_0x0 = 0;
        /** @brief Direction Change interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_DIRIE_B_0x1 = 1;

    /** @brief Index error interrupt enable */
    using TIM8_DIER_IERRIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index error interrupt disabled (value: 0)
     *          - B_0x1: Index error interrupt enabled (value: 1)
     */
        /** @brief Index error interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_IERRIE_B_0x0 = 0;
        /** @brief Index error interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_IERRIE_B_0x1 = 1;

    /** @brief Transition error interrupt enable */
    using TIM8_DIER_TERRIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Transition error interrupt disabled (value: 0)
     *          - B_0x1: Transition error interrupt enabled (value: 1)
     */
        /** @brief Transition error interrupt disabled */
    constexpr std::uint32_t TIM8_DIER_TERRIE_B_0x0 = 0;
        /** @brief Transition error interrupt enabled */
    constexpr std::uint32_t TIM8_DIER_TERRIE_B_0x1 = 1;

    /** @brief TIM8 status register */
    using TIM8_SR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to Section 65.6.3: TIM1 slave mode control register (TIM1_SMCR)), if URS=0 and UDIS=0 in the TIMx_CR1 register. */
    using TIM8_SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred. (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred. */
    constexpr std::uint32_t TIM8_SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint32_t TIM8_SR_UIF_B_0x1 = 1;

    /** @brief Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in downcounting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER). */
    using TIM8_SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint32_t TIM8_SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred */
    constexpr std::uint32_t TIM8_SR_CC1IF_B_0x1 = 1;

    /** @brief Capture/compare 2 interrupt flag Refer to CC1IF description */
    using TIM8_SR_CC2IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 interrupt flag Refer to CC1IF description */
    using TIM8_SR_CC3IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 interrupt flag Refer to CC1IF description */
    using TIM8_SR_CC4IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief COM interrupt flag This flag is set by hardware on COM event (when capture/compare Control bits CCxE, CCxNE, OCxM have been updated). It is cleared by software. */
    using TIM8_SR_COMIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No COM event occurred. (value: 0)
     *          - B_0x1: COM interrupt pending. (value: 1)
     */
        /** @brief No COM event occurred. */
    constexpr std::uint32_t TIM8_SR_COMIF_B_0x0 = 0;
        /** @brief COM interrupt pending. */
    constexpr std::uint32_t TIM8_SR_COMIF_B_0x1 = 1;

    /** @brief Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on tim_trgi input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software. */
    using TIM8_SR_TIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No trigger event occurred. (value: 0)
     *          - B_0x1: Trigger interrupt pending. (value: 1)
     */
        /** @brief No trigger event occurred. */
    constexpr std::uint32_t TIM8_SR_TIF_B_0x0 = 0;
        /** @brief Trigger interrupt pending. */
    constexpr std::uint32_t TIM8_SR_TIF_B_0x1 = 1;

    /** @brief Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active. */
    using TIM8_SR_BIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No break event occurred. (value: 0)
     *          - B_0x1: An active level has been detected on the break input. An interrupt is generated if BIE=1 in the TIMx_DIER register. (value: 1)
     */
        /** @brief No break event occurred. */
    constexpr std::uint32_t TIM8_SR_BIF_B_0x0 = 0;
        /** @brief An active level has been detected on the break input. An interrupt is generated if BIE=1 in the TIMx_DIER register. */
    constexpr std::uint32_t TIM8_SR_BIF_B_0x1 = 1;

    /** @brief Break 2 interrupt flag This flag is set by hardware as soon as the break 2 input goes active. It can be cleared by software if the break 2 input is not active. */
    using TIM8_SR_B2IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No break event occurred. (value: 0)
     *          - B_0x1: An active level has been detected on the break 2 input. An interrupt is generated if BIE=1 in the TIMx_DIER register. (value: 1)
     */
        /** @brief No break event occurred. */
    constexpr std::uint32_t TIM8_SR_B2IF_B_0x0 = 0;
        /** @brief An active level has been detected on the break 2 input. An interrupt is generated if BIE=1 in the TIMx_DIER register. */
    constexpr std::uint32_t TIM8_SR_B2IF_B_0x1 = 1;

    /** @brief Capture/compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'. */
    using TIM8_SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected. (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected. */
    constexpr std::uint32_t TIM8_SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint32_t TIM8_SR_CC1OF_B_0x1 = 1;

    /** @brief Capture/compare 2 overcapture flag Refer to CC1OF description */
    using TIM8_SR_CC2OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 overcapture flag Refer to CC1OF description */
    using TIM8_SR_CC3OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 overcapture flag Refer to CC1OF description */
    using TIM8_SR_CC4OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief System break interrupt flag This flag is set by hardware as soon as the system break input goes active. It can be cleared by software if the system break input is not active. This flag must be reset to re-start PWM operation. */
    using TIM8_SR_SBIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No break event occurred. (value: 0)
     *          - B_0x1: An active level has been detected on the system break input. An interrupt is generated if BIE=1 in the TIMx_DIER register. (value: 1)
     */
        /** @brief No break event occurred. */
    constexpr std::uint32_t TIM8_SR_SBIF_B_0x0 = 0;
        /** @brief An active level has been detected on the system break input. An interrupt is generated if BIE=1 in the TIMx_DIER register. */
    constexpr std::uint32_t TIM8_SR_SBIF_B_0x1 = 1;

    /** @brief Compare 5 interrupt flag Refer to CC1IF description Note: Channel 5 can only be configured as output. */
    using TIM8_SR_CC5IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Compare 6 interrupt flag Refer to CC1IF description Note: Channel 6 can only be configured as output. */
    using TIM8_SR_CC6IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Index interrupt flag This flag is set by hardware when an index event is detected. It is cleared by software by writing it to '0'. */
    using TIM8_SR_IDXF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No index event occurred. (value: 0)
     *          - B_0x1: An index event has occurred (value: 1)
     */
        /** @brief No index event occurred. */
    constexpr std::uint32_t TIM8_SR_IDXF_B_0x0 = 0;
        /** @brief An index event has occurred */
    constexpr std::uint32_t TIM8_SR_IDXF_B_0x1 = 1;

    /** @brief Direction change interrupt flag This flag is set by hardware when the direction changes in encoder mode (DIR bit value in TIMx_CR is changing). It is cleared by software by writing it to '0'. */
    using TIM8_SR_DIRF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No direction change (value: 0)
     *          - B_0x1: Direction change (value: 1)
     */
        /** @brief No direction change */
    constexpr std::uint32_t TIM8_SR_DIRF_B_0x0 = 0;
        /** @brief Direction change */
    constexpr std::uint32_t TIM8_SR_DIRF_B_0x1 = 1;

    /** @brief Index error interrupt flag This flag is set by hardware when an index error is detected. It is cleared by software by writing it to '0'. */
    using TIM8_SR_IERRF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No index error has been detected. (value: 0)
     *          - B_0x1: An index error has been detected (value: 1)
     */
        /** @brief No index error has been detected. */
    constexpr std::uint32_t TIM8_SR_IERRF_B_0x0 = 0;
        /** @brief An index error has been detected */
    constexpr std::uint32_t TIM8_SR_IERRF_B_0x1 = 1;

    /** @brief Transition error interrupt flag This flag is set by hardware when a transition error is detected in encoder mode. It is cleared by software by writing it to '0'. */
    using TIM8_SR_TERRF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No encoder transition error has been detected. (value: 0)
     *          - B_0x1: An encoder transition error has been detected (value: 1)
     */
        /** @brief No encoder transition error has been detected. */
    constexpr std::uint32_t TIM8_SR_TERRF_B_0x0 = 0;
        /** @brief An encoder transition error has been detected */
    constexpr std::uint32_t TIM8_SR_TERRF_B_0x1 = 1;

    /** @brief TIM8 event generation register */
    using TIM8_EGR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation This bit can be set by software, it is automatically cleared by hardware. */
    using TIM8_EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting). (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM8_EGR_UG_B_0x0 = 0;
        /** @brief Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting). */
    constexpr std::uint16_t TIM8_EGR_UG_B_0x1 = 1;

    /** @brief Capture/compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high. */
    using TIM8_EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM8_EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint16_t TIM8_EGR_CC1G_B_0x1 = 1;

    /** @brief Capture/compare 2 generation Refer to CC1G description */
    using TIM8_EGR_CC2G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 generation Refer to CC1G description */
    using TIM8_EGR_CC3G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 generation Refer to CC1G description */
    using TIM8_EGR_CC4G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare control update generation This bit can be set by software, it is automatically cleared by hardware Note: This bit acts only on channels having a complementary output. */
    using TIM8_EGR_COMG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: When CCPC bit is set, it allows to update CCxE, CCxNE and OCxM bits (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM8_EGR_COMG_B_0x0 = 0;
        /** @brief When CCPC bit is set, it allows to update CCxE, CCxNE and OCxM bits */
    constexpr std::uint16_t TIM8_EGR_COMG_B_0x1 = 1;

    /** @brief Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM8_EGR_TG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM8_EGR_TG_B_0x0 = 0;
        /** @brief The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled. */
    constexpr std::uint16_t TIM8_EGR_TG_B_0x1 = 1;

    /** @brief Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM8_EGR_BG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM8_EGR_BG_B_0x0 = 0;
        /** @brief A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled. */
    constexpr std::uint16_t TIM8_EGR_BG_B_0x1 = 1;

    /** @brief Break 2 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM8_EGR_B2G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A break 2 event is generated. MOE bit is cleared and B2IF flag is set. Related interrupt can occur if enabled. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM8_EGR_B2G_B_0x0 = 0;
        /** @brief A break 2 event is generated. MOE bit is cleared and B2IF flag is set. Related interrupt can occur if enabled. */
    constexpr std::uint16_t TIM8_EGR_B2G_B_0x1 = 1;

    /** @brief TIM8 capture/compare mode register 1 [alternate] */
    using TIM8_CCMR1_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0' in TIMx_CCER). */
    using TIM8_CCMR1_Input_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC1S_B_0x3 = 3;

    /** @brief Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (tim_ic1). The prescaler is reset as soon as CC1E='0' (TIMx_CCER register). */
    using TIM8_CCMR1_Input_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter This bit-field defines the frequency used to sample tim_ti1 input and the length of the digital filter applied to tim_ti1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM8_CCMR1_Input_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at f sub DTS /sub (value: 0)
     *          - B_0x1: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 (value: 1)
     *          - B_0x2: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 (value: 2)
     *          - B_0x3: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 (value: 3)
     *          - B_0x4: f sub SAMPLING /sub =f sub DTS /sub /2, N=6 (value: 4)
     *          - B_0x5: f sub SAMPLING /sub =f sub DTS /sub /2, N=8 (value: 5)
     *          - B_0x6: f sub SAMPLING /sub =f sub DTS /sub /4, N=6 (value: 6)
     *          - B_0x7: f sub SAMPLING /sub =f sub DTS /sub /4, N=8 (value: 7)
     *          - B_0x8: f sub SAMPLING /sub =f sub DTS /sub /8, N=6 (value: 8)
     *          - B_0x9: f sub SAMPLING /sub =f sub DTS /sub /8, N=8 (value: 9)
     *          - B_0xA: f sub SAMPLING /sub =f sub DTS /sub /16, N=5 (value: 10)
     *          - B_0xB: f sub SAMPLING /sub =f sub DTS /sub /16, N=6 (value: 11)
     *          - B_0xC: f sub SAMPLING /sub =f sub DTS /sub /16, N=8 (value: 12)
     *          - B_0xD: f sub SAMPLING /sub =f sub DTS /sub /32, N=5 (value: 13)
     *          - B_0xE: f sub SAMPLING /sub =f sub DTS /sub /32, N=6 (value: 14)
     *          - B_0xF: f sub SAMPLING /sub =f sub DTS /sub /32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at f sub DTS /sub */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x0 = 0;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x1 = 1;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x2 = 2;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x3 = 3;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=6 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x4 = 4;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=8 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x5 = 5;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=6 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x6 = 6;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=8 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x7 = 7;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=6 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x8 = 8;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=8 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0x9 = 9;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=5 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0xA = 10;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=6 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0xB = 11;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=8 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0xC = 12;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=5 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0xD = 13;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=6 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0xE = 14;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=8 */
    constexpr std::uint32_t TIM8_CCMR1_Input_IC1F_B_0xF = 15;

    /** @brief Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0' in TIMx_CCER). */
    using TIM8_CCMR1_Input_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR1_Input_CC2S_B_0x3 = 3;

    /** @brief Input capture 2 prescaler */
    using TIM8_CCMR1_Input_IC2PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 2 filter */
    using TIM8_CCMR1_Input_IC2F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare mode register 1 [alternate] */
    using TIM8_CCMR1_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0' in TIMx_CCER). */
    using TIM8_CCMR1_Output_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC1S_B_0x3 = 3;

    /** @brief Output compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger. */
    using TIM8_CCMR1_Output_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1FE_B_0x1 = 1;

    /** @brief Output compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). */
    using TIM8_CCMR1_Output_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1PE_B_0x1 = 1;

    /** @brief OC1M[2:0]: Output compare 1 mode These bits define the behavior of the output reference signal tim_oc1ref from which tim_oc1 and tim_oc1n are derived. tim_oc1ref is active high whereas tim_oc1 and tim_oc1n active level depends on CC1P and CC1NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from 'frozen' mode to 'PWM' mode. Note: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated. */
    using TIM8_CCMR1_Output_OC1M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggle tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. (value: 3)
     *          - B_0x4: Force inactive level tim_oc1ref is forced low. (value: 4)
     *          - B_0x5: Force active level tim_oc1ref is forced high. (value: 5)
     *          - B_0x6: PWM mode 1 In upcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (tim_oc1ref='0') as long as TIMx_CNT TIMx_CCR1 else active (tim_oc1ref='1'). (value: 6)
     *          - B_0x7: PWM mode 2 In upcounting, channel 1 is inactive as long as TIMx_CNT TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. (value: 7)
     */
        /** @brief Frozen The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x2 = 2;
        /** @brief Toggle tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x3 = 3;
        /** @brief Force inactive level tim_oc1ref is forced low. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x4 = 4;
        /** @brief Force active level tim_oc1ref is forced high. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x5 = 5;
        /** @brief PWM mode 1 In upcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (tim_oc1ref='0') as long as TIMx_CNT TIMx_CCR1 else active (tim_oc1ref='1'). */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x6 = 6;
        /** @brief PWM mode 2 In upcounting, channel 1 is inactive as long as TIMx_CNT TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1M_B_0x7 = 7;

    /** @brief Output compare 1 clear enable */
    using TIM8_CCMR1_Output_OC1CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1ref is not affected by the tim_ocref_clr_int signal (value: 0)
     *          - B_0x1: tim_oc1ref is cleared as soon as a High level is detected on tim_ocref_clr_int signal (tim_ocref_clr input or tim_etrf input) (value: 1)
     */
        /** @brief tim_oc1ref is not affected by the tim_ocref_clr_int signal */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1CE_B_0x0 = 0;
        /** @brief tim_oc1ref is cleared as soon as a High level is detected on tim_ocref_clr_int signal (tim_ocref_clr input or tim_etrf input) */
    constexpr std::uint32_t TIM8_CCMR1_Output_OC1CE_B_0x1 = 1;

    /** @brief Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0' in TIMx_CCER). */
    using TIM8_CCMR1_Output_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR1_Output_CC2S_B_0x3 = 3;

    /** @brief Output compare 2 fast enable */
    using TIM8_CCMR1_Output_OC2FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 preload enable */
    using TIM8_CCMR1_Output_OC2PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC2M[2:0]: Output compare 2 mode */
    using TIM8_CCMR1_Output_OC2M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 clear enable */
    using TIM8_CCMR1_Output_OC2CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC1M[3] */
    using TIM8_CCMR1_Output_OC1M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC2M[3] */
    using TIM8_CCMR1_Output_OC2M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare mode register 2 [alternate] */
    using TIM8_CCMR2_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = '0' in TIMx_CCER). */
    using TIM8_CCMR2_Input_CC3S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 channel is configured as output (value: 0)
     *          - B_0x1: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 (value: 1)
     *          - B_0x2: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 (value: 2)
     *          - B_0x3: CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC3 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC3S_B_0x0 = 0;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC3S_B_0x1 = 1;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC3S_B_0x2 = 2;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC3S_B_0x3 = 3;

    /** @brief Input capture 3 prescaler */
    using TIM8_CCMR2_Input_IC3PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 3 filter */
    using TIM8_CCMR2_Input_IC3F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = '0' in TIMx_CCER). */
    using TIM8_CCMR2_Input_CC4S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 channel is configured as output (value: 0)
     *          - B_0x1: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 (value: 1)
     *          - B_0x2: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 (value: 2)
     *          - B_0x3: CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC4 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC4S_B_0x0 = 0;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC4S_B_0x1 = 1;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC4S_B_0x2 = 2;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR2_Input_CC4S_B_0x3 = 3;

    /** @brief Input capture 4 prescaler */
    using TIM8_CCMR2_Input_IC4PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 4 filter */
    using TIM8_CCMR2_Input_IC4F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare mode register 2 [alternate] */
    using TIM8_CCMR2_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = '0' in TIMx_CCER). */
    using TIM8_CCMR2_Output_CC3S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 channel is configured as output (value: 0)
     *          - B_0x1: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 (value: 1)
     *          - B_0x2: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 (value: 2)
     *          - B_0x3: CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC3 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC3S_B_0x0 = 0;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC3S_B_0x1 = 1;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC3S_B_0x2 = 2;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC3S_B_0x3 = 3;

    /** @brief Output compare 3 fast enable */
    using TIM8_CCMR2_Output_OC3FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 3 preload enable */
    using TIM8_CCMR2_Output_OC3PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC3M[2:0]: Output compare 3 mode These bits define the behavior of the output reference signal tim_oc3ref from which tim_oc3 and tim_oc3n are derived. tim_oc3ref is active high whereas tim_oc3 and tim_oc3n active level depends on CC3P and CC3NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from 'frozen' mode to 'PWM' mode. On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC3M active bits take the new value from the preloaded bits only when a COM event is generated. */
    using TIM8_CCMR2_Output_OC3M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen The comparison between the output compare register TIMx_CCR3 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 3 to active level on match. tim_oc3ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 3 (TIMx_CCR3). (value: 1)
     *          - B_0x2: Set channel 3 to inactive level on match. tim_oc3ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 3 (TIMx_CCR3). (value: 2)
     *          - B_0x3: Toggle tim_oc3ref toggles when TIMx_CNT=TIMx_CCR3. (value: 3)
     *          - B_0x4: Force inactive level tim_oc3ref is forced low. (value: 4)
     *          - B_0x5: Force active level tim_oc3ref is forced high. (value: 5)
     *          - B_0x6: PWM mode 1 In upcounting, channel 3 is active as long as TIMx_CNT TIMx_CCR3 else inactive. In downcounting, channel 3 is inactive (tim_oc3ref='0') as long as TIMx_CNT TIMx_CCR3 else active (tim_oc3ref='1'). (value: 6)
     *          - B_0x7: PWM mode 2 In upcounting, channel 3 is inactive as long as TIMx_CNT TIMx_CCR3 else active. In downcounting, channel 3 is active as long as TIMx_CNT TIMx_CCR3 else inactive. (value: 7)
     */
        /** @brief Frozen The comparison between the output compare register TIMx_CCR3 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x0 = 0;
        /** @brief Set channel 3 to active level on match. tim_oc3ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 3 (TIMx_CCR3). */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x1 = 1;
        /** @brief Set channel 3 to inactive level on match. tim_oc3ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 3 (TIMx_CCR3). */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x2 = 2;
        /** @brief Toggle tim_oc3ref toggles when TIMx_CNT=TIMx_CCR3. */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x3 = 3;
        /** @brief Force inactive level tim_oc3ref is forced low. */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x4 = 4;
        /** @brief Force active level tim_oc3ref is forced high. */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x5 = 5;
        /** @brief PWM mode 1 In upcounting, channel 3 is active as long as TIMx_CNT TIMx_CCR3 else inactive. In downcounting, channel 3 is inactive (tim_oc3ref='0') as long as TIMx_CNT TIMx_CCR3 else active (tim_oc3ref='1'). */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x6 = 6;
        /** @brief PWM mode 2 In upcounting, channel 3 is inactive as long as TIMx_CNT TIMx_CCR3 else active. In downcounting, channel 3 is active as long as TIMx_CNT TIMx_CCR3 else inactive. */
    constexpr std::uint32_t TIM8_CCMR2_Output_OC3M_B_0x7 = 7;

    /** @brief Output compare 3 clear enable */
    using TIM8_CCMR2_Output_OC3CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = '0' in TIMx_CCER). */
    using TIM8_CCMR2_Output_CC4S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 channel is configured as output (value: 0)
     *          - B_0x1: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 (value: 1)
     *          - B_0x2: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 (value: 2)
     *          - B_0x3: CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC4 channel is configured as output */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC4S_B_0x0 = 0;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC4S_B_0x1 = 1;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC4S_B_0x2 = 2;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM8_CCMR2_Output_CC4S_B_0x3 = 3;

    /** @brief Output compare 4 fast enable */
    using TIM8_CCMR2_Output_OC4FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 4 preload enable */
    using TIM8_CCMR2_Output_OC4PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC4M[2:0]: Output compare 4 mode Refer to OC3M[3:0] bit description */
    using TIM8_CCMR2_Output_OC4M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 4 clear enable */
    using TIM8_CCMR2_Output_OC4CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC3M[3] */
    using TIM8_CCMR2_Output_OC3M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC4M[3] */
    using TIM8_CCMR2_Output_OC4M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare enable register */
    using TIM8_CCER = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to Table 619 for details. Note: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1E active bit takes the new value from the preloaded bit only when a Commutation event is generated. */
    using TIM8_CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / OC1 is not active (see below) (value: 0)
     *          - B_0x1: Capture mode enabled / OC1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / OC1 is not active (see below) */
    constexpr std::uint32_t TIM8_CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / OC1 signal is output on the corresponding output pin */
    constexpr std::uint32_t TIM8_CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0:	the configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). Note: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated. */
    using TIM8_CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint32_t TIM8_CCER_CC1P_B_0x0 = 0;
        /** @brief OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint32_t TIM8_CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/compare 1 complementary output enable Note: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NE active bit takes the new value from the preloaded bit only when a Commutation event is generated. */
    using TIM8_CCER_CC1NE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Off tim_oc1n is not active. tim_oc1n level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. (value: 0)
     *          - B_0x1: On tim_oc1n signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. (value: 1)
     */
        /** @brief Off tim_oc1n is not active. tim_oc1n level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. */
    constexpr std::uint32_t TIM8_CCER_CC1NE_B_0x0 = 0;
        /** @brief On tim_oc1n signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. */
    constexpr std::uint32_t TIM8_CCER_CC1NE_B_0x1 = 1;

    /** @brief Capture/compare 1 complementary output polarity CC1 channel configured as output: CC1 channel configured as input: This bit is used in conjunction with CC1P to define the polarity of tim_ti1fp1 and tim_ti2fp1. Refer to CC1P description. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (channel configured as output). Note: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a Commutation event is generated. */
    using TIM8_CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1n active high. (value: 0)
     *          - B_0x1: tim_oc1n active low. (value: 1)
     */
        /** @brief tim_oc1n active high. */
    constexpr std::uint32_t TIM8_CCER_CC1NP_B_0x0 = 0;
        /** @brief tim_oc1n active low. */
    constexpr std::uint32_t TIM8_CCER_CC1NP_B_0x1 = 1;

    /** @brief Capture/compare 2 output enable Refer to CC1E description */
    using TIM8_CCER_CC2E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 output polarity Refer to CC1P description */
    using TIM8_CCER_CC2P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 complementary output enable Refer to CC1NE description */
    using TIM8_CCER_CC2NE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 complementary output polarity Refer to CC1NP description */
    using TIM8_CCER_CC2NP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 output enable Refer to CC1E description */
    using TIM8_CCER_CC3E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 output polarity Refer to CC1P description */
    using TIM8_CCER_CC3P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 complementary output enable Refer to CC1NE description */
    using TIM8_CCER_CC3NE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 complementary output polarity Refer to CC1NP description */
    using TIM8_CCER_CC3NP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 output enable Refer to CC1E description */
    using TIM8_CCER_CC4E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 output polarity Refer to CC1P description */
    using TIM8_CCER_CC4P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 complementary output enable Refer to CC1NE description */
    using TIM8_CCER_CC4NE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 complementary output polarity Refer to CC1NP description */
    using TIM8_CCER_CC4NP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 5 output enable Refer to CC1E description */
    using TIM8_CCER_CC5E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 5 output polarity Refer to CC1P description */
    using TIM8_CCER_CC5P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 6 output enable Refer to CC1E description */
    using TIM8_CCER_CC6E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 6 output polarity Refer to CC1P description */
    using TIM8_CCER_CC6P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 counter */
    using TIM8_CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register only holds the non-dithered part in CNT[15:0]. The fractional part is not available. */
    using TIM8_CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief UIF copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in the TIMxCR1 is reset, bit 31 is reserved and read at 0. */
    using TIM8_CNT_UIFCPY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 prescaler */
    using TIM8_PSC = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value The counter clock frequency (f sub tim_cnt_ck /sub ) is equal to f sub tim_psc_ck /sub / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in 'reset mode'). */
    using TIM8_PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 auto-reload register */
    using TIM8_ARR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the Section 65.3.3: Time-base unit on page 4457 for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part. */
    using TIM8_ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 repetition counter register */
    using TIM8_RCR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Repetition counter reload value This bitfield defines the update rate of the compare registers (i.e. periodic transfers from preload to active registers) when preload registers are enable. It also defines the update interrupt generation rate, if this interrupt is enable. When the repetition down-counter reaches zero, an update event is generated and it restarts counting from REP value. As the repetition counter is reloaded with REP value only at the repetition update event UEV, any write to the TIMx_RCR register is not taken in account until the next repetition update event. It means in PWM mode (REP+1) corresponds to: the number of PWM periods in edge-aligned mode the number of half PWM period in center-aligned mode. */
    using TIM8_RCR_REP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare register 1 */
    using TIM8_CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc1 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR1[15:0]. The CCR1[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR1[19:4]. The CCR1[3:0] bitfield contains the dithered part. If channel CC1 is configured as input: CR1 is the counter value transferred by the last input capture 1 event (tim_ic1). The TIMx_CCR1 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR1[15:0]. The CCR1[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR1[19:4]. The CCR1[3:0] bits are reset. */
    using TIM8_CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare register 2 */
    using TIM8_CCR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc2 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR2[15:0]. The CCR2[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR2[19:4]. The CCR2[3:0] bitfield contains the dithered part. If channel CC2 is configured as input: CCR2 is the counter value transferred by the last input capture 2 event (tim_ic2). The TIMx_CCR2 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR2[15:0]. The CCR2[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR2[19:4]. The CCR2[3:0] bits are reset. */
    using TIM8_CCR2_CCR2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare register 3 */
    using TIM8_CCR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare value If channel CC3 is configured as output: CCR3 is the value to be loaded in the actual capture/compare 3 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC3PE). Else the preload value is copied in the active capture/compare 3 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc3 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR3[15:0]. The CCR3[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR3[19:4]. The CCR3[3:0] bitfield contains the dithered part. If channel CC3 is configured as input: CCR3 is the counter value transferred by the last input capture 3 event (tim_ic3). The TIMx_CCR3 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR3[15:0]. The CCR3[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR3[19:4]. The CCR3[3:0] bits are reset. */
    using TIM8_CCR3_CCR3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare register 4 */
    using TIM8_CCR4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare value If channel CC4 is configured as output: CCR4 is the value to be loaded in the actual capture/compare 4 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC4PE). Else the preload value is copied in the active capture/compare 4 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on tim_oc4 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR4[15:0]. The CCR4[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR4[19:4]. The CCR4[3:0] bitfield contains the dithered part. If channel CC4 is configured as input: CCR4 is the counter value transferred by the last input capture 4 event (tim_ic4). The TIMx_CCR4 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR4[15:0]. The CCR4[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR4[19:4]. The CCR4[3:0] bits are reset. */
    using TIM8_CCR4_CCR4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 break and dead-time register */
    using TIM8_BDTR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx = DT=DTG[7:0]x t sub dtg /sub with t sub dtg /sub =t sub DTS /sub . DTG[7:5]=10x = DT=(64+DTG[5:0])xt sub dtg /sub with T sub dtg /sub =2xt sub DTS /sub . DTG[7:5]=110 = DT=(32+DTG[4:0])xt sub dtg /sub with T sub dtg /sub =8xt sub DTS /sub . DTG[7:5]=111 = DT=(32+DTG[4:0])xt sub dtg /sub with T sub dtg /sub =16xt sub DTS /sub . Example if T sub DTS /sub =125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 us to 31750 ns by 250 ns steps, 32 us to 63us by 1 us steps, 64 us to 126 us by 2 us steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_BDTR_DTG = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset. */
    using TIM8_BDTR_LOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: LOCK OFF No bit is write protected. (value: 0)
     *          - B_0x1: LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKBID/BK2BID/BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written. (value: 1)
     *          - B_0x2: LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written. (value: 2)
     *          - B_0x3: LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written. (value: 3)
     */
        /** @brief LOCK OFF No bit is write protected. */
    constexpr std::uint32_t TIM8_BDTR_LOCK_B_0x0 = 0;
        /** @brief LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKBID/BK2BID/BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written. */
    constexpr std::uint32_t TIM8_BDTR_LOCK_B_0x1 = 1;
        /** @brief LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written. */
    constexpr std::uint32_t TIM8_BDTR_LOCK_B_0x2 = 2;
        /** @brief LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written. */
    constexpr std::uint32_t TIM8_BDTR_LOCK_B_0x3 = 3;

    /** @brief Off-state selection for idle mode This bit is used when MOE=0 due to a break event or by a software write, on channels configured as outputs. See OC/OCN enable description for more details (Section 65.6.11: TIM1 capture/compare enable register (TIM1_CCER)). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_BDTR_OSSI = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic and which imposes a Hi-Z state). (value: 0)
     *          - B_0x1: When inactive, OC/OCN outputs are first forced with their inactive level then forced to their idle level after the deadtime. The timer maintains its control over the output. (value: 1)
     */
        /** @brief When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic and which imposes a Hi-Z state). */
    constexpr std::uint32_t TIM8_BDTR_OSSI_B_0x0 = 0;
        /** @brief When inactive, OC/OCN outputs are first forced with their inactive level then forced to their idle level after the deadtime. The timer maintains its control over the output. */
    constexpr std::uint32_t TIM8_BDTR_OSSI_B_0x1 = 1;

    /** @brief Off-state selection for Run mode This bit is used when MOE=1 on channels having a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (Section 65.6.11: TIM1 capture/compare enable register (TIM1_CCER)). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_BDTR_OSSR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic, which forces a Hi-Z state). (value: 0)
     *          - B_0x1: When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer). (value: 1)
     */
        /** @brief When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic, which forces a Hi-Z state). */
    constexpr std::uint32_t TIM8_BDTR_OSSR_B_0x0 = 0;
        /** @brief When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer). */
    constexpr std::uint32_t TIM8_BDTR_OSSR_B_0x1 = 1;

    /** @brief Break enable This bit enables the complete break protection (including all sources connected to bk_acth and BKIN sources, as per Figure 635: Break and Break2 circuitry overview). Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM8_BDTR_BKE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break function disabled (value: 0)
     *          - B_0x1: Break function enabled (value: 1)
     */
        /** @brief Break function disabled */
    constexpr std::uint32_t TIM8_BDTR_BKE_B_0x0 = 0;
        /** @brief Break function enabled */
    constexpr std::uint32_t TIM8_BDTR_BKE_B_0x1 = 1;

    /** @brief Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM8_BDTR_BKP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk is active low (value: 0)
     *          - B_0x1: Break input tim_brk is active high (value: 1)
     */
        /** @brief Break input tim_brk is active low */
    constexpr std::uint32_t TIM8_BDTR_BKP_B_0x0 = 0;
        /** @brief Break input tim_brk is active high */
    constexpr std::uint32_t TIM8_BDTR_BKP_B_0x1 = 1;

    /** @brief Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_BDTR_AOE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: MOE can be set only by software (value: 0)
     *          - B_0x1: MOE can be set by software or automatically at the next update event (if none of the break inputs tim_brk and tim_brk2 is active) (value: 1)
     */
        /** @brief MOE can be set only by software */
    constexpr std::uint32_t TIM8_BDTR_AOE_B_0x0 = 0;
        /** @brief MOE can be set by software or automatically at the next update event (if none of the break inputs tim_brk and tim_brk2 is active) */
    constexpr std::uint32_t TIM8_BDTR_AOE_B_0x1 = 1;

    /** @brief Main output enable This bit is cleared asynchronously by hardware as soon as one of the break inputs is active (tim_brk or tim_brk2). It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. In response to a break event or if MOE is written to 0: OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit. See OC/OCN enable description for more details (Section 65.6.11: TIM1 capture/compare enable register (TIM1_CCER)). */
    using TIM8_BDTR_MOE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: In response to a break 2 event. OC and OCN outputs are disabled (value: 0)
     *          - B_0x1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register). (value: 1)
     */
        /** @brief In response to a break 2 event. OC and OCN outputs are disabled */
    constexpr std::uint32_t TIM8_BDTR_MOE_B_0x0 = 0;
        /** @brief OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register). */
    constexpr std::uint32_t TIM8_BDTR_MOE_B_0x1 = 1;

    /** @brief Break filter This bit-field defines the frequency used to sample tim_brk input and the length of the digital filter applied to tim_brk. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_BDTR_BKF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, tim_brk acts asynchronously (value: 0)
     *          - B_0x1: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 (value: 1)
     *          - B_0x2: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 (value: 2)
     *          - B_0x3: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 (value: 3)
     *          - B_0x4: f sub SAMPLING /sub =f sub DTS /sub /2, N=6 (value: 4)
     *          - B_0x5: f sub SAMPLING /sub =f sub DTS /sub /2, N=8 (value: 5)
     *          - B_0x6: f sub SAMPLING /sub =f sub DTS /sub /4, N=6 (value: 6)
     *          - B_0x7: f sub SAMPLING /sub =f sub DTS /sub /4, N=8 (value: 7)
     *          - B_0x8: f sub SAMPLING /sub =f sub DTS /sub /8, N=6 (value: 8)
     *          - B_0x9: f sub SAMPLING /sub =f sub DTS /sub /8, N=8 (value: 9)
     *          - B_0xA: f sub SAMPLING /sub =f sub DTS /sub /16, N=5 (value: 10)
     *          - B_0xB: f sub SAMPLING /sub =f sub DTS /sub /16, N=6 (value: 11)
     *          - B_0xC: f sub SAMPLING /sub =f sub DTS /sub /16, N=8 (value: 12)
     *          - B_0xD: f sub SAMPLING /sub =f sub DTS /sub /32, N=5 (value: 13)
     *          - B_0xE: f sub SAMPLING /sub =f sub DTS /sub /32, N=6 (value: 14)
     *          - B_0xF: f sub SAMPLING /sub =f sub DTS /sub /32, N=8 (value: 15)
     */
        /** @brief No filter, tim_brk acts asynchronously */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x0 = 0;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x1 = 1;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x2 = 2;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x3 = 3;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x4 = 4;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x5 = 5;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x6 = 6;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x7 = 7;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x8 = 8;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0x9 = 9;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=5 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0xA = 10;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0xB = 11;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0xC = 12;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=5 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0xD = 13;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0xE = 14;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BKF_B_0xF = 15;

    /** @brief Break 2 filter This bit-field defines the frequency used to sample tim_brk2 input and the length of the digital filter applied to tim_brk2. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_BDTR_BK2F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, tim_brk2 acts asynchronously (value: 0)
     *          - B_0x1: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 (value: 1)
     *          - B_0x2: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 (value: 2)
     *          - B_0x3: f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 (value: 3)
     *          - B_0x4: f sub SAMPLING /sub =f sub DTS /sub /2, N=6 (value: 4)
     *          - B_0x5: f sub SAMPLING /sub =f sub DTS /sub /2, N=8 (value: 5)
     *          - B_0x6: f sub SAMPLING /sub =f sub DTS /sub /4, N=6 (value: 6)
     *          - B_0x7: f sub SAMPLING /sub =f sub DTS /sub /4, N=8 (value: 7)
     *          - B_0x8: f sub SAMPLING /sub =f sub DTS /sub /8, N=6 (value: 8)
     *          - B_0x9: f sub SAMPLING /sub =f sub DTS /sub /8, N=8 (value: 9)
     *          - B_0xA: f sub SAMPLING /sub =f sub DTS /sub /16, N=5 (value: 10)
     *          - B_0xB: f sub SAMPLING /sub =f sub DTS /sub /16, N=6 (value: 11)
     *          - B_0xC: f sub SAMPLING /sub =f sub DTS /sub /16, N=8 (value: 12)
     *          - B_0xD: f sub SAMPLING /sub =f sub DTS /sub /32, N=5 (value: 13)
     *          - B_0xE: f sub SAMPLING /sub =f sub DTS /sub /32, N=6 (value: 14)
     *          - B_0xF: f sub SAMPLING /sub =f sub DTS /sub /32, N=8 (value: 15)
     */
        /** @brief No filter, tim_brk2 acts asynchronously */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x0 = 0;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=2 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x1 = 1;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=4 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x2 = 2;
        /** @brief f sub SAMPLING /sub =f sub tim_ker_ck /sub , N=8 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x3 = 3;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x4 = 4;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /2, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x5 = 5;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x6 = 6;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /4, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x7 = 7;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x8 = 8;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /8, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0x9 = 9;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=5 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0xA = 10;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0xB = 11;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /16, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0xC = 12;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=5 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0xD = 13;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=6 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0xE = 14;
        /** @brief f sub SAMPLING /sub =f sub DTS /sub /32, N=8 */
    constexpr std::uint32_t TIM8_BDTR_BK2F_B_0xF = 15;

    /** @brief Break 2 enable This bit enables the complete break 2 protection (including all sources connected to bk_acth and BKIN sources, as per Figure 635: Break and Break2 circuitry overview). Note: The BRKIN2 must only be used with OSSR = OSSI = 1. Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM8_BDTR_BK2E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break2 function disabled (value: 0)
     *          - B_0x1: Break2 function enabled (value: 1)
     */
        /** @brief Break2 function disabled */
    constexpr std::uint32_t TIM8_BDTR_BK2E_B_0x0 = 0;
        /** @brief Break2 function enabled */
    constexpr std::uint32_t TIM8_BDTR_BK2E_B_0x1 = 1;

    /** @brief Break 2 polarity Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM8_BDTR_BK2P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk2 is active low (value: 0)
     *          - B_0x1: Break input tim_brk2 is active high (value: 1)
     */
        /** @brief Break input tim_brk2 is active low */
    constexpr std::uint32_t TIM8_BDTR_BK2P_B_0x0 = 0;
        /** @brief Break input tim_brk2 is active high */
    constexpr std::uint32_t TIM8_BDTR_BK2P_B_0x1 = 1;

    /** @brief Break disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM8_BDTR_BKDSRM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk is armed (value: 0)
     *          - B_0x1: Break input tim_brk is disarmed (value: 1)
     */
        /** @brief Break input tim_brk is armed */
    constexpr std::uint32_t TIM8_BDTR_BKDSRM_B_0x0 = 0;
        /** @brief Break input tim_brk is disarmed */
    constexpr std::uint32_t TIM8_BDTR_BKDSRM_B_0x1 = 1;

    /** @brief Break2 disarm Refer to BKDSRM description */
    using TIM8_BDTR_BK2DSRM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Break bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM8_BDTR_BKBID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk in input mode (value: 0)
     *          - B_0x1: Break input tim_brk in bidirectional mode (value: 1)
     */
        /** @brief Break input tim_brk in input mode */
    constexpr std::uint32_t TIM8_BDTR_BKBID_B_0x0 = 0;
        /** @brief Break input tim_brk in bidirectional mode */
    constexpr std::uint32_t TIM8_BDTR_BKBID_B_0x1 = 1;

    /** @brief Break2 bidirectional Refer to BKBID description */
    using TIM8_BDTR_BK2BID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare register 5 */
    using TIM8_CCR5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 5 value CCR5 is the value to be loaded in the actual capture/compare 5 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR3 register (bit OC5PE). Else the preload value is copied in the active capture/compare 5 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc5 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR5[15:0]. The CCR5[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR5[19:4]. The CCR5[3:0] bitfield contains the dithered part. */
    using TIM8_CCR5_CCR5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Group channel 5 and channel 1 Distortion on channel 1 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1). Note: it is also possible to apply this distortion on combined PWM signals. */
    using TIM8_CCR5_GC5C1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No effect of oc5ref on oc1refc (value: 0)
     *          - B_0x1: oc1refc is the logical AND of oc1ref and oc5ref (value: 1)
     */
        /** @brief No effect of oc5ref on oc1refc */
    constexpr std::uint32_t TIM8_CCR5_GC5C1_B_0x0 = 0;
        /** @brief oc1refc is the logical AND of oc1ref and oc5ref */
    constexpr std::uint32_t TIM8_CCR5_GC5C1_B_0x1 = 1;

    /** @brief Group channel 5 and channel 2 Distortion on channel 2 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1). Note: it is also possible to apply this distortion on combined PWM signals. */
    using TIM8_CCR5_GC5C2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No effect of tim_oc5ref on tim_oc2refc (value: 0)
     *          - B_0x1: tim_oc2refc is the logical AND of tim_oc2ref and tim_oc5ref (value: 1)
     */
        /** @brief No effect of tim_oc5ref on tim_oc2refc */
    constexpr std::uint32_t TIM8_CCR5_GC5C2_B_0x0 = 0;
        /** @brief tim_oc2refc is the logical AND of tim_oc2ref and tim_oc5ref */
    constexpr std::uint32_t TIM8_CCR5_GC5C2_B_0x1 = 1;

    /** @brief Group channel 5 and channel 3 Distortion on channel 3 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR2). Note: it is also possible to apply this distortion on combined PWM signals. */
    using TIM8_CCR5_GC5C3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No effect of tim_oc5ref on tim_oc3refc (value: 0)
     *          - B_0x1: tim_oc3refc is the logical AND of tim_oc3ref and tim_oc5ref (value: 1)
     */
        /** @brief No effect of tim_oc5ref on tim_oc3refc */
    constexpr std::uint32_t TIM8_CCR5_GC5C3_B_0x0 = 0;
        /** @brief tim_oc3refc is the logical AND of tim_oc3ref and tim_oc5ref */
    constexpr std::uint32_t TIM8_CCR5_GC5C3_B_0x1 = 1;

    /** @brief TIM8 capture/compare register 6 */
    using TIM8_CCR6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 6 value CCR6 is the value to be loaded in the actual capture/compare 6 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR3 register (bit OC6PE). Else the preload value is copied in the active capture/compare 6 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc6 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR6[15:0]. The CCR6[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR6[19:4]. The CCR6[3:0] bitfield contains the dithered part. */
    using TIM8_CCR6_CCR6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 capture/compare mode register 3 */
    using TIM8_CCMR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 5 fast enable */
    using TIM8_CCMR3_OC5FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 5 preload enable */
    using TIM8_CCMR3_OC5PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC5M[2:0]: Output compare 5 mode */
    using TIM8_CCMR3_OC5M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 5 clear enable */
    using TIM8_CCMR3_OC5CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 6 fast enable */
    using TIM8_CCMR3_OC6FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 6 preload enable */
    using TIM8_CCMR3_OC6PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC6M[2:0]: Output compare 6 mode */
    using TIM8_CCMR3_OC6M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 6 clear enable */
    using TIM8_CCMR3_OC6CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC5M[3] */
    using TIM8_CCMR3_OC5M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC6M[3] */
    using TIM8_CCMR3_OC6M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 timer deadtime register 2 */
    using TIM8_DTR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Dead-time falling edge generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs, on the falling edge. DTGF[7:5]=0xx = DTF=DTGF[7:0]x t sub dtg /sub with t sub dtg /sub =t sub DTS /sub . DTGF[7:5]=10x = DTF=(64+DTGF[5:0])xt sub dtg /sub with T sub dtg /sub =2xt sub DTS /sub . DTGF[7:5]=110 = DTF=(32+DTGF[4:0])xt sub dtg /sub with T sub dtg /sub =8xt sub DTS /sub . DTGF[7:5]=111 = DTF=(32+DTGF[4:0])xt sub dtg /sub with T sub dtg /sub =16xt sub DTS /sub . Example if T sub DTS /sub =125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 us to 31750 ns by 250 ns steps, 32 us to 63us by 1 us steps, 64 us to 126 us by 2 us steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_DTR2_DTGF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Deadtime asymmetric enable Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_DTR2_DTAE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Deadtime on rising and falling edges are identical, and defined with DTG[7:0] register (value: 0)
     *          - B_0x1: Deadtime on rising edge is defined with DTG[7:0] register and deadtime on falling edge is defined with DTGF[7:0] bits. (value: 1)
     */
        /** @brief Deadtime on rising and falling edges are identical, and defined with DTG[7:0] register */
    constexpr std::uint32_t TIM8_DTR2_DTAE_B_0x0 = 0;
        /** @brief Deadtime on rising edge is defined with DTG[7:0] register and deadtime on falling edge is defined with DTGF[7:0] bits. */
    constexpr std::uint32_t TIM8_DTR2_DTAE_B_0x1 = 1;

    /** @brief Deadtime preload enable Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_DTR2_DTPE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Deadtime value is not preloaded (value: 0)
     *          - B_0x1: Deadtime value preload is enabled (value: 1)
     */
        /** @brief Deadtime value is not preloaded */
    constexpr std::uint32_t TIM8_DTR2_DTPE_B_0x0 = 0;
        /** @brief Deadtime value preload is enabled */
    constexpr std::uint32_t TIM8_DTR2_DTPE_B_0x1 = 1;

    /** @brief TIM8 timer encoder control register */
    using TIM8_ECR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Index enable This bit indicates if the Index event resets the counter. */
    using TIM8_ECR_IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index disabled (value: 0)
     *          - B_0x1: Index enabled (value: 1)
     */
        /** @brief Index disabled */
    constexpr std::uint32_t TIM8_ECR_IE_B_0x0 = 0;
        /** @brief Index enabled */
    constexpr std::uint32_t TIM8_ECR_IE_B_0x1 = 1;

    /** @brief Index direction This bit indicates in which direction the Index event resets the counter. Note: The IDR[1:0] bitfield must be written when IE bit is reset (index disabled). */
    using TIM8_ECR_IDIR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index resets the counter whatever the direction (value: 0)
     *          - B_0x1: Index resets the counter when up-counting only (value: 1)
     *          - B_0x2: Index resets the counter when down-counting only (value: 2)
     */
        /** @brief Index resets the counter whatever the direction */
    constexpr std::uint32_t TIM8_ECR_IDIR_B_0x0 = 0;
        /** @brief Index resets the counter when up-counting only */
    constexpr std::uint32_t TIM8_ECR_IDIR_B_0x1 = 1;
        /** @brief Index resets the counter when down-counting only */
    constexpr std::uint32_t TIM8_ECR_IDIR_B_0x2 = 2;

    /** @brief Index blanking This bit indicates if the Index event is conditioned by the tim_ti3 input */
    using TIM8_ECR_IBLK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index always active (value: 0)
     *          - B_0x1: Index disabled hen tim_ti3 input is active, as per CC3P bitfield (value: 1)
     *          - B_0x2: Index disabled when tim_ti4 input is active, as per CC4P bitfield (value: 2)
     */
        /** @brief Index always active */
    constexpr std::uint32_t TIM8_ECR_IBLK_B_0x0 = 0;
        /** @brief Index disabled hen tim_ti3 input is active, as per CC3P bitfield */
    constexpr std::uint32_t TIM8_ECR_IBLK_B_0x1 = 1;
        /** @brief Index disabled when tim_ti4 input is active, as per CC4P bitfield */
    constexpr std::uint32_t TIM8_ECR_IBLK_B_0x2 = 2;

    /** @brief First index This bit indicates if the first index only is taken into account */
    using TIM8_ECR_FIDX = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index is always active (value: 0)
     *          - B_0x1: the first Index only resets the counter (value: 1)
     */
        /** @brief Index is always active */
    constexpr std::uint32_t TIM8_ECR_FIDX_B_0x0 = 0;
        /** @brief the first Index only resets the counter */
    constexpr std::uint32_t TIM8_ECR_FIDX_B_0x1 = 1;

    /** @brief Index positioning In quadrature encoder mode (SMS[3:0] = 0001, 0010, 0011, 1110, 1111), this bit indicates in which AB input configuration the Index event resets the counter. In directional clock mode or clock plus direction mode (SMS[3:0] = 1010, 1011, 1100, 1101), these bits indicates on which level the Index event resets the counter. In bidirectional clock mode, this applies for both clock inputs. x0: Index resets the counter when clock is 0 x1: Index resets the counter when clock is 1 Note: IPOS[1] bit is not significant */
    using TIM8_ECR_IPOS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index resets the counter when AB = 00 (value: 0)
     *          - B_0x1: Index resets the counter when AB = 01 (value: 1)
     *          - B_0x2: Index resets the counter when AB = 10 (value: 2)
     *          - B_0x3: Index resets the counter when AB = 11 (value: 3)
     */
        /** @brief Index resets the counter when AB = 00 */
    constexpr std::uint32_t TIM8_ECR_IPOS_B_0x0 = 0;
        /** @brief Index resets the counter when AB = 01 */
    constexpr std::uint32_t TIM8_ECR_IPOS_B_0x1 = 1;
        /** @brief Index resets the counter when AB = 10 */
    constexpr std::uint32_t TIM8_ECR_IPOS_B_0x2 = 2;
        /** @brief Index resets the counter when AB = 11 */
    constexpr std::uint32_t TIM8_ECR_IPOS_B_0x3 = 3;

    /** @brief Pulse width This bitfield defines the pulse duration, as following: t sub PW /sub = PW[7:0] x t sub PWG /sub */
    using TIM8_ECR_PW = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Pulse width prescaler This bitfield sets the clock prescaler for the pulse generator, as following: t sub PWG /sub = (2 sup (PWPRSC[2:0]) /sup ) x t sub tim_ker_ck /sub */
    using TIM8_ECR_PWPRSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM8 timer input selection register */
    using TIM8_TISEL = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Selects tim_ti1[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list. */
    using TIM8_TISEL_TI1SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti1_in0: TIMx_CH1 (value: 0)
     *          - B_0x1: tim_ti1_in1 (value: 1)
     *          - B_0xF: tim_ti1_in15 (value: 15)
     */
        /** @brief tim_ti1_in0: TIMx_CH1 */
    constexpr std::uint32_t TIM8_TISEL_TI1SEL_B_0x0 = 0;
        /** @brief tim_ti1_in1 */
    constexpr std::uint32_t TIM8_TISEL_TI1SEL_B_0x1 = 1;
        /** @brief tim_ti1_in15 */
    constexpr std::uint32_t TIM8_TISEL_TI1SEL_B_0xF = 15;

    /** @brief Selects tim_ti2[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list. */
    using TIM8_TISEL_TI2SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti2_in0: TIMx_CH2 (value: 0)
     *          - B_0x1: tim_ti2_in1 (value: 1)
     *          - B_0xF: tim_ti2_in15 (value: 15)
     */
        /** @brief tim_ti2_in0: TIMx_CH2 */
    constexpr std::uint32_t TIM8_TISEL_TI2SEL_B_0x0 = 0;
        /** @brief tim_ti2_in1 */
    constexpr std::uint32_t TIM8_TISEL_TI2SEL_B_0x1 = 1;
        /** @brief tim_ti2_in15 */
    constexpr std::uint32_t TIM8_TISEL_TI2SEL_B_0xF = 15;

    /** @brief Selects tim_ti3[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list. */
    using TIM8_TISEL_TI3SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti3_in0: TIMx_CH2 (value: 0)
     *          - B_0x1: tim_ti3_in1 (value: 1)
     *          - B_0xF: tim_ti3_in15 (value: 15)
     */
        /** @brief tim_ti3_in0: TIMx_CH2 */
    constexpr std::uint32_t TIM8_TISEL_TI3SEL_B_0x0 = 0;
        /** @brief tim_ti3_in1 */
    constexpr std::uint32_t TIM8_TISEL_TI3SEL_B_0x1 = 1;
        /** @brief tim_ti3_in15 */
    constexpr std::uint32_t TIM8_TISEL_TI3SEL_B_0xF = 15;

    /** @brief Selects tim_ti4[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list. */
    using TIM8_TISEL_TI4SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti4_in0: TIMx_CH4 (value: 0)
     *          - B_0x1: tim_ti4_in1 (value: 1)
     *          - B_0xF: tim_ti4_in15 (value: 15)
     */
        /** @brief tim_ti4_in0: TIMx_CH4 */
    constexpr std::uint32_t TIM8_TISEL_TI4SEL_B_0x0 = 0;
        /** @brief tim_ti4_in1 */
    constexpr std::uint32_t TIM8_TISEL_TI4SEL_B_0x1 = 1;
        /** @brief tim_ti4_in15 */
    constexpr std::uint32_t TIM8_TISEL_TI4SEL_B_0xF = 15;

    /** @brief TIM8 alternate function option register 1 */
    using TIM8_AF1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIMx_BKIN input enable This bit enables the TIMx_BKIN alternate function input for the timer's tim_brk input. TIMx_BKIN input is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKINE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_BKIN input disabled (value: 0)
     *          - B_0x1: TIMx_BKIN input enabled (value: 1)
     */
        /** @brief TIMx_BKIN input disabled */
    constexpr std::uint32_t TIM8_AF1_BKINE_B_0x0 = 0;
        /** @brief TIMx_BKIN input enabled */
    constexpr std::uint32_t TIM8_AF1_BKINE_B_0x1 = 1;

    /** @brief tim_brk_cmp1 enable This bit enables the tim_brk_cmp1 for the timer's tim_brk input. tim_brk_cmp1 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP1E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp1 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp1 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp1 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP1E_B_0x0 = 0;
        /** @brief tim_brk_cmp1 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP1E_B_0x1 = 1;

    /** @brief tim_brk_cmp2 enable This bit enables the tim_brk_cmp2 for the timer's tim_brk input. tim_brk_cmp2 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP2E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp2 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp2 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp2 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP2E_B_0x0 = 0;
        /** @brief tim_brk_cmp2 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP2E_B_0x1 = 1;

    /** @brief tim_brk_cmp3 enable This bit enables the tim_brk_cmp3 for the timer's tim_brk input. tim_brk_cmp3 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP3E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp3 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp3 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp3 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP3E_B_0x0 = 0;
        /** @brief tim_brk_cmp3 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP3E_B_0x1 = 1;

    /** @brief tim_brk_cmp4 enable This bit enables the tim_brk_cmp4 for the timer's tim_brk input. tim_brk_cmp4 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP4E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp4 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp4 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp4 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP4E_B_0x0 = 0;
        /** @brief tim_brk_cmp4 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP4E_B_0x1 = 1;

    /** @brief tim_brk_cmp5 enable This bit enables the tim_brk_cmp5 for the timer's tim_brk input. tim_brk_cmp5 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP5E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp5 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp5 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp5 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP5E_B_0x0 = 0;
        /** @brief tim_brk_cmp5 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP5E_B_0x1 = 1;

    /** @brief tim_brk_cmp6 enable This bit enables the tim_brk_cmp6 for the timer's tim_brk input. tim_brk_cmp6 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP6E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp6 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp6 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp6 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP6E_B_0x0 = 0;
        /** @brief tim_brk_cmp6 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP6E_B_0x1 = 1;

    /** @brief tim_brk_cmp7 enable This bit enables the tim_brk_cmp7 for the timer's tim_brk input. tim_brk_cmp7 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP7E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp7 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp7 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp7 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP7E_B_0x0 = 0;
        /** @brief tim_brk_cmp7 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP7E_B_0x1 = 1;

    /** @brief tim_brk_cmp8 enable This bit enables the tim_brk_cmp8 for the timer's tim_brk input. tim_brk_cmp8 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP8E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp8 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp8 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp8 input disabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP8E_B_0x0 = 0;
        /** @brief tim_brk_cmp8 input enabled */
    constexpr std::uint32_t TIM8_AF1_BKCMP8E_B_0x1 = 1;

    /** @brief TIMx_BKIN input polarity This bit selects the TIMx_BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKINP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_BKIN input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) (value: 0)
     *          - B_0x1: TIMx_BKIN input polarity is inverted (active high if BKP = 0, active low if BKP = 1) (value: 1)
     */
        /** @brief TIMx_BKIN input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKINP_B_0x0 = 0;
        /** @brief TIMx_BKIN input polarity is inverted (active high if BKP = 0, active low if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKINP_B_0x1 = 1;

    /** @brief tim_brk_cmp1 input polarity This bit selects the tim_brk_cmp1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP1P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp1 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) (value: 0)
     *          - B_0x1: tim_brk_cmp1 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) (value: 1)
     */
        /** @brief tim_brk_cmp1 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP1P_B_0x0 = 0;
        /** @brief tim_brk_cmp1 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP1P_B_0x1 = 1;

    /** @brief tim_brk_cmp2 input polarity This bit selects the tim_brk_cmp2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP2P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp2 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) (value: 0)
     *          - B_0x1: tim_brk_cmp2 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) (value: 1)
     */
        /** @brief tim_brk_cmp2 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP2P_B_0x0 = 0;
        /** @brief tim_brk_cmp2 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP2P_B_0x1 = 1;

    /** @brief tim_brk_cmp3 input polarity This bit selects the tim_brk_cmp3 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP3P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp3 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) (value: 0)
     *          - B_0x1: tim_brk_cmp3 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) (value: 1)
     */
        /** @brief tim_brk_cmp3 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP3P_B_0x0 = 0;
        /** @brief tim_brk_cmp3 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP3P_B_0x1 = 1;

    /** @brief tim_brk_cmp4 input polarity This bit selects the tim_brk_cmp4 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_BKCMP4P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp4 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) (value: 0)
     *          - B_0x1: tim_brk_cmp4 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) (value: 1)
     */
        /** @brief tim_brk_cmp4 input polarity is not inverted (active low if BKP = 0, active high if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP4P_B_0x0 = 0;
        /** @brief tim_brk_cmp4 input polarity is inverted (active high if BKP = 0, active low if BKP = 1) */
    constexpr std::uint32_t TIM8_AF1_BKCMP4P_B_0x1 = 1;

    /** @brief etr_in source selection These bits select the etr_in input source. ... Refer to Section 65.3.2: TIM1 pins and internal signals for product specific implementation. Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF1_ETRSEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_etr0: TIMx_ETR input (value: 0)
     *          - B_0x1: tim_etr1 (value: 1)
     *          - B_0xF: tim_etr15 (value: 15)
     */
        /** @brief tim_etr0: TIMx_ETR input */
    constexpr std::uint32_t TIM8_AF1_ETRSEL_B_0x0 = 0;
        /** @brief tim_etr1 */
    constexpr std::uint32_t TIM8_AF1_ETRSEL_B_0x1 = 1;
        /** @brief tim_etr15 */
    constexpr std::uint32_t TIM8_AF1_ETRSEL_B_0xF = 15;

    /** @brief TIM8 alternate function register 2 */
    using TIM8_AF2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIMx_BKIN2 input enable This bit enables the TIMx_BKIN2 alternate function input for the timer's tim_brk2 input. TIMx_BKIN2 input is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2INE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_BKIN2 input disabled (value: 0)
     *          - B_0x1: TIMx_BKIN2 input enabled (value: 1)
     */
        /** @brief TIMx_BKIN2 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2INE_B_0x0 = 0;
        /** @brief TIMx_BKIN2 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2INE_B_0x1 = 1;

    /** @brief tim_brk2_cmp1 enable This bit enables the tim_brk2_cmp1 for the timer's tim_brk2 input. tim_brk2_cmp1 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP1E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp1 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp1 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp1 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP1E_B_0x0 = 0;
        /** @brief tim_brk2_cmp1 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP1E_B_0x1 = 1;

    /** @brief tim_brk2_cmp2 enable This bit enables the tim_brk2_cmp2 for the timer's tim_brk2 input. tim_brk2_cmp2 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP2E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp2 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp2 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp2 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP2E_B_0x0 = 0;
        /** @brief tim_brk2_cmp2 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP2E_B_0x1 = 1;

    /** @brief tim_brk2_cmp3 enable This bit enables the tim_brk2_cmp3 for the timer's tim_brk2 input. tim_brk2_cmp3 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP3E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp3 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp3 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp3 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP3E_B_0x0 = 0;
        /** @brief tim_brk2_cmp3 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP3E_B_0x1 = 1;

    /** @brief tim_brk2_cmp4 enable This bit enables the tim_brk2_cmp4 for the timer's tim_brk2 input. tim_brk2_cmp4 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP4E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp4 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp4 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp4 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP4E_B_0x0 = 0;
        /** @brief tim_brk2_cmp4 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP4E_B_0x1 = 1;

    /** @brief tim_brk2_cmp5 enable This bit enables the tim_brk2_cmp5 for the timer's tim_brk2 input. tim_brk2_cmp5 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP5E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp5 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp5 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp5 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP5E_B_0x0 = 0;
        /** @brief tim_brk2_cmp5 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP5E_B_0x1 = 1;

    /** @brief tim_brk2_cmp6 enable This bit enables the tim_brk2_cmp6 for the timer's tim_brk2 input. tim_brk2_cmp6 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP6E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp6 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp6 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp6 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP6E_B_0x0 = 0;
        /** @brief tim_brk2_cmp6 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP6E_B_0x1 = 1;

    /** @brief tim_brk2_cmp7 enable This bit enables the tim_brk2_cmp7 for the timer's tim_brk2 input. tim_brk2_cmp7 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP7E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp7 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp7 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp7 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP7E_B_0x0 = 0;
        /** @brief tim_brk2_cmp7 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP7E_B_0x1 = 1;

    /** @brief tim_brk2_cmp8 enable This bit enables the tim_brk2_cmp8 for the timer's tim_brk2 input. tim_brk2_cmp8 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP8E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp8 input disabled (value: 0)
     *          - B_0x1: tim_brk2_cmp8 input enabled (value: 1)
     */
        /** @brief tim_brk2_cmp8 input disabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP8E_B_0x0 = 0;
        /** @brief tim_brk2_cmp8 input enabled */
    constexpr std::uint32_t TIM8_AF2_BK2CMP8E_B_0x1 = 1;

    /** @brief TIMx_BKIN2 input polarity This bit selects the TIMx_BKIN2 alternate function input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2INP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_BKIN2 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) (value: 0)
     *          - B_0x1: TIMx_BKIN2 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) (value: 1)
     */
        /** @brief TIMx_BKIN2 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2INP_B_0x0 = 0;
        /** @brief TIMx_BKIN2 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2INP_B_0x1 = 1;

    /** @brief tim_brk2_cmp1 input polarity This bit selects the tim_brk2_cmp1 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP1P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp1 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) (value: 0)
     *          - B_0x1: tim_brk2_cmp1 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) (value: 1)
     */
        /** @brief tim_brk2_cmp1 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP1P_B_0x0 = 0;
        /** @brief tim_brk2_cmp1 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP1P_B_0x1 = 1;

    /** @brief tim_brk2_cmp2 input polarity This bit selects the tim_brk2_cmp2 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP2P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp2 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) (value: 0)
     *          - B_0x1: tim_brk2_cmp2 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) (value: 1)
     */
        /** @brief tim_brk2_cmp2 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP2P_B_0x0 = 0;
        /** @brief tim_brk2_cmp2 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP2P_B_0x1 = 1;

    /** @brief tim_brk2_cmp3 input polarity This bit selects the tim_brk2_cmp3 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP3P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp3 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) (value: 0)
     *          - B_0x1: tim_brk2_cmp3 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) (value: 1)
     */
        /** @brief tim_brk2_cmp3 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP3P_B_0x0 = 0;
        /** @brief tim_brk2_cmp3 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP3P_B_0x1 = 1;

    /** @brief tim_brk2_cmp4 input polarity This bit selects the tim_brk2_cmp4 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_BK2CMP4P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk2_cmp4 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) (value: 0)
     *          - B_0x1: tim_brk2_cmp4 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) (value: 1)
     */
        /** @brief tim_brk2_cmp4 input polarity is not inverted (active low if BK2P = 0, active high if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP4P_B_0x0 = 0;
        /** @brief tim_brk2_cmp4 input polarity is inverted (active high if BK2P = 0, active low if BK2P = 1) */
    constexpr std::uint32_t TIM8_AF2_BK2CMP4P_B_0x1 = 1;

    /** @brief ocref_clr source selection These bits select the ocref_clr input source. ... Refer to Section 65.3.2: TIM1 pins and internal signals for product specific information. Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM8_AF2_OCRSEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ocref_clr0 (value: 0)
     *          - B_0x1: tim_ocref_clr1 (value: 1)
     *          - B_0x7: tim_ocref_clr7 (value: 7)
     */
        /** @brief tim_ocref_clr0 */
    constexpr std::uint32_t TIM8_AF2_OCRSEL_B_0x0 = 0;
        /** @brief tim_ocref_clr1 */
    constexpr std::uint32_t TIM8_AF2_OCRSEL_B_0x1 = 1;
        /** @brief tim_ocref_clr7 */
    constexpr std::uint32_t TIM8_AF2_OCRSEL_B_0x7 = 7;

    /** @brief TIM8 DMA control register */
    using TIM8_DCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA base address This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... */
    using TIM8_DCR_DBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CR1 (value: 0)
     *          - B_0x1: TIMx_CR2 (value: 1)
     *          - B_0x2: TIMx_SMCR (value: 2)
     */
        /** @brief TIMx_CR1 */
    constexpr std::uint32_t TIM8_DCR_DBA_B_0x0 = 0;
        /** @brief TIMx_CR2 */
    constexpr std::uint32_t TIM8_DCR_DBA_B_0x1 = 1;
        /** @brief TIMx_SMCR */
    constexpr std::uint32_t TIM8_DCR_DBA_B_0x2 = 2;

    /** @brief DMA burst length This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... Example: Let us consider the following transfer: DBL = 7 bytes & DBA = TIM2_CR1. If DBL = 7 bytes and DBA = TIM2_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation: (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data are copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA According to the configuration of the DMA Data Size, several cases may occur: If the DMA Data Size is configured in half-words, 16-bit data are transferred to each of the 7 registers. If the DMA Data Size is configured in bytes, the data are also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA. */
    using TIM8_DCR_DBL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: 1 transfer (value: 0)
     *          - B_0x1: 2 transfers (value: 1)
     *          - B_0x2: 3 transfers (value: 2)
     *          - B_0x1A: 26 transfers (value: 26)
     */
        /** @brief 1 transfer */
    constexpr std::uint32_t TIM8_DCR_DBL_B_0x0 = 0;
        /** @brief 2 transfers */
    constexpr std::uint32_t TIM8_DCR_DBL_B_0x1 = 1;
        /** @brief 3 transfers */
    constexpr std::uint32_t TIM8_DCR_DBL_B_0x2 = 2;
        /** @brief 26 transfers */
    constexpr std::uint32_t TIM8_DCR_DBL_B_0x1A = 26;

    /** @brief DMA burst source selection This bitfield defines the interrupt source that triggers the DMA burst transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). Others: reserved */
    using TIM8_DCR_DBSS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x1: Update (value: 1)
     *          - B_0x2: CC1 (value: 2)
     *          - B_0x3: CC2 (value: 3)
     *          - B_0x4: CC3 (value: 4)
     *          - B_0x5: CC4 (value: 5)
     *          - B_0x6: COM (value: 6)
     *          - B_0x7: Trigger (value: 7)
     */
        /** @brief Update */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x1 = 1;
        /** @brief CC1 */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x2 = 2;
        /** @brief CC2 */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x3 = 3;
        /** @brief CC3 */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x4 = 4;
        /** @brief CC4 */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x5 = 5;
        /** @brief COM */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x6 = 6;
        /** @brief Trigger */
    constexpr std::uint32_t TIM8_DCR_DBSS_B_0x7 = 7;

    /** @brief TIM8 DMA address for full transfer */
    using TIM8_DMAR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR). */
    using TIM8_DMAR_DMAB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
}

#endif
