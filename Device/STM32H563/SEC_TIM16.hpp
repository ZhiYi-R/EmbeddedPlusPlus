/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32H563_SEC_TIM16_HPP
#define EMBEDDED_PP_STM32H563_SEC_TIM16_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief TIM16 address block description */
namespace STM32H563::SEC_TIM16 {

    /** @brief TIM16 control register 1 */
    using TIM16_CR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. */
    using TIM16_CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint16_t TIM16_CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint16_t TIM16_CR1_CEN_B_0x1 = 1;

    /** @brief Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values. */
    using TIM16_CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. The Update (UEV) event is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. (value: 1)
     */
        /** @brief UEV enabled. The Update (UEV) event is generated by one of the following events: */
    constexpr std::uint16_t TIM16_CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. */
    constexpr std::uint16_t TIM16_CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller */
    using TIM16_CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generate an update interrupt or DMA request if enabled. These events can be: (value: 0)
     *          - B_0x1: nly counter overflow/underflow generates an update interrupt or DMA request if enabled. (value: 1)
     */
        /** @brief Any of the following events generate an update interrupt or DMA request if enabled. These events can be: */
    constexpr std::uint16_t TIM16_CR1_URS_B_0x0 = 0;
        /** @brief nly counter overflow/underflow generates an update interrupt or DMA request if enabled. */
    constexpr std::uint16_t TIM16_CR1_URS_B_0x1 = 1;

    /** @brief One pulse mode */
    using TIM16_CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped at update event (value: 0)
     *          - B_0x1: Counter stops counting at the next update event (clearing the bit CEN) (value: 1)
     */
        /** @brief Counter is not stopped at update event */
    constexpr std::uint16_t TIM16_CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting at the next update event (clearing the bit CEN) */
    constexpr std::uint16_t TIM16_CR1_OPM_B_0x1 = 1;

    /** @brief Auto-reload preload enable */
    using TIM16_CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered */
    constexpr std::uint16_t TIM16_CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered */
    constexpr std::uint16_t TIM16_CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (tim_tix), */
    using TIM16_CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tDTS=ttim_ker_ck (value: 0)
     *          - B_0x1: tDTS=2*ttim_ker_ck (value: 1)
     *          - B_0x2: tDTS=4*ttim_ker_ck (value: 2)
     */
        /** @brief tDTS=ttim_ker_ck */
    constexpr std::uint16_t TIM16_CR1_CKD_B_0x0 = 0;
        /** @brief tDTS=2*ttim_ker_ck */
    constexpr std::uint16_t TIM16_CR1_CKD_B_0x1 = 1;
        /** @brief tDTS=4*ttim_ker_ck */
    constexpr std::uint16_t TIM16_CR1_CKD_B_0x2 = 2;

    /** @brief UIF status bit remapping */
    using TIM16_CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM16_CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM16_CR1_UIFREMAP_B_0x1 = 1;

    /** @brief Dithering enable Note: The DITHEN bit can only be modified when CEN bit is reset. */
    using TIM16_CR1_DITHEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Dithering disabled (value: 0)
     *          - B_0x1: Dithering enabled (value: 1)
     */
        /** @brief Dithering disabled */
    constexpr std::uint16_t TIM16_CR1_DITHEN_B_0x0 = 0;
        /** @brief Dithering enabled */
    constexpr std::uint16_t TIM16_CR1_DITHEN_B_0x1 = 1;

    /** @brief TIM16 control register 2 */
    using TIM16_CR2 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output. */
    using TIM16_CR2_CCPC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCxE, CCxNE and OCxM bits are not preloaded (value: 0)
     *          - B_0x1: CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when COM bit is set. (value: 1)
     */
        /** @brief CCxE, CCxNE and OCxM bits are not preloaded */
    constexpr std::uint16_t TIM16_CR2_CCPC_B_0x0 = 0;
        /** @brief CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when COM bit is set. */
    constexpr std::uint16_t TIM16_CR2_CCPC_B_0x1 = 1;

    /** @brief Capture/compare control update selection Note: This bit acts only on channels that have a complementary output. */
    using TIM16_CR2_CCUS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only. (value: 0)
     *          - B_0x1: When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when a rising edge occurs on tim_trgi (if available). (value: 1)
     */
        /** @brief When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only. */
    constexpr std::uint16_t TIM16_CR2_CCUS_B_0x0 = 0;
        /** @brief When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when a rising edge occurs on tim_trgi (if available). */
    constexpr std::uint16_t TIM16_CR2_CCUS_B_0x1 = 1;

    /** @brief Capture/compare DMA selection */
    using TIM16_CR2_CCDS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCx DMA request sent when CCx event occurs (value: 0)
     *          - B_0x1: CCx DMA requests sent when update event occurs (value: 1)
     */
        /** @brief CCx DMA request sent when CCx event occurs */
    constexpr std::uint16_t TIM16_CR2_CCDS_B_0x0 = 0;
        /** @brief CCx DMA requests sent when update event occurs */
    constexpr std::uint16_t TIM16_CR2_CCDS_B_0x1 = 1;

    /** @brief Output Idle state 1 (tim_oc1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BKR register). */
    using TIM16_CR2_OIS1 = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1=0 after a dead-time when MOE=0 (value: 0)
     *          - B_0x1: tim_oc1=1 after a dead-time when MOE=0 (value: 1)
     */
        /** @brief tim_oc1=0 after a dead-time when MOE=0 */
    constexpr std::uint16_t TIM16_CR2_OIS1_B_0x0 = 0;
        /** @brief tim_oc1=1 after a dead-time when MOE=0 */
    constexpr std::uint16_t TIM16_CR2_OIS1_B_0x1 = 1;

    /** @brief Output Idle state 1 (tim_oc1n output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BKR register). */
    using TIM16_CR2_OIS1N = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1n=0 after a dead-time when MOE=0 (value: 0)
     *          - B_0x1: tim_oc1n=1 after a dead-time when MOE=0 (value: 1)
     */
        /** @brief tim_oc1n=0 after a dead-time when MOE=0 */
    constexpr std::uint16_t TIM16_CR2_OIS1N_B_0x0 = 0;
        /** @brief tim_oc1n=1 after a dead-time when MOE=0 */
    constexpr std::uint16_t TIM16_CR2_OIS1N_B_0x1 = 1;

    /** @brief TIM16 DMA/interrupt enable register */
    using TIM16_DIER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using TIM16_DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled (value: 0)
     *          - B_0x1: Update interrupt enabled (value: 1)
     */
        /** @brief Update interrupt disabled */
    constexpr std::uint16_t TIM16_DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled */
    constexpr std::uint16_t TIM16_DIER_UIE_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt enable */
    using TIM16_DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled (value: 0)
     *          - B_0x1: CC1 interrupt enabled (value: 1)
     */
        /** @brief CC1 interrupt disabled */
    constexpr std::uint16_t TIM16_DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled */
    constexpr std::uint16_t TIM16_DIER_CC1IE_B_0x1 = 1;

    /** @brief COM interrupt enable */
    using TIM16_DIER_COMIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COM interrupt disabled (value: 0)
     *          - B_0x1: COM interrupt enabled (value: 1)
     */
        /** @brief COM interrupt disabled */
    constexpr std::uint16_t TIM16_DIER_COMIE_B_0x0 = 0;
        /** @brief COM interrupt enabled */
    constexpr std::uint16_t TIM16_DIER_COMIE_B_0x1 = 1;

    /** @brief Break interrupt enable */
    using TIM16_DIER_BIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break interrupt disabled (value: 0)
     *          - B_0x1: Break interrupt enabled (value: 1)
     */
        /** @brief Break interrupt disabled */
    constexpr std::uint16_t TIM16_DIER_BIE_B_0x0 = 0;
        /** @brief Break interrupt enabled */
    constexpr std::uint16_t TIM16_DIER_BIE_B_0x1 = 1;

    /** @brief Update DMA request enable */
    using TIM16_DIER_UDE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update DMA request disabled (value: 0)
     *          - B_0x1: Update DMA request enabled (value: 1)
     */
        /** @brief Update DMA request disabled */
    constexpr std::uint16_t TIM16_DIER_UDE_B_0x0 = 0;
        /** @brief Update DMA request enabled */
    constexpr std::uint16_t TIM16_DIER_UDE_B_0x1 = 1;

    /** @brief Capture/Compare 1 DMA request enable */
    using TIM16_DIER_CC1DE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 DMA request disabled (value: 0)
     *          - B_0x1: CC1 DMA request enabled (value: 1)
     */
        /** @brief CC1 DMA request disabled */
    constexpr std::uint16_t TIM16_DIER_CC1DE_B_0x0 = 0;
        /** @brief CC1 DMA request enabled */
    constexpr std::uint16_t TIM16_DIER_CC1DE_B_0x1 = 1;

    /** @brief COM DMA request enable */
    using TIM16_DIER_COMDE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COM DMA request disabled (value: 0)
     *          - B_0x1: COM DMA request enabled (value: 1)
     */
        /** @brief COM DMA request disabled */
    constexpr std::uint16_t TIM16_DIER_COMDE_B_0x0 = 0;
        /** @brief COM DMA request enabled */
    constexpr std::uint16_t TIM16_DIER_COMDE_B_0x1 = 1;

    /** @brief TIM16 status register */
    using TIM16_SR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. */
    using TIM16_SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred. (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred. */
    constexpr std::uint16_t TIM16_SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint16_t TIM16_SR_UIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER). */
    using TIM16_SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint16_t TIM16_SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred */
    constexpr std::uint16_t TIM16_SR_CC1IF_B_0x1 = 1;

    /** @brief COM interrupt flag This flag is set by hardware on a COM event (once the capture/compare control bits CCxE, CCxNE, OCxM have been updated). It is cleared by software. */
    using TIM16_SR_COMIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No COM event occurred (value: 0)
     *          - B_0x1: COM interrupt pending (value: 1)
     */
        /** @brief No COM event occurred */
    constexpr std::uint16_t TIM16_SR_COMIF_B_0x0 = 0;
        /** @brief COM interrupt pending */
    constexpr std::uint16_t TIM16_SR_COMIF_B_0x1 = 1;

    /** @brief Break interrupt flag This flag is set by hardware as soon as the tim_brk input goes active. It can be cleared by software if the break input is not active. */
    using TIM16_SR_BIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No break event occurred (value: 0)
     *          - B_0x1: An active level has been detected on the break input (value: 1)
     */
        /** @brief No break event occurred */
    constexpr std::uint16_t TIM16_SR_BIF_B_0x0 = 0;
        /** @brief An active level has been detected on the break input */
    constexpr std::uint16_t TIM16_SR_BIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'. */
    using TIM16_SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected */
    constexpr std::uint16_t TIM16_SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint16_t TIM16_SR_CC1OF_B_0x1 = 1;

    /** @brief TIM16 event generation register */
    using TIM16_EGR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation This bit can be set by software, it is automatically cleared by hardware. */
    using TIM16_EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action. (value: 0)
     *          - B_0x1: Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). (value: 1)
     */
        /** @brief No action. */
    constexpr std::uint16_t TIM16_EGR_UG_B_0x0 = 0;
        /** @brief Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). */
    constexpr std::uint16_t TIM16_EGR_UG_B_0x1 = 1;

    /** @brief Capture/Compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high. */
    using TIM16_EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action. (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action. */
    constexpr std::uint16_t TIM16_EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint16_t TIM16_EGR_CC1G_B_0x1 = 1;

    /** @brief Capture/Compare control update generation This bit can be set by software, it is automatically cleared by hardware. Note: This bit acts only on channels that have a complementary output. */
    using TIM16_EGR_COMG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM16_EGR_COMG_B_0x0 = 0;
        /** @brief When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits */
    constexpr std::uint16_t TIM16_EGR_COMG_B_0x1 = 1;

    /** @brief Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM16_EGR_BG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action. (value: 0)
     *          - B_0x1: A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled. (value: 1)
     */
        /** @brief No action. */
    constexpr std::uint16_t TIM16_EGR_BG_B_0x0 = 0;
        /** @brief A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled. */
    constexpr std::uint16_t TIM16_EGR_BG_B_0x1 = 1;

    /** @brief TIM16 capture/compare mode register 1 [alternate] */
    using TIM16_CCMR1_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Others: Reserved Note: CC1S bits are writable only when the channel is OFF (CC1E = '0' in TIMx_CCER). */
    using TIM16_CCMR1_Input_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM16_CCMR1_Input_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM16_CCMR1_Input_CC1S_B_0x1 = 1;

    /** @brief Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (tim_ic1). The prescaler is reset as soon as CC1E='0' (TIMx_CCER register). */
    using TIM16_CCMR1_Input_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input. (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input. */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter This bit-field defines the frequency used to sample tim_ti1 input and the length of the digital filter applied to tim_ti1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM16_CCMR1_Input_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at fDTS (value: 0)
     *          - B_0x1: fSAMPLING=ftim_ker_ck, N=2 (value: 1)
     *          - B_0x2: fSAMPLING=ftim_ker_ck, N=4 (value: 2)
     *          - B_0x3: fSAMPLING=ftim_ker_ck, N=8 (value: 3)
     *          - B_0x4: fSAMPLING=fDTS/2, N= (value: 4)
     *          - B_0x5: fSAMPLING=fDTS/2, N=8 (value: 5)
     *          - B_0x6: fSAMPLING=fDTS/4, N=6 (value: 6)
     *          - B_0x7: fSAMPLING=fDTS/4, N=8 (value: 7)
     *          - B_0x8: fSAMPLING=fDTS/8, N=6 (value: 8)
     *          - B_0x9: fSAMPLING=fDTS/8, N=8 (value: 9)
     *          - B_0xA: fSAMPLING=fDTS/16, N=5 (value: 10)
     *          - B_0xB: fSAMPLING=fDTS/16, N=6 (value: 11)
     *          - B_0xC: fSAMPLING=fDTS/16, N=8 (value: 12)
     *          - B_0xD: fSAMPLING=fDTS/32, N=5 (value: 13)
     *          - B_0xE: fSAMPLING=fDTS/32, N=6 (value: 14)
     *          - B_0xF: fSAMPLING=fDTS/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at fDTS */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x0 = 0;
        /** @brief fSAMPLING=ftim_ker_ck, N=2 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x1 = 1;
        /** @brief fSAMPLING=ftim_ker_ck, N=4 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x2 = 2;
        /** @brief fSAMPLING=ftim_ker_ck, N=8 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x3 = 3;
        /** @brief fSAMPLING=fDTS/2, N= */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x4 = 4;
        /** @brief fSAMPLING=fDTS/2, N=8 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x5 = 5;
        /** @brief fSAMPLING=fDTS/4, N=6 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x6 = 6;
        /** @brief fSAMPLING=fDTS/4, N=8 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x7 = 7;
        /** @brief fSAMPLING=fDTS/8, N=6 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x8 = 8;
        /** @brief fSAMPLING=fDTS/8, N=8 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0x9 = 9;
        /** @brief fSAMPLING=fDTS/16, N=5 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0xA = 10;
        /** @brief fSAMPLING=fDTS/16, N=6 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0xB = 11;
        /** @brief fSAMPLING=fDTS/16, N=8 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0xC = 12;
        /** @brief fSAMPLING=fDTS/32, N=5 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0xD = 13;
        /** @brief fSAMPLING=fDTS/32, N=6 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0xE = 14;
        /** @brief fSAMPLING=fDTS/32, N=8 */
    constexpr std::uint32_t TIM16_CCMR1_Input_IC1F_B_0xF = 15;

    /** @brief TIM16 capture/compare mode register 1 [alternate] */
    using TIM16_CCMR1_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Others: Reserved Note: CC1S bits are writable only when the channel is OFF (CC1E = '0' in TIMx_CCER). */
    using TIM16_CCMR1_Output_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM16_CCMR1_Output_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM16_CCMR1_Output_CC1S_B_0x1 = 1;

    /** @brief Output Compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger. */
    using TIM16_CCMR1_Output_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on CC1 output. Then, tim_ocx is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on CC1 output. Then, tim_ocx is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1FE_B_0x1 = 1;

    /** @brief Output Compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed. */
    using TIM16_CCMR1_Output_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1PE_B_0x1 = 1;

    /** @brief Output Compare 1 mode These bits define the behavior of the output reference signal tim_oc1ref from which tim_oc1 and tim_oc1n are derived. tim_oc1ref is active high whereas tim_oc1 and tim_oc1n active level depends on CC1P and CC1NP bits. Others: Reserved Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). In PWM mode 1 or 2, the tim_oc1ref level changes only when the result of the comparison changes or when the output compare mode switches from 'frozen' mode to 'PWM' mode. */
    using TIM16_CCMR1_Output_OC1M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: FrozenThe comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggletim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. (value: 3)
     *          - B_0x4: Force inactive leveltim_oc1ref is forced low. (value: 4)
     *          - B_0x5: Force active leveltim_oc1ref is forced high. (value: 5)
     *          - B_0x6: PWM mode 1Channel 1 is active as long as TIMx_CNTTIMx_CCR1 else inactive. (value: 6)
     *          - B_0x7: PWM mode 2Channel 1 is inactive as long as TIMx_CNTTIMx_CCR1 else active. (value: 7)
     */
        /** @brief FrozenThe comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x2 = 2;
        /** @brief Toggletim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x3 = 3;
        /** @brief Force inactive leveltim_oc1ref is forced low. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x4 = 4;
        /** @brief Force active leveltim_oc1ref is forced high. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x5 = 5;
        /** @brief PWM mode 1Channel 1 is active as long as TIMx_CNTTIMx_CCR1 else inactive. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x6 = 6;
        /** @brief PWM mode 2Channel 1 is inactive as long as TIMx_CNTTIMx_CCR1 else active. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M1_B_0x7 = 7;

    /** @brief Output Compare 1 clear enable */
    using TIM16_CCMR1_Output_OC1CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1ref is not affected by the tim_ocref_clr input. (value: 0)
     *          - B_0x1: tim_oc1ref is cleared as soon as a High level is detected on tim_ocref_clr input. (value: 1)
     */
        /** @brief tim_oc1ref is not affected by the tim_ocref_clr input. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1CE_B_0x0 = 0;
        /** @brief tim_oc1ref is cleared as soon as a High level is detected on tim_ocref_clr input. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1CE_B_0x1 = 1;

    /** @brief Output Compare 1 mode These bits define the behavior of the output reference signal tim_oc1ref from which tim_oc1 and tim_oc1n are derived. tim_oc1ref is active high whereas tim_oc1 and tim_oc1n active level depends on CC1P and CC1NP bits. Others: Reserved Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). In PWM mode 1 or 2, the tim_oc1ref level changes only when the result of the comparison changes or when the output compare mode switches from 'frozen' mode to 'PWM' mode. */
    using TIM16_CCMR1_Output_OC1M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: FrozenThe comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     */
        /** @brief FrozenThe comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M2_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM16_CCMR1_Output_OC1M2_B_0x1 = 1;

    /** @brief TIM16 capture/compare enable register */
    using TIM16_CCER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to for details. */
    using TIM16_CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / OC1 is not active (see below) (value: 0)
     *          - B_0x1: Capture mode enabled / OC1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / OC1 is not active (see below) */
    constexpr std::uint16_t TIM16_CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / OC1 signal is output on the corresponding output pin */
    constexpr std::uint16_t TIM16_CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/Compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0:	this configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated. */
    using TIM16_CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM16_CCER_CC1P_B_0x0 = 0;
        /** @brief OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM16_CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/Compare 1 complementary output enable */
    using TIM16_CCER_CC1NE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Offtim_oc1n is not active. tim_oc1n level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. (value: 0)
     *          - B_0x1: Ontim_oc1n signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. (value: 1)
     */
        /** @brief Offtim_oc1n is not active. tim_oc1n level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. */
    constexpr std::uint16_t TIM16_CCER_CC1NE_B_0x0 = 0;
        /** @brief Ontim_oc1n signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. */
    constexpr std::uint16_t TIM16_CCER_CC1NE_B_0x1 = 1;

    /** @brief Capture/Compare 1 complementary output polarity CC1 channel configured as output: CC1 channel configured as input: This bit is used in conjunction with CC1P to define the polarity of tim_ti1fp1. Refer to the description of CC1P. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S='00' (the channel is configured in output). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a commutation event is generated. */
    using TIM16_CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1n active high (value: 0)
     *          - B_0x1: tim_oc1n active low (value: 1)
     */
        /** @brief tim_oc1n active high */
    constexpr std::uint16_t TIM16_CCER_CC1NP_B_0x0 = 0;
        /** @brief tim_oc1n active low */
    constexpr std::uint16_t TIM16_CCER_CC1NP_B_0x1 = 1;

    /** @brief TIM16 counter */
    using TIM16_CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register only holds the non-dithered part in CNT[15:0]. The fractional part is not available. */
    using TIM16_CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved. */
    using TIM16_CNT_UIFCPY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM16 prescaler */
    using TIM16_PSC = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value The counter clock frequency (tim_cnt_ck) is equal to ftim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in 'reset mode'). */
    using TIM16_PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM16 auto-reload register */
    using TIM16_ARR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value in ARR[15:0]. The ARR[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part. */
    using TIM16_ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM16 repetition counter register */
    using TIM16_RCR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Repetition counter reload value This bitfield defines the update rate of the compare registers (i.e. periodic transfers from preload to active registers) when preload registers are enable. It also defines the update interrupt generation rate, if this interrupt is enable. When the repetition down-counter reaches zero, an update event is generated and it restarts counting from REP value. As the repetition counter is reloaded with REP value only at the repetition update event UEV, any write to the TIMx_RCR register is not taken in account until the next repetition update event. It means in PWM mode (REP+1) corresponds to the number of PWM periods in edge-aligned mode: the number of PWM periods in edge-aligned mode the number of half PWM period in center-aligned mode */
    using TIM16_RCR_REP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM16 capture/compare register 1 */
    using TIM16_CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc1 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR1[15:0]. The CCR1[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR1[19:4]. The CCR1[3:0] bitfield contains the dithered part. If channel CC1 is configured as input: CCR1 is the counter value transferred by the last input capture 1 event (tim_ic1). Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR1[15:0]. The CCR1[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR1[19:4]. The CCR1[3:0] bits are reset. */
    using TIM16_CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM16 break and dead-time register */
    using TIM16_BDTR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx = DT=DTG[7:0]x tdtg with tdtg=tDTS DTG[7:5]=10x = DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS DTG[7:5]=110 = DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS DTG[7:5]=111 = DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS Example if TDTS=125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 s to 31750 ns by 250 ns steps, 32 s to 63 s by 1 s steps, 64 s to 126 s by 2 s steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_BDTR_DTG = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset. */
    using TIM16_BDTR_LOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: LOCK OFFNo bit is write protected (value: 0)
     *          - B_0x1: LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKBID/BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written. (value: 1)
     *          - B_0x2: LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written. (value: 2)
     *          - B_0x3: LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written. (value: 3)
     */
        /** @brief LOCK OFFNo bit is write protected */
    constexpr std::uint32_t TIM16_BDTR_LOCK_B_0x0 = 0;
        /** @brief LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKBID/BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written. */
    constexpr std::uint32_t TIM16_BDTR_LOCK_B_0x1 = 1;
        /** @brief LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written. */
    constexpr std::uint32_t TIM16_BDTR_LOCK_B_0x2 = 2;
        /** @brief LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written. */
    constexpr std::uint32_t TIM16_BDTR_LOCK_B_0x3 = 3;

    /** @brief Off-state selection for Idle mode This bit is used when MOE=0 on channels configured as outputs. See tim_oc1/tim_oc1n enable description for more details (capture/compare enable register (TIMx_CCER)(x = 16 to 17) on page 2011). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_BDTR_OSSI = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When inactive, tim_oc1/tim_oc1n outputs are disabled (tim_oc1/tim_oc1n enable output signal=0) (value: 0)
     *          - B_0x1: When inactive, tim_oc1/tim_oc1n outputs are forced first with their idle level as soon as CC1E=1 or CC1NE=1. tim_oc1/tim_oc1n enable output signal=1) (value: 1)
     */
        /** @brief When inactive, tim_oc1/tim_oc1n outputs are disabled (tim_oc1/tim_oc1n enable output signal=0) */
    constexpr std::uint32_t TIM16_BDTR_OSSI_B_0x0 = 0;
        /** @brief When inactive, tim_oc1/tim_oc1n outputs are forced first with their idle level as soon as CC1E=1 or CC1NE=1. tim_oc1/tim_oc1n enable output signal=1) */
    constexpr std::uint32_t TIM16_BDTR_OSSI_B_0x1 = 1;

    /** @brief Off-state selection for Run mode This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See tim_oc1/tim_oc1n enable description for more details (capture/compare enable register (TIMx_CCER)(x = 16 to 17) on page 2011). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_BDTR_OSSR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When inactive, tim_oc1/tim_oc1n outputs are disabled (the timer releases the output control which is taken over by the GPIO, which forces a Hi-Z state) (value: 0)
     *          - B_0x1: When inactive, tim_oc1/tim_oc1n outputs are enabled with their inactive level as soon as CC1E=1 or CC1NE=1 (the output is still controlled by the timer). (value: 1)
     */
        /** @brief When inactive, tim_oc1/tim_oc1n outputs are disabled (the timer releases the output control which is taken over by the GPIO, which forces a Hi-Z state) */
    constexpr std::uint32_t TIM16_BDTR_OSSR_B_0x0 = 0;
        /** @brief When inactive, tim_oc1/tim_oc1n outputs are enabled with their inactive level as soon as CC1E=1 or CC1NE=1 (the output is still controlled by the timer). */
    constexpr std::uint32_t TIM16_BDTR_OSSR_B_0x1 = 1;

    /** @brief Break enable 1; Break inputs (tim_brk and tim_sys_brk event) enabled Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM16_BDTR_BKE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break inputs (tim_brk and tim_sys_brk event) disabled (value: 0)
     */
        /** @brief Break inputs (tim_brk and tim_sys_brk event) disabled */
    constexpr std::uint32_t TIM16_BDTR_BKE_B_0x0 = 0;

    /** @brief Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM16_BDTR_BKP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk is active low (value: 0)
     *          - B_0x1: Break input tim_brk is active high (value: 1)
     */
        /** @brief Break input tim_brk is active low */
    constexpr std::uint32_t TIM16_BDTR_BKP_B_0x0 = 0;
        /** @brief Break input tim_brk is active high */
    constexpr std::uint32_t TIM16_BDTR_BKP_B_0x1 = 1;

    /** @brief Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_BDTR_AOE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: MOE can be set only by software (value: 0)
     *          - B_0x1: MOE can be set by software or automatically at the next update event (if the tim_brk input is not active) (value: 1)
     */
        /** @brief MOE can be set only by software */
    constexpr std::uint32_t TIM16_BDTR_AOE_B_0x0 = 0;
        /** @brief MOE can be set by software or automatically at the next update event (if the tim_brk input is not active) */
    constexpr std::uint32_t TIM16_BDTR_AOE_B_0x1 = 1;

    /** @brief Main output enable This bit is cleared asynchronously by hardware as soon as the tim_brk input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. See tim_oc1/tim_oc1n enable description for more details (capture/compare enable register (TIMx_CCER)(x = 16 to 17) on page 2011). */
    using TIM16_BDTR_MOE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1 and tim_oc1n outputs are disabled or forced to idle state depending on the OSSI bit. (value: 0)
     *          - B_0x1: tim_oc1 and tim_oc1n outputs are enabled if their respective enable bits are set (CC1E, CC1NE in TIMx_CCER register) (value: 1)
     */
        /** @brief tim_oc1 and tim_oc1n outputs are disabled or forced to idle state depending on the OSSI bit. */
    constexpr std::uint32_t TIM16_BDTR_MOE_B_0x0 = 0;
        /** @brief tim_oc1 and tim_oc1n outputs are enabled if their respective enable bits are set (CC1E, CC1NE in TIMx_CCER register) */
    constexpr std::uint32_t TIM16_BDTR_MOE_B_0x1 = 1;

    /** @brief Break filter This bit-field defines the frequency used to sample tim_brk input and the length of the digital filter applied to tim_brk. The digital filter is made of an event counter in which N events are needed to validate a transition on the output: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_BDTR_BKF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, tim_brk acts asynchronously (value: 0)
     *          - B_0x1: fSAMPLING=ftim_ker_ck, N=2 (value: 1)
     *          - B_0x2: fSAMPLING=ftim_ker_ck, N=4 (value: 2)
     *          - B_0x3: fSAMPLING=ftim_ker_ck, N=8 (value: 3)
     *          - B_0x4: fSAMPLING=fDTS/2, N=6 (value: 4)
     *          - B_0x5: fSAMPLING=fDTS/2, N=8 (value: 5)
     *          - B_0x6: fSAMPLING=fDTS/4, N=6 (value: 6)
     *          - B_0x7: fSAMPLING=fDTS/4, N=8 (value: 7)
     *          - B_0x8: fSAMPLING=fDTS/8, N=6 (value: 8)
     *          - B_0x9: fSAMPLING=fDTS/8, N=8 (value: 9)
     *          - B_0xA: fSAMPLING=fDTS/16, N=5 (value: 10)
     *          - B_0xB: fSAMPLING=fDTS/16, N=6 (value: 11)
     *          - B_0xC: fSAMPLING=fDTS/16, N=8 (value: 12)
     *          - B_0xD: fSAMPLING=fDTS/32, N=5 (value: 13)
     *          - B_0xE: fSAMPLING=fDTS/32, N=6 (value: 14)
     *          - B_0xF: fSAMPLING=fDTS/32, N=8 (value: 15)
     */
        /** @brief No filter, tim_brk acts asynchronously */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x0 = 0;
        /** @brief fSAMPLING=ftim_ker_ck, N=2 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x1 = 1;
        /** @brief fSAMPLING=ftim_ker_ck, N=4 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x2 = 2;
        /** @brief fSAMPLING=ftim_ker_ck, N=8 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x3 = 3;
        /** @brief fSAMPLING=fDTS/2, N=6 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x4 = 4;
        /** @brief fSAMPLING=fDTS/2, N=8 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x5 = 5;
        /** @brief fSAMPLING=fDTS/4, N=6 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x6 = 6;
        /** @brief fSAMPLING=fDTS/4, N=8 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x7 = 7;
        /** @brief fSAMPLING=fDTS/8, N=6 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x8 = 8;
        /** @brief fSAMPLING=fDTS/8, N=8 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0x9 = 9;
        /** @brief fSAMPLING=fDTS/16, N=5 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0xA = 10;
        /** @brief fSAMPLING=fDTS/16, N=6 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0xB = 11;
        /** @brief fSAMPLING=fDTS/16, N=8 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0xC = 12;
        /** @brief fSAMPLING=fDTS/32, N=5 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0xD = 13;
        /** @brief fSAMPLING=fDTS/32, N=6 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0xE = 14;
        /** @brief fSAMPLING=fDTS/32, N=8 */
    constexpr std::uint32_t TIM16_BDTR_BKF_B_0xF = 15;

    /** @brief Break Disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM16_BDTR_BKDSRM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk is armed (value: 0)
     *          - B_0x1: Break input tim_brk is disarmed (value: 1)
     */
        /** @brief Break input tim_brk is armed */
    constexpr std::uint32_t TIM16_BDTR_BKDSRM_B_0x0 = 0;
        /** @brief Break input tim_brk is disarmed */
    constexpr std::uint32_t TIM16_BDTR_BKDSRM_B_0x1 = 1;

    /** @brief Break Bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM16_BDTR_BKBID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input tim_brk in input mode (value: 0)
     *          - B_0x1: Break input tim_brk in bidirectional mode (value: 1)
     */
        /** @brief Break input tim_brk in input mode */
    constexpr std::uint32_t TIM16_BDTR_BKBID_B_0x0 = 0;
        /** @brief Break input tim_brk in bidirectional mode */
    constexpr std::uint32_t TIM16_BDTR_BKBID_B_0x1 = 1;

    /** @brief TIM16 timer deadtime register 2 */
    using TIM16_DTR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Dead-time falling edge generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs, on the falling edge. DTGF[7:5]=0xx = DTF=DTGF[7:0]x tdtg with tdtg=tDTS. DTGF[7:5]=10x = DTF=(64+DTGF[5:0])xtdtg with Tdtg=2xtDTS. DTGF[7:5]=110 = DTF=(32+DTGF[4:0])xtdtg with Tdtg=8xtDTS. DTGF[7:5]=111 = DTF=(32+DTGF[4:0])xtdtg with Tdtg=16xtDTS. Example if TDTS=125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 us to 31750 ns by 250 ns steps, 32 us to 63us by 1 us steps, 64 us to 126 us by 2 us steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_DTR2_DTGF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Deadtime asymmetric enable Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_DTR2_DTAE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Deadtime on rising and falling edges are identical, and defined with DTG[7:0] register (value: 0)
     *          - B_0x1: Deadtime on rising edge is defined with DTG[7:0] register and deadtime on falling edge is defined with DTGF[7:0] bits. (value: 1)
     */
        /** @brief Deadtime on rising and falling edges are identical, and defined with DTG[7:0] register */
    constexpr std::uint32_t TIM16_DTR2_DTAE_B_0x0 = 0;
        /** @brief Deadtime on rising edge is defined with DTG[7:0] register and deadtime on falling edge is defined with DTGF[7:0] bits. */
    constexpr std::uint32_t TIM16_DTR2_DTAE_B_0x1 = 1;

    /** @brief Deadtime preload enable Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_DTR2_DTPE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Deadtime value is not preloaded (value: 0)
     *          - B_0x1: Deadtime value preload is enabled (value: 1)
     */
        /** @brief Deadtime value is not preloaded */
    constexpr std::uint32_t TIM16_DTR2_DTPE_B_0x0 = 0;
        /** @brief Deadtime value preload is enabled */
    constexpr std::uint32_t TIM16_DTR2_DTPE_B_0x1 = 1;

    /** @brief TIM16 input selection register */
    using TIM16_TISEL = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief selects tim_ti1_in[0..15] input ... Refer to for interconnects list. */
    using TIM16_TISEL_TI1SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CH1 input (tim_ti1_in0) (value: 0)
     *          - B_0x1: tim_ti1_in1 (value: 1)
     *          - B_0xF: tim_ti1_in15 (value: 15)
     */
        /** @brief TIMx_CH1 input (tim_ti1_in0) */
    constexpr std::uint32_t TIM16_TISEL_TI1SEL_B_0x0 = 0;
        /** @brief tim_ti1_in1 */
    constexpr std::uint32_t TIM16_TISEL_TI1SEL_B_0x1 = 1;
        /** @brief tim_ti1_in15 */
    constexpr std::uint32_t TIM16_TISEL_TI1SEL_B_0xF = 15;

    /** @brief TIM16 alternate function register 1 */
    using TIM16_AF1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIMx_BKIN input enable This bit enables the TIMx_BKIN alternate function input for the timer's tim_brk input. TIMx_BKIN input is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKINE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_BKIN input disabled (value: 0)
     *          - B_0x1: TIMx_BKIN input enabled (value: 1)
     */
        /** @brief TIMx_BKIN input disabled */
    constexpr std::uint32_t TIM16_AF1_BKINE_B_0x0 = 0;
        /** @brief TIMx_BKIN input enabled */
    constexpr std::uint32_t TIM16_AF1_BKINE_B_0x1 = 1;

    /** @brief tim_brk_cmp1 enable This bit enables the tim_brk_cmp1 for the timer's tim_brk input. tim_brk_cmp1 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP1E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp1 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp1 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp1 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP1E_B_0x0 = 0;
        /** @brief tim_brk_cmp1 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP1E_B_0x1 = 1;

    /** @brief tim_brk_cmp2 enable This bit enables the tim_brk_cmp2 for the timer's tim_brk input. tim_brk_cmp2 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP2E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp2 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp2 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp2 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP2E_B_0x0 = 0;
        /** @brief tim_brk_cmp2 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP2E_B_0x1 = 1;

    /** @brief tim_brk_cmp3 enable This bit enables the tim_brk_cmp3 for the timer's tim_brk input. tim_brk_cmp3 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP3E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp3 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp3 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp3 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP3E_B_0x0 = 0;
        /** @brief tim_brk_cmp3 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP3E_B_0x1 = 1;

    /** @brief tim_brk_cmp4 enable This bit enables the tim_brk_cmp4 for the timer's tim_brk input. tim_brk_cmp4 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP4E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp4 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp4 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp4 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP4E_B_0x0 = 0;
        /** @brief tim_brk_cmp4 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP4E_B_0x1 = 1;

    /** @brief tim_brk_cmp5 enable This bit enables the tim_brk_cmp5 for the timer's tim_brk input. tim_brk_cmp5 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP5E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp5 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp5 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp5 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP5E_B_0x0 = 0;
        /** @brief tim_brk_cmp5 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP5E_B_0x1 = 1;

    /** @brief tim_brk_cmp6 enable This bit enables the tim_brk_cmp6 for the timer's tim_brk input. tim_brk_cmp6 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP6E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp6 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp6 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp6 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP6E_B_0x0 = 0;
        /** @brief tim_brk_cmp6 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP6E_B_0x1 = 1;

    /** @brief tim_brk_cmp7 enable This bit enables the tim_brk_cmp7 for the timer's tim_brk input. tim_brk_cmp7 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP7E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp7 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp7 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp7 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP7E_B_0x0 = 0;
        /** @brief tim_brk_cmp7 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP7E_B_0x1 = 1;

    /** @brief tim_brk_cmp8 enable This bit enables the tim_brk_cmp8 for the timer's tim_brk input. mdf_brkx output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP8E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp8 input disabled (value: 0)
     *          - B_0x1: tim_brk_cmp8 input enabled (value: 1)
     */
        /** @brief tim_brk_cmp8 input disabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP8E_B_0x0 = 0;
        /** @brief tim_brk_cmp8 input enabled */
    constexpr std::uint32_t TIM16_AF1_BKCMP8E_B_0x1 = 1;

    /** @brief TIMx_BKIN input polarity This bit selects the TIMx_BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKINP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_BKIN input is active high (value: 0)
     *          - B_0x1: TIMx_BKIN input is active low (value: 1)
     */
        /** @brief TIMx_BKIN input is active high */
    constexpr std::uint32_t TIM16_AF1_BKINP_B_0x0 = 0;
        /** @brief TIMx_BKIN input is active low */
    constexpr std::uint32_t TIM16_AF1_BKINP_B_0x1 = 1;

    /** @brief tim_brk_cmp1 input polarity This bit selects the tim_brk_cmp1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP1P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp1 input is active high (value: 0)
     *          - B_0x1: tim_brk_cmp1 input is active low (value: 1)
     */
        /** @brief tim_brk_cmp1 input is active high */
    constexpr std::uint32_t TIM16_AF1_BKCMP1P_B_0x0 = 0;
        /** @brief tim_brk_cmp1 input is active low */
    constexpr std::uint32_t TIM16_AF1_BKCMP1P_B_0x1 = 1;

    /** @brief tim_brk_cmp2 input polarity This bit selects the tim_brk_cmp2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP2P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp2 input is active high (value: 0)
     *          - B_0x1: tim_brk_cmp2 input is active low (value: 1)
     */
        /** @brief tim_brk_cmp2 input is active high */
    constexpr std::uint32_t TIM16_AF1_BKCMP2P_B_0x0 = 0;
        /** @brief tim_brk_cmp2 input is active low */
    constexpr std::uint32_t TIM16_AF1_BKCMP2P_B_0x1 = 1;

    /** @brief tim_brk_cmp3 input polarity This bit selects the tim_brk_cmp3 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP3P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp3 input is active high (value: 0)
     *          - B_0x1: tim_brk_cmp3 input is active low (value: 1)
     */
        /** @brief tim_brk_cmp3 input is active high */
    constexpr std::uint32_t TIM16_AF1_BKCMP3P_B_0x0 = 0;
        /** @brief tim_brk_cmp3 input is active low */
    constexpr std::uint32_t TIM16_AF1_BKCMP3P_B_0x1 = 1;

    /** @brief tim_brk_cmp4 input polarity This bit selects the tim_brk_cmp4 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF1_BKCMP4P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_brk_cmp4 input is active high (value: 0)
     *          - B_0x1: tim_brk_cmp4 input is active low (value: 1)
     */
        /** @brief tim_brk_cmp4 input is active high */
    constexpr std::uint32_t TIM16_AF1_BKCMP4P_B_0x0 = 0;
        /** @brief tim_brk_cmp4 input is active low */
    constexpr std::uint32_t TIM16_AF1_BKCMP4P_B_0x1 = 1;

    /** @brief TIM16 alternate function register 2 */
    using TIM16_AF2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief tim_ocref_clr source selection These bits select the tim_ocref_clr input source. Refer to for product specific implementation. Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM16_AF2_OCRSEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ocref_clr0 (value: 0)
     *          - B_0x1: tim_ocref_clr1 (value: 1)
     *          - B_0x2: tim_ocref_clr2 (value: 2)
     *          - B_0x3: tim_ocref_clr3 (value: 3)
     *          - B_0x4: tim_ocref_clr4 (value: 4)
     *          - B_0x5: tim_ocref_clr5 (value: 5)
     *          - B_0x6: tim_ocref_clr6 (value: 6)
     *          - B_0x7: tim_ocref_clr7 (value: 7)
     */
        /** @brief tim_ocref_clr0 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x0 = 0;
        /** @brief tim_ocref_clr1 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x1 = 1;
        /** @brief tim_ocref_clr2 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x2 = 2;
        /** @brief tim_ocref_clr3 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x3 = 3;
        /** @brief tim_ocref_clr4 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x4 = 4;
        /** @brief tim_ocref_clr5 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x5 = 5;
        /** @brief tim_ocref_clr6 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x6 = 6;
        /** @brief tim_ocref_clr7 */
    constexpr std::uint32_t TIM16_AF2_OCRSEL_B_0x7 = 7;

    /** @brief TIM16 DMA control register */
    using TIM16_DCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA base address This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... Example: Let us consider the following transfer: DBL = 7 transfers and DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address. */
    using TIM16_DCR_DBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CR1, (value: 0)
     *          - B_0x1: TIMx_CR2, (value: 1)
     *          - B_0x2: TIMx_SMCR, (value: 2)
     */
        /** @brief TIMx_CR1, */
    constexpr std::uint32_t TIM16_DCR_DBA_B_0x0 = 0;
        /** @brief TIMx_CR2, */
    constexpr std::uint32_t TIM16_DCR_DBA_B_0x1 = 1;
        /** @brief TIMx_SMCR, */
    constexpr std::uint32_t TIM16_DCR_DBA_B_0x2 = 2;

    /** @brief DMA burst length This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... */
    using TIM16_DCR_DBL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: 1 transfer, (value: 0)
     *          - B_0x1: 2 transfers, (value: 1)
     *          - B_0x2: 3 transfers, (value: 2)
     *          - B_0x11: 18 transfers. (value: 17)
     */
        /** @brief 1 transfer, */
    constexpr std::uint32_t TIM16_DCR_DBL_B_0x0 = 0;
        /** @brief 2 transfers, */
    constexpr std::uint32_t TIM16_DCR_DBL_B_0x1 = 1;
        /** @brief 3 transfers, */
    constexpr std::uint32_t TIM16_DCR_DBL_B_0x2 = 2;
        /** @brief 18 transfers. */
    constexpr std::uint32_t TIM16_DCR_DBL_B_0x11 = 17;

    /** @brief DMA burst source selection This bitfield defines the interrupt source that triggers the DMA burst transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). Other: reserved */
    using TIM16_DCR_DBSS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x1: Update (value: 1)
     *          - B_0x2: CC1 (value: 2)
     *          - B_0x3: CC2 (value: 3)
     *          - B_0x4: CC3 (value: 4)
     *          - B_0x5: CC4 (value: 5)
     *          - B_0x6: COM (value: 6)
     *          - B_0x7: Trigger (value: 7)
     */
        /** @brief Update */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x1 = 1;
        /** @brief CC1 */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x2 = 2;
        /** @brief CC2 */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x3 = 3;
        /** @brief CC3 */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x4 = 4;
        /** @brief CC4 */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x5 = 5;
        /** @brief COM */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x6 = 6;
        /** @brief Trigger */
    constexpr std::uint32_t TIM16_DCR_DBSS_B_0x7 = 7;

    /** @brief TIM16/TIM17 DMA address for full transfer */
    using TIM16_DMAR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR). */
    using TIM16_DMAR_DMAB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
}

#endif
