/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32H573_TIM5_HPP
#define EMBEDDED_PP_STM32H573_TIM5_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief General-purpose timers */
namespace STM32H573::TIM5 {

    /** @brief TIM5 control register 1 */
    using TIM5_CR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs. */
    using TIM5_CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint16_t TIM5_CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint16_t TIM5_CR1_CEN_B_0x1 = 1;

    /** @brief Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values. */
    using TIM5_CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. The Update (UEV) event is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. (value: 1)
     */
        /** @brief UEV enabled. The Update (UEV) event is generated by one of the following events: */
    constexpr std::uint16_t TIM5_CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. */
    constexpr std::uint16_t TIM5_CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller */
    using TIM5_CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generate an update interrupt or DMA request if enabled. These events can be: (value: 0)
     *          - B_0x1: Only counter overflow/underflow generates an update interrupt or DMA request if enabled. (value: 1)
     */
        /** @brief Any of the following events generate an update interrupt or DMA request if enabled. These events can be: */
    constexpr std::uint16_t TIM5_CR1_URS_B_0x0 = 0;
        /** @brief Only counter overflow/underflow generates an update interrupt or DMA request if enabled. */
    constexpr std::uint16_t TIM5_CR1_URS_B_0x1 = 1;

    /** @brief One-pulse mode */
    using TIM5_CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped at update event (value: 0)
     *          - B_0x1: Counter stops counting at the next update event (clearing the bit CEN) (value: 1)
     */
        /** @brief Counter is not stopped at update event */
    constexpr std::uint16_t TIM5_CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting at the next update event (clearing the bit CEN) */
    constexpr std::uint16_t TIM5_CR1_OPM_B_0x1 = 1;

    /** @brief Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode. */
    using TIM5_CR1_DIR = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter used as upcounter (value: 0)
     *          - B_0x1: Counter used as downcounter (value: 1)
     */
        /** @brief Counter used as upcounter */
    constexpr std::uint16_t TIM5_CR1_DIR_B_0x0 = 0;
        /** @brief Counter used as downcounter */
    constexpr std::uint16_t TIM5_CR1_DIR_B_0x1 = 1;

    /** @brief Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1) */
    using TIM5_CR1_CMS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR). (value: 0)
     *          - B_0x1: Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down. (value: 1)
     *          - B_0x2: Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up. (value: 2)
     *          - B_0x3: Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down. (value: 3)
     */
        /** @brief Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR). */
    constexpr std::uint16_t TIM5_CR1_CMS_B_0x0 = 0;
        /** @brief Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down. */
    constexpr std::uint16_t TIM5_CR1_CMS_B_0x1 = 1;
        /** @brief Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up. */
    constexpr std::uint16_t TIM5_CR1_CMS_B_0x2 = 2;
        /** @brief Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down. */
    constexpr std::uint16_t TIM5_CR1_CMS_B_0x3 = 3;

    /** @brief Auto-reload preload enable */
    using TIM5_CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered */
    constexpr std::uint16_t TIM5_CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered */
    constexpr std::uint16_t TIM5_CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and sampling clock used by the digital filters (tim_etr_in, tim_tix), */
    using TIM5_CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tDTS = ttim_ker_ck (value: 0)
     *          - B_0x1: tDTS = 2 ttim_ker_ck (value: 1)
     *          - B_0x2: tDTS = 4 ttim_ker_ck (value: 2)
     */
        /** @brief tDTS = ttim_ker_ck */
    constexpr std::uint16_t TIM5_CR1_CKD_B_0x0 = 0;
        /** @brief tDTS = 2 ttim_ker_ck */
    constexpr std::uint16_t TIM5_CR1_CKD_B_0x1 = 1;
        /** @brief tDTS = 4 ttim_ker_ck */
    constexpr std::uint16_t TIM5_CR1_CKD_B_0x2 = 2;

    /** @brief UIF status bit remapping */
    using TIM5_CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM5_CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM5_CR1_UIFREMAP_B_0x1 = 1;

    /** @brief Dithering Enable Note: The DITHEN bit can only be modified when CEN bit is reset. */
    using TIM5_CR1_DITHEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Dithering disabled (value: 0)
     *          - B_0x1: Dithering enabled (value: 1)
     */
        /** @brief Dithering disabled */
    constexpr std::uint16_t TIM5_CR1_DITHEN_B_0x0 = 0;
        /** @brief Dithering enabled */
    constexpr std::uint16_t TIM5_CR1_DITHEN_B_0x1 = 1;

    /** @brief TIM5 control register 2 */
    using TIM5_CR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare DMA selection */
    using TIM5_CR2_CCDS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCx DMA request sent when CCx event occurs (value: 0)
     *          - B_0x1: CCx DMA requests sent when update event occurs (value: 1)
     */
        /** @brief CCx DMA request sent when CCx event occurs */
    constexpr std::uint32_t TIM5_CR2_CCDS_B_0x0 = 0;
        /** @brief CCx DMA requests sent when update event occurs */
    constexpr std::uint32_t TIM5_CR2_CCDS_B_0x1 = 1;

    /** @brief Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM5_CR2_MMS1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on (value: 1)
     *          - B_0x2: Update The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. (value: 2)
     *          - B_0x3: Compare Pulse The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo). (value: 3)
     *          - B_0x4: Compare tim_oc1refc signal is used as trigger output (tim_trgo) (value: 4)
     *          - B_0x5: Compare tim_oc2refc signal is used as trigger output (tim_trgo) (value: 5)
     *          - B_0x6: Compare tim_oc3refc signal is used as trigger output (tim_trgo) (value: 6)
     *          - B_0x7: Compare tim_oc4refc signal is used as trigger output (tim_trgo) (value: 7)
     */
        /** @brief Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x0 = 0;
        /** @brief Enable the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x1 = 1;
        /** @brief Update The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x2 = 2;
        /** @brief Compare Pulse The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo). */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x3 = 3;
        /** @brief Compare tim_oc1refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x4 = 4;
        /** @brief Compare tim_oc2refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x5 = 5;
        /** @brief Compare tim_oc3refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x6 = 6;
        /** @brief Compare tim_oc4refc signal is used as trigger output (tim_trgo) */
    constexpr std::uint32_t TIM5_CR2_MMS1_B_0x7 = 7;

    /** @brief tim_ti1 selection */
    using TIM5_CR2_TI1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The tim_ti1_in[15..0] multiplexer output is to tim_ti1 input (value: 0)
     *          - B_0x1: The tim_ti1_in[15..0], tim_ti2_in[15..0] and tim_ti3_in[15..0] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 1494. (value: 1)
     */
        /** @brief The tim_ti1_in[15..0] multiplexer output is to tim_ti1 input */
    constexpr std::uint32_t TIM5_CR2_TI1S_B_0x0 = 0;
        /** @brief The tim_ti1_in[15..0], tim_ti2_in[15..0] and tim_ti3_in[15..0] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 1494. */
    constexpr std::uint32_t TIM5_CR2_TI1S_B_0x1 = 1;

    /** @brief Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM5_CR2_MMS2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on (value: 1)
     */
        /** @brief Reset the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. */
    constexpr std::uint32_t TIM5_CR2_MMS2_B_0x0 = 0;
        /** @brief Enable the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on */
    constexpr std::uint32_t TIM5_CR2_MMS2_B_0x1 = 1;

    /** @brief TIM5 slave mode control register */
    using TIM5_SMCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM5_SMCR_SMS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled if CEN = '1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: Encoder mode 1 Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. (value: 1)
     *          - B_0x2: Encoder mode 2 Counter counts up/down on tim_ti2fp2 edge depending on tim_ti1fp1 level. (value: 2)
     *          - B_0x3: Encoder mode 3 Counter counts up/down on both tim_ti1fp1 and tim_ti2fp2 edges depending on the level of the other input. (value: 3)
     *          - B_0x4: Reset Mode Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. (value: 4)
     *          - B_0x5: Gated Mode The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. (value: 5)
     *          - B_0x6: Trigger Mode The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. (value: 6)
     *          - B_0x7: External Clock Mode 1 Rising edges of the selected trigger (tim_trgi) clock the counter. (value: 7)
     */
        /** @brief Slave mode disabled if CEN = '1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x0 = 0;
        /** @brief Encoder mode 1 Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x1 = 1;
        /** @brief Encoder mode 2 Counter counts up/down on tim_ti2fp2 edge depending on tim_ti1fp1 level. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x2 = 2;
        /** @brief Encoder mode 3 Counter counts up/down on both tim_ti1fp1 and tim_ti2fp2 edges depending on the level of the other input. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x3 = 3;
        /** @brief Reset Mode Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x4 = 4;
        /** @brief Gated Mode The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x5 = 5;
        /** @brief Trigger Mode The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x6 = 6;
        /** @brief External Clock Mode 1 Rising edges of the selected trigger (tim_trgi) clock the counter. */
    constexpr std::uint32_t TIM5_SMCR_SMS_B_0x7 = 7;

    /** @brief OCREF clear selection This bit is used to select the OCREF clear source Note: If the OCREF clear selection feature is not supported, this bit is reserved and forced by hardware to '0'. . */
    using TIM5_SMCR_OCCS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ocref_clr_int is connected to the tim_ocref_clr input (value: 0)
     *          - B_0x1: tim_ocref_clr_int is connected to tim_etrf (value: 1)
     */
        /** @brief tim_ocref_clr_int is connected to the tim_ocref_clr input */
    constexpr std::uint32_t TIM5_SMCR_OCCS_B_0x0 = 0;
        /** @brief tim_ocref_clr_int is connected to tim_etrf */
    constexpr std::uint32_t TIM5_SMCR_OCCS_B_0x1 = 1;

    /** @brief Trigger selection (see bits 21:20 for TS[4:3]) This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition. */
    using TIM5_SMCR_TS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal trigger 3 (tim_itr3) (value: 3)
     *          - B_0x4: tim_ti1 edge detector (tim_ti1f_ed) (value: 4)
     *          - B_0x5: Filtered timer input 1 (tim_ti1fp1) (value: 5)
     *          - B_0x6: Filtered timer input 2 (tim_ti2fp2) (value: 6)
     *          - B_0x7: External trigger input (tim_etrf) (value: 7)
     */
        /** @brief Internal trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x0 = 0;
        /** @brief Internal trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x1 = 1;
        /** @brief Internal trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x2 = 2;
        /** @brief Internal trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x3 = 3;
        /** @brief tim_ti1 edge detector (tim_ti1f_ed) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x4 = 4;
        /** @brief Filtered timer input 1 (tim_ti1fp1) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x5 = 5;
        /** @brief Filtered timer input 2 (tim_ti2fp2) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x6 = 6;
        /** @brief External trigger input (tim_etrf) */
    constexpr std::uint32_t TIM5_SMCR_TS_B_0x7 = 7;

    /** @brief Master/Slave mode */
    using TIM5_SMCR_MSM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful if we want to synchronize several timers on a single external event. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t TIM5_SMCR_MSM_B_0x0 = 0;
        /** @brief The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful if we want to synchronize several timers on a single external event. */
    constexpr std::uint32_t TIM5_SMCR_MSM_B_0x1 = 1;

    /** @brief External trigger filter This bit-field then defines the frequency used to sample tim_etrp signal and the length of the digital filter applied to tim_etrp. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM5_SMCR_ETF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at fDTS (value: 0)
     *          - B_0x1: fSAMPLING=ftim_ker_ck, N=2 (value: 1)
     *          - B_0x2: fSAMPLING=ftim_ker_ck, N=4 (value: 2)
     *          - B_0x3: fSAMPLING=ftim_ker_ck, N=8 (value: 3)
     *          - B_0x4: fSAMPLING=fDTS/2, N=6 (value: 4)
     *          - B_0x5: fSAMPLING=fDTS/2, N=8 (value: 5)
     *          - B_0x6: fSAMPLING=fDTS/4, N=6 (value: 6)
     *          - B_0x7: fSAMPLING=fDTS/4, N=8 (value: 7)
     *          - B_0x8: fSAMPLING=fDTS/8, N=6 (value: 8)
     *          - B_0x9: fSAMPLING=fDTS/8, N=8 (value: 9)
     *          - B_0xA: fSAMPLING=fDTS/16, N=5 (value: 10)
     *          - B_0xB: fSAMPLING=fDTS/16, N=6 (value: 11)
     *          - B_0xC: fSAMPLING=fDTS/16, N=8 (value: 12)
     *          - B_0xD: fSAMPLING=fDTS/32, N=5 (value: 13)
     *          - B_0xE: fSAMPLING=fDTS/32, N=6 (value: 14)
     *          - B_0xF: fSAMPLING=fDTS/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at fDTS */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x0 = 0;
        /** @brief fSAMPLING=ftim_ker_ck, N=2 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x1 = 1;
        /** @brief fSAMPLING=ftim_ker_ck, N=4 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x2 = 2;
        /** @brief fSAMPLING=ftim_ker_ck, N=8 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x3 = 3;
        /** @brief fSAMPLING=fDTS/2, N=6 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x4 = 4;
        /** @brief fSAMPLING=fDTS/2, N=8 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x5 = 5;
        /** @brief fSAMPLING=fDTS/4, N=6 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x6 = 6;
        /** @brief fSAMPLING=fDTS/4, N=8 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x7 = 7;
        /** @brief fSAMPLING=fDTS/8, N=6 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x8 = 8;
        /** @brief fSAMPLING=fDTS/8, N=8 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0x9 = 9;
        /** @brief fSAMPLING=fDTS/16, N=5 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0xA = 10;
        /** @brief fSAMPLING=fDTS/16, N=6 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0xB = 11;
        /** @brief fSAMPLING=fDTS/16, N=8 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0xC = 12;
        /** @brief fSAMPLING=fDTS/32, N=5 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0xD = 13;
        /** @brief fSAMPLING=fDTS/32, N=6 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0xE = 14;
        /** @brief fSAMPLING=fDTS/32, N=8 */
    constexpr std::uint32_t TIM5_SMCR_ETF_B_0xF = 15;

    /** @brief External trigger prescaler External trigger signal tim_etrp frequency must be at most 1/4 of tim_ker_ck frequency. A prescaler can be enabled to reduce tim_etrp frequency. It is useful when inputting fast external clocks on tim_etr_in. */
    using TIM5_SMCR_ETPS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Prescaler OFF (value: 0)
     *          - B_0x1: tim_etrp frequency divided by 2 (value: 1)
     *          - B_0x2: tim_etrp frequency divided by 4 (value: 2)
     *          - B_0x3: tim_etrp frequency divided by 8 (value: 3)
     */
        /** @brief Prescaler OFF */
    constexpr std::uint32_t TIM5_SMCR_ETPS_B_0x0 = 0;
        /** @brief tim_etrp frequency divided by 2 */
    constexpr std::uint32_t TIM5_SMCR_ETPS_B_0x1 = 1;
        /** @brief tim_etrp frequency divided by 4 */
    constexpr std::uint32_t TIM5_SMCR_ETPS_B_0x2 = 2;
        /** @brief tim_etrp frequency divided by 8 */
    constexpr std::uint32_t TIM5_SMCR_ETPS_B_0x3 = 3;

    /** @brief External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with tim_trgi connected to tim_etrf (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, tim_trgi must not be connected to tim_etrf in this case (TS bits must not be 00111). If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is tim_etrf. */
    using TIM5_SMCR_ECE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: External clock mode 2 disabled (value: 0)
     *          - B_0x1: External clock mode 2 enabled. The counter is clocked by any active edge on the tim_etrf signal. (value: 1)
     */
        /** @brief External clock mode 2 disabled */
    constexpr std::uint32_t TIM5_SMCR_ECE_B_0x0 = 0;
        /** @brief External clock mode 2 enabled. The counter is clocked by any active edge on the tim_etrf signal. */
    constexpr std::uint32_t TIM5_SMCR_ECE_B_0x1 = 1;

    /** @brief External trigger polarity This bit selects whether tim_etr_in or tim_etr_in is used for trigger operations */
    using TIM5_SMCR_ETP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_etr_in is non-inverted, active at high level or rising edge (value: 0)
     *          - B_0x1: tim_etr_in is inverted, active at low level or falling edge (value: 1)
     */
        /** @brief tim_etr_in is non-inverted, active at high level or rising edge */
    constexpr std::uint32_t TIM5_SMCR_ETP_B_0x0 = 0;
        /** @brief tim_etr_in is inverted, active at low level or falling edge */
    constexpr std::uint32_t TIM5_SMCR_ETP_B_0x1 = 1;

    /** @brief Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM5_SMCR_SMS_2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled if CEN = '1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: Encoder mode 1 Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. (value: 1)
     */
        /** @brief Slave mode disabled if CEN = '1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM5_SMCR_SMS_2_B_0x0 = 0;
        /** @brief Encoder mode 1 Counter counts up/down on tim_ti1fp1 edge depending on tim_ti2fp2 level. */
    constexpr std::uint32_t TIM5_SMCR_SMS_2_B_0x1 = 1;

    /** @brief Trigger selection (see bits 21:20 for TS[4:3]) This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition. */
    using TIM5_SMCR_TS_2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal trigger 3 (tim_itr3) (value: 3)
     */
        /** @brief Internal trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM5_SMCR_TS_2_B_0x0 = 0;
        /** @brief Internal trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM5_SMCR_TS_2_B_0x1 = 1;
        /** @brief Internal trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM5_SMCR_TS_2_B_0x2 = 2;
        /** @brief Internal trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM5_SMCR_TS_2_B_0x3 = 3;

    /** @brief SMS preload enable This bit selects whether the SMS[3:0] bitfield is preloaded */
    using TIM5_SMCR_SMSPE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: SMS[3:0] bitfield is not preloaded (value: 0)
     *          - B_0x1: SMS[3:0] preload is enabled (value: 1)
     */
        /** @brief SMS[3:0] bitfield is not preloaded */
    constexpr std::uint32_t TIM5_SMCR_SMSPE_B_0x0 = 0;
        /** @brief SMS[3:0] preload is enabled */
    constexpr std::uint32_t TIM5_SMCR_SMSPE_B_0x1 = 1;

    /** @brief SMS preload source This bit selects whether the events that triggers the SMS[3:0] bitfield transfer from preload to active */
    using TIM5_SMCR_SMSPS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The transfer is triggered by the Timer's Update event (value: 0)
     *          - B_0x1: The transfer is triggered by the Index event (value: 1)
     */
        /** @brief The transfer is triggered by the Timer's Update event */
    constexpr std::uint32_t TIM5_SMCR_SMSPS_B_0x0 = 0;
        /** @brief The transfer is triggered by the Index event */
    constexpr std::uint32_t TIM5_SMCR_SMSPS_B_0x1 = 1;

    /** @brief TIM5 DMA/Interrupt enable register */
    using TIM5_DIER = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using TIM5_DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled. (value: 0)
     *          - B_0x1: Update interrupt enabled. (value: 1)
     */
        /** @brief Update interrupt disabled. */
    constexpr std::uint32_t TIM5_DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled. */
    constexpr std::uint32_t TIM5_DIER_UIE_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt enable */
    using TIM5_DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled. (value: 0)
     *          - B_0x1: CC1 interrupt enabled. (value: 1)
     */
        /** @brief CC1 interrupt disabled. */
    constexpr std::uint32_t TIM5_DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled. */
    constexpr std::uint32_t TIM5_DIER_CC1IE_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt enable */
    using TIM5_DIER_CC2IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 interrupt disabled. (value: 0)
     *          - B_0x1: CC2 interrupt enabled. (value: 1)
     */
        /** @brief CC2 interrupt disabled. */
    constexpr std::uint32_t TIM5_DIER_CC2IE_B_0x0 = 0;
        /** @brief CC2 interrupt enabled. */
    constexpr std::uint32_t TIM5_DIER_CC2IE_B_0x1 = 1;

    /** @brief Capture/Compare 3 interrupt enable */
    using TIM5_DIER_CC3IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 interrupt disabled. (value: 0)
     *          - B_0x1: CC3 interrupt enabled. (value: 1)
     */
        /** @brief CC3 interrupt disabled. */
    constexpr std::uint32_t TIM5_DIER_CC3IE_B_0x0 = 0;
        /** @brief CC3 interrupt enabled. */
    constexpr std::uint32_t TIM5_DIER_CC3IE_B_0x1 = 1;

    /** @brief Capture/Compare 4 interrupt enable */
    using TIM5_DIER_CC4IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 interrupt disabled. (value: 0)
     *          - B_0x1: CC4 interrupt enabled. (value: 1)
     */
        /** @brief CC4 interrupt disabled. */
    constexpr std::uint32_t TIM5_DIER_CC4IE_B_0x0 = 0;
        /** @brief CC4 interrupt enabled. */
    constexpr std::uint32_t TIM5_DIER_CC4IE_B_0x1 = 1;

    /** @brief Trigger interrupt enable */
    using TIM5_DIER_TIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger interrupt disabled. (value: 0)
     *          - B_0x1: Trigger interrupt enabled. (value: 1)
     */
        /** @brief Trigger interrupt disabled. */
    constexpr std::uint32_t TIM5_DIER_TIE_B_0x0 = 0;
        /** @brief Trigger interrupt enabled. */
    constexpr std::uint32_t TIM5_DIER_TIE_B_0x1 = 1;

    /** @brief Update DMA request enable */
    using TIM5_DIER_UDE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update DMA request disabled. (value: 0)
     *          - B_0x1: Update DMA request enabled. (value: 1)
     */
        /** @brief Update DMA request disabled. */
    constexpr std::uint32_t TIM5_DIER_UDE_B_0x0 = 0;
        /** @brief Update DMA request enabled. */
    constexpr std::uint32_t TIM5_DIER_UDE_B_0x1 = 1;

    /** @brief Capture/Compare 1 DMA request enable */
    using TIM5_DIER_CC1DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 DMA request disabled. (value: 0)
     *          - B_0x1: CC1 DMA request enabled. (value: 1)
     */
        /** @brief CC1 DMA request disabled. */
    constexpr std::uint32_t TIM5_DIER_CC1DE_B_0x0 = 0;
        /** @brief CC1 DMA request enabled. */
    constexpr std::uint32_t TIM5_DIER_CC1DE_B_0x1 = 1;

    /** @brief Capture/Compare 2 DMA request enable */
    using TIM5_DIER_CC2DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 DMA request disabled. (value: 0)
     *          - B_0x1: CC2 DMA request enabled. (value: 1)
     */
        /** @brief CC2 DMA request disabled. */
    constexpr std::uint32_t TIM5_DIER_CC2DE_B_0x0 = 0;
        /** @brief CC2 DMA request enabled. */
    constexpr std::uint32_t TIM5_DIER_CC2DE_B_0x1 = 1;

    /** @brief Capture/Compare 3 DMA request enable */
    using TIM5_DIER_CC3DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 DMA request disabled. (value: 0)
     *          - B_0x1: CC3 DMA request enabled. (value: 1)
     */
        /** @brief CC3 DMA request disabled. */
    constexpr std::uint32_t TIM5_DIER_CC3DE_B_0x0 = 0;
        /** @brief CC3 DMA request enabled. */
    constexpr std::uint32_t TIM5_DIER_CC3DE_B_0x1 = 1;

    /** @brief Capture/Compare 4 DMA request enable */
    using TIM5_DIER_CC4DE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 DMA request disabled. (value: 0)
     *          - B_0x1: CC4 DMA request enabled. (value: 1)
     */
        /** @brief CC4 DMA request disabled. */
    constexpr std::uint32_t TIM5_DIER_CC4DE_B_0x0 = 0;
        /** @brief CC4 DMA request enabled. */
    constexpr std::uint32_t TIM5_DIER_CC4DE_B_0x1 = 1;

    /** @brief Trigger DMA request enable */
    using TIM5_DIER_TDE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger DMA request disabled. (value: 0)
     *          - B_0x1: Trigger DMA request enabled. (value: 1)
     */
        /** @brief Trigger DMA request disabled. */
    constexpr std::uint32_t TIM5_DIER_TDE_B_0x0 = 0;
        /** @brief Trigger DMA request enabled. */
    constexpr std::uint32_t TIM5_DIER_TDE_B_0x1 = 1;

    /** @brief Index interrupt enable */
    using TIM5_DIER_IDXIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index interrupt disabled (value: 0)
     *          - B_0x1: Index interrupt enabled (value: 1)
     */
        /** @brief Index interrupt disabled */
    constexpr std::uint32_t TIM5_DIER_IDXIE_B_0x0 = 0;
        /** @brief Index interrupt enabled */
    constexpr std::uint32_t TIM5_DIER_IDXIE_B_0x1 = 1;

    /** @brief Direction change interrupt enable */
    using TIM5_DIER_DIRIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Direction change interrupt disabled (value: 0)
     *          - B_0x1: Direction change interrupt enabled (value: 1)
     */
        /** @brief Direction change interrupt disabled */
    constexpr std::uint32_t TIM5_DIER_DIRIE_B_0x0 = 0;
        /** @brief Direction change interrupt enabled */
    constexpr std::uint32_t TIM5_DIER_DIRIE_B_0x1 = 1;

    /** @brief Index error interrupt enable */
    using TIM5_DIER_IERRIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index error interrupt disabled (value: 0)
     *          - B_0x1: Index error interrupt enabled (value: 1)
     */
        /** @brief Index error interrupt disabled */
    constexpr std::uint32_t TIM5_DIER_IERRIE_B_0x0 = 0;
        /** @brief Index error interrupt enabled */
    constexpr std::uint32_t TIM5_DIER_IERRIE_B_0x1 = 1;

    /** @brief Transition error interrupt enable */
    using TIM5_DIER_TERRIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Transition error interrupt disabled (value: 0)
     *          - B_0x1: Transition error interrupt enabled (value: 1)
     */
        /** @brief Transition error interrupt disabled */
    constexpr std::uint32_t TIM5_DIER_TERRIE_B_0x0 = 0;
        /** @brief Transition error interrupt enabled */
    constexpr std::uint32_t TIM5_DIER_TERRIE_B_0x1 = 1;

    /** @brief TIM5 status register */
    using TIM5_SR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow and if UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register. */
    using TIM5_SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred */
    constexpr std::uint32_t TIM5_SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint32_t TIM5_SR_UIF_B_0x1 = 1;

    /** @brief Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in downcounting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER). */
    using TIM5_SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint32_t TIM5_SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred */
    constexpr std::uint32_t TIM5_SR_CC1IF_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt flag Refer to CC1IF description */
    using TIM5_SR_CC2IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 interrupt flag Refer to CC1IF description */
    using TIM5_SR_CC3IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 interrupt flag Refer to CC1IF description */
    using TIM5_SR_CC4IF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on tim_trgi input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software. */
    using TIM5_SR_TIF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No trigger event occurred. (value: 0)
     *          - B_0x1: Trigger interrupt pending. (value: 1)
     */
        /** @brief No trigger event occurred. */
    constexpr std::uint32_t TIM5_SR_TIF_B_0x0 = 0;
        /** @brief Trigger interrupt pending. */
    constexpr std::uint32_t TIM5_SR_TIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0'. */
    using TIM5_SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected. (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected. */
    constexpr std::uint32_t TIM5_SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint32_t TIM5_SR_CC1OF_B_0x1 = 1;

    /** @brief Capture/compare 2 overcapture flag refer to CC1OF description */
    using TIM5_SR_CC2OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 overcapture flag refer to CC1OF description */
    using TIM5_SR_CC3OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 overcapture flag refer to CC1OF description */
    using TIM5_SR_CC4OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Index interrupt flag This flag is set by hardware when an index event is detected. It is cleared by software by writing it to '0'. */
    using TIM5_SR_IDXF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No index event occurred. (value: 0)
     *          - B_0x1: An index event has occurred (value: 1)
     */
        /** @brief No index event occurred. */
    constexpr std::uint32_t TIM5_SR_IDXF_B_0x0 = 0;
        /** @brief An index event has occurred */
    constexpr std::uint32_t TIM5_SR_IDXF_B_0x1 = 1;

    /** @brief Direction change interrupt flag This flag is set by hardware when the direction changes in encoder mode (DIR bit value in TIMx_CR is changing). It is cleared by software by writing it to '0'. */
    using TIM5_SR_DIRF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No direction change (value: 0)
     *          - B_0x1: Direction change (value: 1)
     */
        /** @brief No direction change */
    constexpr std::uint32_t TIM5_SR_DIRF_B_0x0 = 0;
        /** @brief Direction change */
    constexpr std::uint32_t TIM5_SR_DIRF_B_0x1 = 1;

    /** @brief Index error interrupt flag This flag is set by hardware when an index error is detected. It is cleared by software by writing it to '0'. */
    using TIM5_SR_IERRF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No index error has been detected. (value: 0)
     *          - B_0x1: An index error has been detected (value: 1)
     */
        /** @brief No index error has been detected. */
    constexpr std::uint32_t TIM5_SR_IERRF_B_0x0 = 0;
        /** @brief An index error has been detected */
    constexpr std::uint32_t TIM5_SR_IERRF_B_0x1 = 1;

    /** @brief Transition error interrupt flag This flag is set by hardware when a transition error is detected in encoder mode. It is cleared by software by writing it to '0'. */
    using TIM5_SR_TERRF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No encoder transition error has been detected. (value: 0)
     *          - B_0x1: An encoder transition error has been detected (value: 1)
     */
        /** @brief No encoder transition error has been detected. */
    constexpr std::uint32_t TIM5_SR_TERRF_B_0x0 = 0;
        /** @brief An encoder transition error has been detected */
    constexpr std::uint32_t TIM5_SR_TERRF_B_0x1 = 1;

    /** @brief TIM5 event generation register */
    using TIM5_EGR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation This bit can be set by software, it is automatically cleared by hardware. */
    using TIM5_EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting). (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM5_EGR_UG_B_0x0 = 0;
        /** @brief Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting). */
    constexpr std::uint16_t TIM5_EGR_UG_B_0x1 = 1;

    /** @brief Capture/compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high. */
    using TIM5_EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM5_EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint16_t TIM5_EGR_CC1G_B_0x1 = 1;

    /** @brief Capture/compare 2 generation Refer to CC1G description */
    using TIM5_EGR_CC2G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 generation Refer to CC1G description */
    using TIM5_EGR_CC3G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 generation Refer to CC1G description */
    using TIM5_EGR_CC4G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM5_EGR_TG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM5_EGR_TG_B_0x0 = 0;
        /** @brief The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled. */
    constexpr std::uint16_t TIM5_EGR_TG_B_0x1 = 1;

    /** @brief TIM5 capture/compare mode register 1 [alternate] */
    using TIM5_CCMR1_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using TIM5_CCMR1_Input_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC1S_B_0x3 = 3;

    /** @brief Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (tim_ic1). The prescaler is reset as soon as CC1E=0 (TIMx_CCER register). */
    using TIM5_CCMR1_Input_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter This bit-field defines the frequency used to sample tim_ti1 input and the length of the digital filter applied to tim_ti1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM5_CCMR1_Input_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at fDTS (value: 0)
     *          - B_0x1: fSAMPLING=ftim_ker_ck, N=2 (value: 1)
     *          - B_0x2: fSAMPLING=ftim_ker_ck, N=4 (value: 2)
     *          - B_0x3: fSAMPLING=ftim_ker_ck, N=8 (value: 3)
     *          - B_0x4: fSAMPLING=fDTS/2, N=6 (value: 4)
     *          - B_0x5: fSAMPLING=fDTS/2, N=8 (value: 5)
     *          - B_0x6: fSAMPLING=fDTS/4, N=6 (value: 6)
     *          - B_0x7: fSAMPLING=fDTS/4, N=8 (value: 7)
     *          - B_0x8: fSAMPLING=fDTS/8, N=6 (value: 8)
     *          - B_0x9: fSAMPLING=fDTS/8, N=8 (value: 9)
     *          - B_0xA: fSAMPLING=fDTS/16, N=5 (value: 10)
     *          - B_0xB: fSAMPLING=fDTS/16, N=6 (value: 11)
     *          - B_0xC: fSAMPLING=fDTS/16, N=8 (value: 12)
     *          - B_0xD: fSAMPLING=fDTS/32, N=5 (value: 13)
     *          - B_0xE: fSAMPLING=fDTS/32, N=6 (value: 14)
     *          - B_0xF: fSAMPLING=fDTS/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at fDTS */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x0 = 0;
        /** @brief fSAMPLING=ftim_ker_ck, N=2 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x1 = 1;
        /** @brief fSAMPLING=ftim_ker_ck, N=4 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x2 = 2;
        /** @brief fSAMPLING=ftim_ker_ck, N=8 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x3 = 3;
        /** @brief fSAMPLING=fDTS/2, N=6 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x4 = 4;
        /** @brief fSAMPLING=fDTS/2, N=8 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x5 = 5;
        /** @brief fSAMPLING=fDTS/4, N=6 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x6 = 6;
        /** @brief fSAMPLING=fDTS/4, N=8 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x7 = 7;
        /** @brief fSAMPLING=fDTS/8, N=6 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x8 = 8;
        /** @brief fSAMPLING=fDTS/8, N=8 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0x9 = 9;
        /** @brief fSAMPLING=fDTS/16, N=5 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0xA = 10;
        /** @brief fSAMPLING=fDTS/16, N=6 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0xB = 11;
        /** @brief fSAMPLING=fDTS/16, N=8 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0xC = 12;
        /** @brief fSAMPLING=fDTS/32, N=5 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0xD = 13;
        /** @brief fSAMPLING=fDTS/32, N=6 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0xE = 14;
        /** @brief fSAMPLING=fDTS/32, N=8 */
    constexpr std::uint32_t TIM5_CCMR1_Input_IC1F_B_0xF = 15;

    /** @brief Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER). */
    using TIM5_CCMR1_Input_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output. (value: 0)
     *          - B_0x1: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2. (value: 1)
     *          - B_0x2: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1. (value: 2)
     *          - B_0x3: CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output. */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2. */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1. */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR1_Input_CC2S_B_0x3 = 3;

    /** @brief Input capture 2 prescaler */
    using TIM5_CCMR1_Input_IC2PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 2 filter */
    using TIM5_CCMR1_Input_IC2F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare mode register 1 [alternate] */
    using TIM5_CCMR1_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using TIM5_CCMR1_Output_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output. (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1. (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2. (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output. */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1. */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2. */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC1S_B_0x3 = 3;

    /** @brief Output compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger. */
    using TIM5_CCMR1_Output_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1FE_B_0x1 = 1;

    /** @brief Output compare 1 preload enable Note: The PWM mode can be used without validating the preload register only in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed. */
    using TIM5_CCMR1_Output_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1PE_B_0x1 = 1;

    /** @brief Output compare 1 mode These bits define the behavior of the output reference signal tim_oc1ref from which tim_oc1 is derived. tim_oc1ref is active high whereas tim_oc1 active level depends on CC1P bit. Note: In PWM mode, the tim_ocref_clr level changes only when the result of the comparison changes or when the output compare mode switches from 'frozen' mode to 'PWM' mode. */
    using TIM5_CCMR1_Output_OC1M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggle tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. (value: 3)
     *          - B_0x4: Force inactive level tim_oc1ref is forced low. (value: 4)
     *          - B_0x5: Force active level tim_oc1ref is forced high. (value: 5)
     *          - B_0x6: PWM mode 1 In upcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (tim_oc1ref=0) as long as TIMx_CNT TIMx_CCR1 else active (tim_oc1ref=1). (value: 6)
     *          - B_0x7: PWM mode 2 In upcounting, channel 1 is inactive as long as TIMx_CNT TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. (value: 7)
     */
        /** @brief Frozen The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. tim_oc1ref signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x2 = 2;
        /** @brief Toggle tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x3 = 3;
        /** @brief Force inactive level tim_oc1ref is forced low. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x4 = 4;
        /** @brief Force active level tim_oc1ref is forced high. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x5 = 5;
        /** @brief PWM mode 1 In upcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (tim_oc1ref=0) as long as TIMx_CNT TIMx_CCR1 else active (tim_oc1ref=1). */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x6 = 6;
        /** @brief PWM mode 2 In upcounting, channel 1 is inactive as long as TIMx_CNT TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT TIMx_CCR1 else inactive. */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M1_B_0x7 = 7;

    /** @brief Output compare 1 clear enable */
    using TIM5_CCMR1_Output_OC1CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1ref is not affected by the tim_ocref_clr_int input (value: 0)
     *          - B_0x1: tim_oc1ref is cleared as soon as a High level is detected on tim_ocref_clr_int input (value: 1)
     */
        /** @brief tim_oc1ref is not affected by the tim_ocref_clr_int input */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1CE_B_0x0 = 0;
        /** @brief tim_oc1ref is cleared as soon as a High level is detected on tim_ocref_clr_int input */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1CE_B_0x1 = 1;

    /** @brief Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER). */
    using TIM5_CCMR1_Output_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, tim_ic2 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR1_Output_CC2S_B_0x3 = 3;

    /** @brief Output compare 2 fast enable */
    using TIM5_CCMR1_Output_OC2FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 preload enable */
    using TIM5_CCMR1_Output_OC2PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 mode refer to OC1M description on bits 6:4 */
    using TIM5_CCMR1_Output_OC2M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 clear enable */
    using TIM5_CCMR1_Output_OC2CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 1 mode These bits define the behavior of the output reference signal tim_oc1ref from which tim_oc1 is derived. tim_oc1ref is active high whereas tim_oc1 active level depends on CC1P bit. Note: In PWM mode, the tim_ocref_clr level changes only when the result of the comparison changes or when the output compare mode switches from 'frozen' mode to 'PWM' mode. */
    using TIM5_CCMR1_Output_OC1M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     */
        /** @brief Frozen The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M2_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. tim_oc1ref signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM5_CCMR1_Output_OC1M2_B_0x1 = 1;

    /** @brief Output compare 2 mode refer to OC1M description on bits 6:4 */
    using TIM5_CCMR1_Output_OC2M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare mode register 2 [alternate] */
    using TIM5_CCMR2_Input = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER). */
    using TIM5_CCMR2_Input_CC3S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 channel is configured as output (value: 0)
     *          - B_0x1: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 (value: 1)
     *          - B_0x2: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 (value: 2)
     *          - B_0x3: CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC3 channel is configured as output */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC3S_B_0x0 = 0;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC3S_B_0x1 = 1;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC3S_B_0x2 = 2;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC3S_B_0x3 = 3;

    /** @brief Input capture 3 prescaler */
    using TIM5_CCMR2_Input_IC3PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 3 filter */
    using TIM5_CCMR2_Input_IC3F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER). */
    using TIM5_CCMR2_Input_CC4S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 channel is configured as output (value: 0)
     *          - B_0x1: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 (value: 1)
     *          - B_0x2: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 (value: 2)
     *          - B_0x3: CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC4 channel is configured as output */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC4S_B_0x0 = 0;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC4S_B_0x1 = 1;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC4S_B_0x2 = 2;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR2_Input_CC4S_B_0x3 = 3;

    /** @brief Input capture 4 prescaler */
    using TIM5_CCMR2_Input_IC4PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 4 filter */
    using TIM5_CCMR2_Input_IC4F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare mode register 2 [alternate] */
    using TIM5_CCMR2_Output = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER). */
    using TIM5_CCMR2_Output_CC3S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC3 channel is configured as output (value: 0)
     *          - B_0x1: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 (value: 1)
     *          - B_0x2: CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 (value: 2)
     *          - B_0x3: CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC3 channel is configured as output */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC3S_B_0x0 = 0;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC3S_B_0x1 = 1;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC3S_B_0x2 = 2;
        /** @brief CC3 channel is configured as input, tim_ic3 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC3S_B_0x3 = 3;

    /** @brief Output compare 3 fast enable */
    using TIM5_CCMR2_Output_OC3FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 3 preload enable */
    using TIM5_CCMR2_Output_OC3PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 3 mode Refer to OC1M description (bits 6:4 in TIMx_CCMR1 register) */
    using TIM5_CCMR2_Output_OC3M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 3 clear enable */
    using TIM5_CCMR2_Output_OC3CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER). */
    using TIM5_CCMR2_Output_CC4S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC4 channel is configured as output (value: 0)
     *          - B_0x1: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 (value: 1)
     *          - B_0x2: CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 (value: 2)
     *          - B_0x3: CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC4 channel is configured as output */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC4S_B_0x0 = 0;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti4 */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC4S_B_0x1 = 1;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_ti3 */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC4S_B_0x2 = 2;
        /** @brief CC4 channel is configured as input, tim_ic4 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM5_CCMR2_Output_CC4S_B_0x3 = 3;

    /** @brief Output compare 4 fast enable */
    using TIM5_CCMR2_Output_OC4FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 4 preload enable */
    using TIM5_CCMR2_Output_OC4PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 4 mode Refer to OC1M description (bits 6:4 in TIMx_CCMR1 register) */
    using TIM5_CCMR2_Output_OC4M1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 4 clear enable */
    using TIM5_CCMR2_Output_OC4CE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 3 mode Refer to OC1M description (bits 6:4 in TIMx_CCMR1 register) */
    using TIM5_CCMR2_Output_OC3M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 4 mode Refer to OC1M description (bits 6:4 in TIMx_CCMR1 register) */
    using TIM5_CCMR2_Output_OC4M2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare enable register */
    using TIM5_CCER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 output enable. */
    using TIM5_CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / OC1 is not active (value: 0)
     *          - B_0x1: Capture mode enabled / OC1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / OC1 is not active */
    constexpr std::uint16_t TIM5_CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / OC1 signal is output on the corresponding output pin */
    constexpr std::uint16_t TIM5_CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/Compare 1 output Polarity. When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1:	non-inverted/both edges. The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0:	this configuration is reserved, it must not be used. */
    using TIM5_CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM5_CCER_CC1P_B_0x0 = 0;
        /** @brief OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM5_CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/Compare 1 output Polarity. CC1 channel configured as output: CC1NP must be kept cleared in this case. CC1 channel configured as input: This bit is used in conjunction with CC1P to define tim_ti1fp1/tim_ti2fp1 polarity. refer to CC1P description. */
    using TIM5_CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output enable. Refer to CC1E description */
    using TIM5_CCER_CC2E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output Polarity. refer to CC1P description */
    using TIM5_CCER_CC2P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output Polarity. Refer to CC1NP description */
    using TIM5_CCER_CC2NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 output enable. Refer to CC1E description */
    using TIM5_CCER_CC3E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 output Polarity. Refer to CC1P description */
    using TIM5_CCER_CC3P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 3 output Polarity. Refer to CC1NP description */
    using TIM5_CCER_CC3NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 output enable. refer to CC1E description */
    using TIM5_CCER_CC4E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 output Polarity. Refer to CC1P description */
    using TIM5_CCER_CC4P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 4 output Polarity. Refer to CC1NP description */
    using TIM5_CCER_CC4NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 counter */
    using TIM5_CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief or UIFCPY: Value depends on IUFREMAP in TIMx_CR1. If UIFREMAP = 0 nullMost significant bit of counter value If UIFREMAP = 1 UIFCPY: UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register nullLeast significant part of counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register holds the non-dithered part in CNT[30:0]. The fractional part is not available. */
    using TIM5_CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 prescaler */
    using TIM5_PSC = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value The counter clock frequency tim_cnt_ck is equal to ftim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in 'reset mode'). */
    using TIM5_PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 auto-reload register */
    using TIM5_ARR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[31:4]. The ARR[3:0] bitfield contains the dithered part. */
    using TIM5_ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare register 1 */
    using TIM5_CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc1 output. Non-dithering mode (DITHEN = 0) The register holds the compare value. Dithering mode (DITHEN = 1) The register holds the integer part in CCR1[31:4]. The CCR1[3:0] bitfield contains the dithered part. If channel CC1 is configured as input: CCR1 is the counter value transferred by the last input capture 1 event (tim_ic1). The TIMx_CCR1 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value. Dithering mode (DITHEN = 1) The register holds the capture in CCR1[31:0]. The CCR1[3:0] bits are reset. */
    using TIM5_CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare register 2 */
    using TIM5_CCR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc2 output. Non-dithering mode (DITHEN = 0) The register holds the compare value. Dithering mode (DITHEN = 1) The register holds the integer part in CCR2[31:4]. The CCR2[3:0] bitfield contains the dithered part. If channel CC2 is configured as input: CCR2 is the counter value transferred by the last input capture 2 event (tim_ic2). The TIMx_CCR2 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value. Dithering mode (DITHEN = 1) The register holds the capture in CCR2[31:0]. The CCR2[3:0] bits are reset. */
    using TIM5_CCR2_CCR2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare register 3 */
    using TIM5_CCR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 3 value If channel CC3 is configured as output: CCR3 is the value to be loaded in the actual capture/compare 3 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR3 register (bit OC3PE). Else the preload value is copied in the active capture/compare 3 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc3 output. Non-dithering mode (DITHEN = 0) The register holds the compare value. Dithering mode (DITHEN = 1) The register holds the integer part in CCR3[31:4]. The CCR3[3:0] bitfield contains the dithered part. If channel CC3 is configured as input: CCR3 is the counter value transferred by the last input capture 3 event (tim_ic3). The TIMx_CCR3 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value. Dithering mode (DITHEN = 1) The register holds the capture in CCR3[31:0]. The CCR3[3:0] bits are reset. */
    using TIM5_CCR3_CCR3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 capture/compare register 4 */
    using TIM5_CCR4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 4 value If channel CC4 is configured as output: CCR4 is the value to be loaded in the actual capture/compare 4 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR4 register (bit OC4PE). Else the preload value is copied in the active capture/compare 4 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc4 output. Non-dithering mode (DITHEN = 0) The register holds the compare value. Dithering mode (DITHEN = 1) The register holds the integer part in CCR4[31:4]. The CCR4[3:0] bitfield contains the dithered part. If channel CC4 is configured as input: CCR4 is the counter value transferred by the last input capture 4 event (tim_ic4). The TIMx_CCR4 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value. Dithering mode (DITHEN = 1) The register holds the capture in CCR4[31:0]. The CCR4[3:0] bits are reset. */
    using TIM5_CCR4_CCR4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 timer encoder control register */
    using TIM5_ECR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Index enable This bit indicates if the Index event resets the counter. */
    using TIM5_ECR_IE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index disabled (value: 0)
     *          - B_0x1: Index enabled (value: 1)
     */
        /** @brief Index disabled */
    constexpr std::uint32_t TIM5_ECR_IE_B_0x0 = 0;
        /** @brief Index enabled */
    constexpr std::uint32_t TIM5_ECR_IE_B_0x1 = 1;

    /** @brief Index direction This bit indicates in which direction the Index event resets the counter. Note: The IDR[1:0] bitfield must be written when IE bit is reset (index disabled). */
    using TIM5_ECR_IDIR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index resets the counter whatever the direction (value: 0)
     *          - B_0x1: Index resets the counter when up-counting only (value: 1)
     *          - B_0x2: Index resets the counter when down-counting only (value: 2)
     */
        /** @brief Index resets the counter whatever the direction */
    constexpr std::uint32_t TIM5_ECR_IDIR_B_0x0 = 0;
        /** @brief Index resets the counter when up-counting only */
    constexpr std::uint32_t TIM5_ECR_IDIR_B_0x1 = 1;
        /** @brief Index resets the counter when down-counting only */
    constexpr std::uint32_t TIM5_ECR_IDIR_B_0x2 = 2;

    /** @brief Index blanking This bit indicates if the Index event is conditioned by the tim_ti3 input */
    using TIM5_ECR_IBLK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index always active (value: 0)
     *          - B_0x1: Index disabled hen tim_ti3 input is active, as per CC3P bitfield (value: 1)
     *          - B_0x2: Index disabled when tim_ti4 input is active, as per CC4P bitfield (value: 2)
     */
        /** @brief Index always active */
    constexpr std::uint32_t TIM5_ECR_IBLK_B_0x0 = 0;
        /** @brief Index disabled hen tim_ti3 input is active, as per CC3P bitfield */
    constexpr std::uint32_t TIM5_ECR_IBLK_B_0x1 = 1;
        /** @brief Index disabled when tim_ti4 input is active, as per CC4P bitfield */
    constexpr std::uint32_t TIM5_ECR_IBLK_B_0x2 = 2;

    /** @brief First index This bit indicates if the first index only is taken into account */
    using TIM5_ECR_FIDX = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index is always active (value: 0)
     *          - B_0x1: the first Index only resets the counter (value: 1)
     */
        /** @brief Index is always active */
    constexpr std::uint32_t TIM5_ECR_FIDX_B_0x0 = 0;
        /** @brief the first Index only resets the counter */
    constexpr std::uint32_t TIM5_ECR_FIDX_B_0x1 = 1;

    /** @brief Index positioning In quadrature encoder mode (SMS[3:0] = 0001, 0010, 0011, 1110, 1111), this bit indicates in which AB input configuration the Index event resets the counter. In directional clock mode or clock plus direction mode (SMS[3:0] = 1010, 1011, 1100, 1101), these bits indicates on which level the Index event resets the counter. In bidirectional clock mode, this applies for both clock inputs. x0: Index resets the counter when clock is 0 x1: Index resets the counter when clock is 1 Note: IPOS[1] bit is not significant */
    using TIM5_ECR_IPOS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Index resets the counter when AB = 00 (value: 0)
     *          - B_0x1: Index resets the counter when AB = 01 (value: 1)
     *          - B_0x2: Index resets the counter when AB = 10 (value: 2)
     *          - B_0x3: Index resets the counter when AB = 11 (value: 3)
     */
        /** @brief Index resets the counter when AB = 00 */
    constexpr std::uint32_t TIM5_ECR_IPOS_B_0x0 = 0;
        /** @brief Index resets the counter when AB = 01 */
    constexpr std::uint32_t TIM5_ECR_IPOS_B_0x1 = 1;
        /** @brief Index resets the counter when AB = 10 */
    constexpr std::uint32_t TIM5_ECR_IPOS_B_0x2 = 2;
        /** @brief Index resets the counter when AB = 11 */
    constexpr std::uint32_t TIM5_ECR_IPOS_B_0x3 = 3;

    /** @brief Pulse width This bitfield defines the pulse duration, as following: tPW = PW[7:0] x tPWG */
    using TIM5_ECR_PW = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Pulse width prescaler This bitfield sets the clock prescaler for the pulse generator, as following: tPWG = (2(PWPRSC[2:0])) x ttim_ker_ck */
    using TIM5_ECR_PWPRSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM5 timer input selection register */
    using TIM5_TISEL = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Selects tim_ti1[0..15] input ... Refer to for product specific implementation. */
    using TIM5_TISEL_TI1SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti1_in0: TIMx_CH1 (value: 0)
     *          - B_0x1: tim_ti1_in1 (value: 1)
     *          - B_0xF: tim_ti1_in15 (value: 15)
     */
        /** @brief tim_ti1_in0: TIMx_CH1 */
    constexpr std::uint32_t TIM5_TISEL_TI1SEL_B_0x0 = 0;
        /** @brief tim_ti1_in1 */
    constexpr std::uint32_t TIM5_TISEL_TI1SEL_B_0x1 = 1;
        /** @brief tim_ti1_in15 */
    constexpr std::uint32_t TIM5_TISEL_TI1SEL_B_0xF = 15;

    /** @brief Selects tim_ti2[0..15] input ... Refer to for product specific implementation. */
    using TIM5_TISEL_TI2SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti2_in0: TIMx_CH2 (value: 0)
     *          - B_0x1: tim_ti2_in1 (value: 1)
     *          - B_0xF: tim_ti2_in15 (value: 15)
     */
        /** @brief tim_ti2_in0: TIMx_CH2 */
    constexpr std::uint32_t TIM5_TISEL_TI2SEL_B_0x0 = 0;
        /** @brief tim_ti2_in1 */
    constexpr std::uint32_t TIM5_TISEL_TI2SEL_B_0x1 = 1;
        /** @brief tim_ti2_in15 */
    constexpr std::uint32_t TIM5_TISEL_TI2SEL_B_0xF = 15;

    /** @brief Selects tim_ti3[0..15] input ... Refer to for product specific implementation. */
    using TIM5_TISEL_TI3SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti3_in0: TIMx_CH3 (value: 0)
     *          - B_0x1: tim_ti3_in1 (value: 1)
     *          - B_0xF: tim_ti3_in15 (value: 15)
     */
        /** @brief tim_ti3_in0: TIMx_CH3 */
    constexpr std::uint32_t TIM5_TISEL_TI3SEL_B_0x0 = 0;
        /** @brief tim_ti3_in1 */
    constexpr std::uint32_t TIM5_TISEL_TI3SEL_B_0x1 = 1;
        /** @brief tim_ti3_in15 */
    constexpr std::uint32_t TIM5_TISEL_TI3SEL_B_0xF = 15;

    /** @brief Selects tim_ti4[0..15] input ... Refer to for product specific implementation. */
    using TIM5_TISEL_TI4SEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ti4_in0: TIMx_CH4 (value: 0)
     *          - B_0x1: tim_ti4_in1 (value: 1)
     *          - B_0xF: tim_ti4_in15 (value: 15)
     */
        /** @brief tim_ti4_in0: TIMx_CH4 */
    constexpr std::uint32_t TIM5_TISEL_TI4SEL_B_0x0 = 0;
        /** @brief tim_ti4_in1 */
    constexpr std::uint32_t TIM5_TISEL_TI4SEL_B_0x1 = 1;
        /** @brief tim_ti4_in15 */
    constexpr std::uint32_t TIM5_TISEL_TI4SEL_B_0xF = 15;

    /** @brief TIM5 alternate function register 1 */
    using TIM5_AF1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief etr_in source selection These bits select the etr_in input source. ... Refer to for product specific implementation. */
    using TIM5_AF1_ETRSEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_etr0: TIMx_ETR input (value: 0)
     *          - B_0x1: tim_etr1 (value: 1)
     *          - B_0xF: tim_etr15 (value: 15)
     */
        /** @brief tim_etr0: TIMx_ETR input */
    constexpr std::uint32_t TIM5_AF1_ETRSEL_B_0x0 = 0;
        /** @brief tim_etr1 */
    constexpr std::uint32_t TIM5_AF1_ETRSEL_B_0x1 = 1;
        /** @brief tim_etr15 */
    constexpr std::uint32_t TIM5_AF1_ETRSEL_B_0xF = 15;

    /** @brief TIM5 alternate function register 2 */
    using TIM5_AF2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief ocref_clr source selection These bits select the ocref_clr input source. ... Refer to for product specific implementation. */
    using TIM5_AF2_OCRSEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_ocref_clr0 (value: 0)
     *          - B_0x1: tim_ocref_clr1 (value: 1)
     *          - B_0x7: tim_ocref_clr7 (value: 7)
     */
        /** @brief tim_ocref_clr0 */
    constexpr std::uint32_t TIM5_AF2_OCRSEL_B_0x0 = 0;
        /** @brief tim_ocref_clr1 */
    constexpr std::uint32_t TIM5_AF2_OCRSEL_B_0x1 = 1;
        /** @brief tim_ocref_clr7 */
    constexpr std::uint32_t TIM5_AF2_OCRSEL_B_0x7 = 7;

    /** @brief TIM5 DMA control register */
    using TIM5_DCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA base address This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... */
    using TIM5_DCR_DBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CR1, (value: 0)
     *          - B_0x1: TIMx_CR2, (value: 1)
     *          - B_0x2: TIMx_SMCR, (value: 2)
     */
        /** @brief TIMx_CR1, */
    constexpr std::uint32_t TIM5_DCR_DBA_B_0x0 = 0;
        /** @brief TIMx_CR2, */
    constexpr std::uint32_t TIM5_DCR_DBA_B_0x1 = 1;
        /** @brief TIMx_SMCR, */
    constexpr std::uint32_t TIM5_DCR_DBA_B_0x2 = 2;

    /** @brief DMA burst length This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... Example: Let us consider the following transfer: DBL = 7 bytes & DBA = TIM2_CR1. If DBL = 7 bytes and DBA = TIM2_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation: (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data are copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA According to the configuration of the DMA Data Size, several cases may occur: If the DMA Data Size is configured in half-words, 16-bit data are transferred to each of the 7 registers. If the DMA Data Size is configured in bytes, the data are also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA. */
    using TIM5_DCR_DBL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: 1 transfer (value: 0)
     *          - B_0x1: 2 transfers (value: 1)
     *          - B_0x2: 3 transfers (value: 2)
     *          - B_0x1A: 26 transfers (value: 26)
     */
        /** @brief 1 transfer */
    constexpr std::uint32_t TIM5_DCR_DBL_B_0x0 = 0;
        /** @brief 2 transfers */
    constexpr std::uint32_t TIM5_DCR_DBL_B_0x1 = 1;
        /** @brief 3 transfers */
    constexpr std::uint32_t TIM5_DCR_DBL_B_0x2 = 2;
        /** @brief 26 transfers */
    constexpr std::uint32_t TIM5_DCR_DBL_B_0x1A = 26;

    /** @brief DMA burst source selection This bitfield defines the interrupt source that triggers the DMA burst transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). Others: reserved */
    using TIM5_DCR_DBSS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x1: Update (value: 1)
     *          - B_0x2: CC1 (value: 2)
     *          - B_0x3: CC2 (value: 3)
     *          - B_0x4: CC3 (value: 4)
     *          - B_0x5: CC4 (value: 5)
     *          - B_0x6: COM (value: 6)
     *          - B_0x7: Trigger (value: 7)
     */
        /** @brief Update */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x1 = 1;
        /** @brief CC1 */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x2 = 2;
        /** @brief CC2 */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x3 = 3;
        /** @brief CC3 */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x4 = 4;
        /** @brief CC4 */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x5 = 5;
        /** @brief COM */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x6 = 6;
        /** @brief Trigger */
    constexpr std::uint32_t TIM5_DCR_DBSS_B_0x7 = 7;

    /** @brief TIM5 DMA address for full transfer */
    using TIM5_DMAR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR). */
    using TIM5_DMAR_DMAB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
}

#endif
