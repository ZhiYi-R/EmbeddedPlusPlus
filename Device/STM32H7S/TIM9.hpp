/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32H7S_TIM9_HPP
#define EMBEDDED_PP_STM32H7S_TIM9_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief General-purpose timers */
namespace STM32H7S::TIM9 {

    /** @brief TIM9 control register 1 */
    using TIM9_CR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable CEN is cleared automatically in one-pulse mode, when an update event occurs. Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. */
    using TIM9_CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint16_t TIM9_CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint16_t TIM9_CR1_CEN_B_0x1 = 1;

    /** @brief Update disable This bit is set and cleared by software to enable/disable update event (UEV) generation. Counter overflow Setting the UG bit Buffered registers are then loaded with their preload values. */
    using TIM9_CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. An UEV is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. No UEV is generated, shadow registers keep their value (ARR, PSC, CCRx). The counter and the prescaler are reinitialized if the UG bit is set. (value: 1)
     */
        /** @brief UEV enabled. An UEV is generated by one of the following events: */
    constexpr std::uint16_t TIM9_CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. No UEV is generated, shadow registers keep their value (ARR, PSC, CCRx). The counter and the prescaler are reinitialized if the UG bit is set. */
    constexpr std::uint16_t TIM9_CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow Setting the UG bit Update generation through the slave mode controller */
    using TIM9_CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generates an update interrupt if enabled. These events can be: (value: 0)
     *          - B_0x1: Only counter overflow generates an update interrupt if enabled. (value: 1)
     */
        /** @brief Any of the following events generates an update interrupt if enabled. These events can be: */
    constexpr std::uint16_t TIM9_CR1_URS_B_0x0 = 0;
        /** @brief Only counter overflow generates an update interrupt if enabled. */
    constexpr std::uint16_t TIM9_CR1_URS_B_0x1 = 1;

    /** @brief One-pulse mode */
    using TIM9_CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped on the update event (value: 0)
     *          - B_0x1: Counter stops counting on the next update event (clearing the CEN bit). (value: 1)
     */
        /** @brief Counter is not stopped on the update event */
    constexpr std::uint16_t TIM9_CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting on the next update event (clearing the CEN bit). */
    constexpr std::uint16_t TIM9_CR1_OPM_B_0x1 = 1;

    /** @brief Auto-reload preload enable */
    using TIM9_CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered. (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered. (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered. */
    constexpr std::uint16_t TIM9_CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered. */
    constexpr std::uint16_t TIM9_CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and sampling clock used by the digital filters (tim_tix), */
    using TIM9_CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: t<sub>DTS</sub> = t<sub>tim_ker_ck</sub> (value: 0)
     *          - B_0x1: t<sub>DTS</sub> = 2 t<sub>tim_ker_ck</sub> (value: 1)
     *          - B_0x2: t<sub>DTS</sub> = 4 t<sub>tim_ker_ck</sub> (value: 2)
     *          - B_0x3: FIELD Reserved (value: 3)
     */
        /** @brief t<sub>DTS</sub> = t<sub>tim_ker_ck</sub> */
    constexpr std::uint16_t TIM9_CR1_CKD_B_0x0 = 0;
        /** @brief t<sub>DTS</sub> = 2 t<sub>tim_ker_ck</sub> */
    constexpr std::uint16_t TIM9_CR1_CKD_B_0x1 = 1;
        /** @brief t<sub>DTS</sub> = 4 t<sub>tim_ker_ck</sub> */
    constexpr std::uint16_t TIM9_CR1_CKD_B_0x2 = 2;
        /** @brief FIELD Reserved */
    constexpr std::uint16_t TIM9_CR1_CKD_B_0x3 = 3;

    /** @brief UIF status bit remapping */
    using TIM9_CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM9_CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM9_CR1_UIFREMAP_B_0x1 = 1;

    /** @brief Dithering enable Note: The DITHEN bit can only be modified when CEN bit is reset. */
    using TIM9_CR1_DITHEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Dithering disabled (value: 0)
     *          - B_0x1: Dithering enabled (value: 1)
     */
        /** @brief Dithering disabled */
    constexpr std::uint16_t TIM9_CR1_DITHEN_B_0x0 = 0;
        /** @brief Dithering enabled */
    constexpr std::uint16_t TIM9_CR1_DITHEN_B_0x1 = 1;

    /** @brief TIM12 control register 2 */
    using TIM9_CR2 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: */
    using TIM9_CR2_MMS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable - the Counter Enable signal CNT_EN is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). (value: 1)
     *          - B_0x2: Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. (value: 2)
     *          - B_0x3: Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo). (value: 3)
     *          - B_0x4: Compare - tim_oc1refc signal is used as trigger output (tim_trgo). (value: 4)
     *          - B_0x5: Compare - tim_oc2refc signal is used as trigger output (tim_trgo). (value: 5)
     */
        /** @brief Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset. */
    constexpr std::uint16_t TIM9_CR2_MMS_B_0x0 = 0;
        /** @brief Enable - the Counter Enable signal CNT_EN is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). */
    constexpr std::uint16_t TIM9_CR2_MMS_B_0x1 = 1;
        /** @brief Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer. */
    constexpr std::uint16_t TIM9_CR2_MMS_B_0x2 = 2;
        /** @brief Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo). */
    constexpr std::uint16_t TIM9_CR2_MMS_B_0x3 = 3;
        /** @brief Compare - tim_oc1refc signal is used as trigger output (tim_trgo). */
    constexpr std::uint16_t TIM9_CR2_MMS_B_0x4 = 4;
        /** @brief Compare - tim_oc2refc signal is used as trigger output (tim_trgo). */
    constexpr std::uint16_t TIM9_CR2_MMS_B_0x5 = 5;

    /** @brief tim_ti1 selection */
    using TIM9_CR2_TI1S = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The tim_ti1_in[15:0] multiplexer output is connected to tim_ti1 input (value: 0)
     *          - B_0x1: The tim_ti1_in[15:0] and tim_ti2_in[15:0] multiplexers output are connected to the tim_ti1 input (XOR combination) (value: 1)
     */
        /** @brief The tim_ti1_in[15:0] multiplexer output is connected to tim_ti1 input */
    constexpr std::uint16_t TIM9_CR2_TI1S_B_0x0 = 0;
        /** @brief The tim_ti1_in[15:0] and tim_ti2_in[15:0] multiplexers output are connected to the tim_ti1 input (XOR combination) */
    constexpr std::uint16_t TIM9_CR2_TI1S_B_0x1 = 1;

    /** @brief TIM9 slave mode control register */
    using TIM9_SMCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief SMS[0]: Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Other codes: reserved. Note: The gated mode (including gated + reset mode) must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC,...) receiving the tim_trgo signals must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM9_SMCR_SMS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x1: FIELD Reserved (value: 1)
     *          - B_0x2: FIELD Reserved (value: 2)
     *          - B_0x3: FIELD Reserved (value: 3)
     *          - B_0x4: Reset Mode - Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. (value: 4)
     *          - B_0x5: Gated Mode - The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. (value: 5)
     *          - B_0x6: Trigger Mode - The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. (value: 6)
     *          - B_0x7: External Clock Mode 1 - Rising edges of the selected trigger (tim_trgi) clock the counter. (value: 7)
     */
        /** @brief Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x0 = 0;
        /** @brief FIELD Reserved */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x1 = 1;
        /** @brief FIELD Reserved */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x2 = 2;
        /** @brief FIELD Reserved */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x3 = 3;
        /** @brief Reset Mode - Rising edge of the selected trigger input (tim_trgi) reinitializes the counter and generates an update of the registers. */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x4 = 4;
        /** @brief Gated Mode - The counter clock is enabled when the trigger input (tim_trgi) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x5 = 5;
        /** @brief Trigger Mode - The counter starts at a rising edge of the trigger tim_trgi (but it is not reset). Only the start of the counter is controlled. */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x6 = 6;
        /** @brief External Clock Mode 1 - Rising edges of the selected trigger (tim_trgi) clock the counter. */
    constexpr std::uint32_t TIM9_SMCR_SMS_B_0x7 = 7;

    /** @brief TS[0]: Trigger selection This TS[4:0] bitfield selects the trigger input to be used to synchronize the counter. Others: Reserved See Table 658: TIMx internal trigger connection for more details on the meaning of tim_itrx for each timer. Note: These bits must be changed only when they are not used (for example when SMS=000) to avoid wrong edge detections at the transition. */
    using TIM9_SMCR_TS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal Trigger 0 (tim_itr0) (value: 0)
     *          - B_0x1: Internal Trigger 1 (tim_itr1) (value: 1)
     *          - B_0x2: Internal Trigger 2 (tim_itr2) (value: 2)
     *          - B_0x3: Internal Trigger 3 (tim_itr3) (value: 3)
     *          - B_0x4: tim_ti1 Edge Detector (tim_ti1f_ed) (value: 4)
     *          - B_0x5: Filtered Timer Input 1 (tim_ti1fp1) (value: 5)
     *          - B_0x6: Filtered Timer Input 2 (tim_ti2fp2) (value: 6)
     */
        /** @brief Internal Trigger 0 (tim_itr0) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x0 = 0;
        /** @brief Internal Trigger 1 (tim_itr1) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x1 = 1;
        /** @brief Internal Trigger 2 (tim_itr2) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x2 = 2;
        /** @brief Internal Trigger 3 (tim_itr3) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x3 = 3;
        /** @brief tim_ti1 Edge Detector (tim_ti1f_ed) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x4 = 4;
        /** @brief Filtered Timer Input 1 (tim_ti1fp1) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x5 = 5;
        /** @brief Filtered Timer Input 2 (tim_ti2fp2) */
    constexpr std::uint32_t TIM9_SMCR_TS_B_0x6 = 6;

    /** @brief Master/Slave mode */
    using TIM9_SMCR_MSM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful in order to synchronize several timers on a single external event. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t TIM9_SMCR_MSM_B_0x0 = 0;
        /** @brief The effect of an event on the trigger input (tim_trgi) is delayed to allow a perfect synchronization between the current timer and its slaves (through tim_trgo). It is useful in order to synchronize several timers on a single external event. */
    constexpr std::uint32_t TIM9_SMCR_MSM_B_0x1 = 1;

    /** @brief SMS[3] */
    using TIM9_SMCR_SMS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TS[4:3] */
    using TIM9_SMCR_TS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 Interrupt enable register */
    using TIM9_DIER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using TIM9_DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled. (value: 0)
     *          - B_0x1: Update interrupt enabled. (value: 1)
     */
        /** @brief Update interrupt disabled. */
    constexpr std::uint16_t TIM9_DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled. */
    constexpr std::uint16_t TIM9_DIER_UIE_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt enable */
    using TIM9_DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled. (value: 0)
     *          - B_0x1: CC1 interrupt enabled. (value: 1)
     */
        /** @brief CC1 interrupt disabled. */
    constexpr std::uint16_t TIM9_DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled. */
    constexpr std::uint16_t TIM9_DIER_CC1IE_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt enable */
    using TIM9_DIER_CC2IE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 interrupt disabled. (value: 0)
     *          - B_0x1: CC2 interrupt enabled. (value: 1)
     */
        /** @brief CC2 interrupt disabled. */
    constexpr std::uint16_t TIM9_DIER_CC2IE_B_0x0 = 0;
        /** @brief CC2 interrupt enabled. */
    constexpr std::uint16_t TIM9_DIER_CC2IE_B_0x1 = 1;

    /** @brief Trigger interrupt enable */
    using TIM9_DIER_TIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger interrupt disabled. (value: 0)
     *          - B_0x1: Trigger interrupt enabled. (value: 1)
     */
        /** @brief Trigger interrupt disabled. */
    constexpr std::uint16_t TIM9_DIER_TIE_B_0x0 = 0;
        /** @brief Trigger interrupt enabled. */
    constexpr std::uint16_t TIM9_DIER_TIE_B_0x1 = 1;

    /** @brief TIM9 status register */
    using TIM9_SR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer toSection 67.7.3: TIMx slave mode control register (TIMx_SMCR)(x = 9, 12) ), if URS=0 and UDIS=0 in the TIMx_CR1 register. */
    using TIM9_SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred. (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred. */
    constexpr std::uint16_t TIM9_SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint16_t TIM9_SR_UIF_B_0x1 = 1;

    /** @brief Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on tim_ic1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER). */
    using TIM9_SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred. (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint16_t TIM9_SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred. */
    constexpr std::uint16_t TIM9_SR_CC1IF_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt flag refer to CC1IF description */
    using TIM9_SR_CC2IF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on tim_trgi input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software. */
    using TIM9_SR_TIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No trigger event occurred. (value: 0)
     *          - B_0x1: Trigger interrupt pending. (value: 1)
     */
        /** @brief No trigger event occurred. */
    constexpr std::uint16_t TIM9_SR_TIF_B_0x0 = 0;
        /** @brief Trigger interrupt pending. */
    constexpr std::uint16_t TIM9_SR_TIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to 0. */
    using TIM9_SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected. (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected. */
    constexpr std::uint16_t TIM9_SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint16_t TIM9_SR_CC1OF_B_0x1 = 1;

    /** @brief Capture/compare 2 overcapture flag refer to CC1OF description */
    using TIM9_SR_CC2OF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 event generation register */
    using TIM9_EGR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation This bit can be set by software, it is automatically cleared by hardware. */
    using TIM9_EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: Re-initializes the counter and generates an update of the registers. The prescaler counter is also cleared and the prescaler ratio is not affected. The counter is cleared. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM9_EGR_UG_B_0x0 = 0;
        /** @brief Re-initializes the counter and generates an update of the registers. The prescaler counter is also cleared and the prescaler ratio is not affected. The counter is cleared. */
    constexpr std::uint16_t TIM9_EGR_UG_B_0x1 = 1;

    /** @brief Capture/compare 1 generation This bit is set by software to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: the CC1IF flag is set, the corresponding interrupt is sent if enabled. If channel CC1 is configured as input: The current counter value is captured in the TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high. */
    using TIM9_EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM9_EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint16_t TIM9_EGR_CC1G_B_0x1 = 1;

    /** @brief Capture/compare 2 generation refer to CC1G description */
    using TIM9_EGR_CC2G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM9_EGR_TG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The TIF flag is set in the TIMx_SR register. Related interrupt can occur if enabled (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM9_EGR_TG_B_0x0 = 0;
        /** @brief The TIF flag is set in the TIMx_SR register. Related interrupt can occur if enabled */
    constexpr std::uint16_t TIM9_EGR_TG_B_0x1 = 1;

    /** @brief TIM9 capture/compare mode register 1 */
    using TIM9_CCMR1_INPUT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bitfield defines the direction of the channel (input/output) as well as the used input. Note: The CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using TIM9_CCMR1_INPUT_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC1S_B_0x3 = 3;

    /** @brief Input capture 1 prescaler This bitfield defines the ratio of the prescaler acting on the CC1 input (tim_ic1). The prescaler is reset as soon as CC1E=0 (TIMx_CCER register). */
    using TIM9_CCMR1_INPUT_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter This bitfield defines the frequency used to sample the tim_ti1 input and the length of the digital filter applied to tim_ti1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM9_CCMR1_INPUT_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at f<sub>DTS</sub> (value: 0)
     *          - B_0x1: f<sub>SAMPLING</sub>=f<sub>tim_ker_ck</sub>, N=2 (value: 1)
     *          - B_0x2: f<sub>SAMPLING</sub>=f<sub>tim_ker_ck</sub>, N=4 (value: 2)
     *          - B_0x3: f<sub>SAMPLING</sub>=f<sub>tim_ker_ck</sub>, N=8 (value: 3)
     *          - B_0x4: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=6 (value: 4)
     *          - B_0x5: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=8 (value: 5)
     *          - B_0x6: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=6 (value: 6)
     *          - B_0x7: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=8 (value: 7)
     *          - B_0x8: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=6 (value: 8)
     *          - B_0x9: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=8 (value: 9)
     *          - B_0xA: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=5 (value: 10)
     *          - B_0xB: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=6 (value: 11)
     *          - B_0xC: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=8 (value: 12)
     *          - B_0xD: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=5 (value: 13)
     *          - B_0xE: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=6 (value: 14)
     *          - B_0xF: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at f<sub>DTS</sub> */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x0 = 0;
        /** @brief f<sub>SAMPLING</sub>=f<sub>tim_ker_ck</sub>, N=2 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x1 = 1;
        /** @brief f<sub>SAMPLING</sub>=f<sub>tim_ker_ck</sub>, N=4 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x2 = 2;
        /** @brief f<sub>SAMPLING</sub>=f<sub>tim_ker_ck</sub>, N=8 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x3 = 3;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=6 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x4 = 4;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=8 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x5 = 5;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=6 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x6 = 6;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=8 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x7 = 7;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=6 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x8 = 8;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=8 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0x9 = 9;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=5 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0xA = 10;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=6 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0xB = 11;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=8 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0xC = 12;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=5 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0xD = 13;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=6 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0xE = 14;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=8 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_IC1F_B_0xF = 15;

    /** @brief Capture/compare 2 selection This bitfield defines the direction of the channel (input/output) as well as the used input. Note: The CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER). */
    using TIM9_CCMR1_INPUT_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, IC2 is mapped on tim_ti2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, IC2 is mapped on tim_ti1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, IC2 is mapped on tim_trc. This mode works only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, IC2 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, IC2 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, IC2 is mapped on tim_trc. This mode works only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM9_CCMR1_INPUT_CC2S_B_0x3 = 3;

    /** @brief Input capture 2 prescaler */
    using TIM9_CCMR1_INPUT_IC2PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 2 filter */
    using TIM9_CCMR1_INPUT_IC2F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 capture/compare mode register 1 */
    using TIM9_CCMR1_OUTPUT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bitfield defines the direction of the channel (input/output) as well as the used input. Note: The CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using TIM9_CCMR1_OUTPUT_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode works only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, tim_ic1 is mapped on tim_trc. This mode works only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC1S_B_0x3 = 3;

    /** @brief Output compare 1 fast enable This bit is used to accelerate the effect of an event on the trigger in input on the CC output. */
    using TIM9_CCMR1_OUTPUT_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on the counter and CCR1 values even when the trigger is ON. The minimum delay to activate the CC1 output when an edge occurs on the trigger input is 5 clock cycles (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on the CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on the counter and CCR1 values even when the trigger is ON. The minimum delay to activate the CC1 output when an edge occurs on the trigger input is 5 clock cycles */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on the CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1FE_B_0x1 = 1;

    /** @brief Output compare 1 preload enable */
    using TIM9_CCMR1_OUTPUT_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken into account immediately (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded into the active register at each update event (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken into account immediately */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded into the active register at each update event */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1PE_B_0x1 = 1;

    /** @brief OC1M[2:0]: Output compare 1 mode (refer to bit 16 for OC1M[3]) These bits define the behavior of the output reference signal tim_oc1ref from which tim_oc1 is derived. tim_oc1ref is active high whereas the active level of tim_oc1 depends on the CC1P. Note: In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from frozen mode to PWM mode. */
    using TIM9_CCMR1_OUTPUT_OC1M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. The tim_oc1ref signal is forced high when the TIMx_CNT counter matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. The tim_oc1ref signal is forced low when the TIMx_CNT counter matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggle - tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1 (value: 3)
     *          - B_0x4: Force inactive level - tim_oc1ref is forced low (value: 4)
     *          - B_0x5: Force active level - tim_oc1ref is forced high (value: 5)
     *          - B_0x6: PWM mode 1 - channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else it is inactive (value: 6)
     *          - B_0x7: PWM mode 2 - channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else it is active (value: 7)
     */
        /** @brief Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base). */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. The tim_oc1ref signal is forced high when the TIMx_CNT counter matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. The tim_oc1ref signal is forced low when the TIMx_CNT counter matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x2 = 2;
        /** @brief Toggle - tim_oc1ref toggles when TIMx_CNT=TIMx_CCR1 */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x3 = 3;
        /** @brief Force inactive level - tim_oc1ref is forced low */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x4 = 4;
        /** @brief Force active level - tim_oc1ref is forced high */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x5 = 5;
        /** @brief PWM mode 1 - channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else it is inactive */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x6 = 6;
        /** @brief PWM mode 2 - channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else it is active */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_OC1M_B_0x7 = 7;

    /** @brief Capture/Compare 2 selection This bitfield defines the direction of the channel (input/output) as well as the used input. Note: The CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER). */
    using TIM9_CCMR1_OUTPUT_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, IC2 is mapped on tim_ti2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, IC2 is mapped on tim_ti1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, IC2 is mapped on tim_trc. This mode works only if an internal trigger input is selected through the TS bit (TIMx_SMCR register (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, IC2 is mapped on tim_ti2 */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, IC2 is mapped on tim_ti1 */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, IC2 is mapped on tim_trc. This mode works only if an internal trigger input is selected through the TS bit (TIMx_SMCR register */
    constexpr std::uint32_t TIM9_CCMR1_OUTPUT_CC2S_B_0x3 = 3;

    /** @brief Output compare 2 fast enable */
    using TIM9_CCMR1_OUTPUT_OC2FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output compare 2 preload enable */
    using TIM9_CCMR1_OUTPUT_OC2PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC2M[2:0]: Output compare 2 mode Refer to OC1M[3:0] for bit description. */
    using TIM9_CCMR1_OUTPUT_OC2M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC1M[3] */
    using TIM9_CCMR1_OUTPUT_OC1M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC2M[3] */
    using TIM9_CCMR1_OUTPUT_OC2M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 capture/compare enable register */
    using TIM9_CCER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 output enable. */
    using TIM9_CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / tim_oc1 is not active (value: 0)
     *          - B_0x1: Capture mode enabled / tim_oc1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / tim_oc1 is not active */
    constexpr std::uint16_t TIM9_CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / tim_oc1 signal is output on the corresponding output pin */
    constexpr std::uint16_t TIM9_CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/Compare 1 output Polarity. When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of tim_ti1fp1 and tim_ti2fp1 for trigger or capture operations. CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to tim_tixfp1 rising edge (capture or trigger operations in reset, external clock or trigger mode), tim_tixfp1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to tim_tixfp1 falling edge (capture or trigger operations in reset, external clock or trigger mode), tim_tixfp1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both tim_tixfp1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), tim_tixfp1 is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0:	This configuration is reserved, it must not be used. */
    using TIM9_CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: tim_oc1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: tim_oc1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief tim_oc1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM9_CCER_CC1P_B_0x0 = 0;
        /** @brief tim_oc1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM9_CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/Compare 1 complementary output Polarity CC1 channel configured as output: CC1NP must be kept cleared CC1 channel configured as input: CC1NP is used in conjunction with CC1P to define tim_ti1fp1/tim_ti2fp1 polarity (refer to CC1P description). */
    using TIM9_CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output enable Refer to CC1E description */
    using TIM9_CCER_CC2E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output Polarity Refer to CC1P description */
    using TIM9_CCER_CC2P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output Polarity Refer to CC1NP description */
    using TIM9_CCER_CC2NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 counter */
    using TIM9_CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register only holds the non-dithered part in CNT[15:0]. The fractional part is not available. */
    using TIM9_CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief UIF Copy This bit is a read-only copy of the UIF bit in the TIMx_ISR register. */
    using TIM9_CNT_UIFCPY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 prescaler */
    using TIM9_PSC = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value The counter clock frequency tim_cnt_ck is equal to f<sub>tim_psc_ck</sub> / (PSC[15:0] + 1). PSC contains the value to be loaded into the active prescaler register at each update event. (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in reset mode). */
    using TIM9_PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 auto-reload register */
    using TIM9_ARR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the Section 67.4.3: Time-base unit on page 3951 for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value in ARR[15:0]. The ARR[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part. */
    using TIM9_ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 capture/compare register 1 */
    using TIM9_CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on tim_oc1 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR1[15:0]. The CCR1[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR1[19:4]. The CCR1[3:0] bitfield contains the dithered part. If channel CC1 is configured as input: CR1 is the counter value transferred by the last input capture 1 event (tim_ic1). The TIMx_CCR1 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR1[15:0]. The CCR1[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR1[19:4]. The CCR1[3:0] bits are reset. */
    using TIM9_CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 capture/compare register 2 */
    using TIM9_CCR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on tim_oc2 output. Non-dithering mode (DITHEN = 0) The register holds the compare value in CCR2[15:0]. The CCR2[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the integer part in CCR2[19:4]. The CCR2[3:0] bitfield contains the dithered part. If channel CC2 is configured as input: CCR2 is the counter value transferred by the last input capture 1 event (tim_ic2). The TIMx_CCR2 register is read-only and cannot be programmed. Non-dithering mode (DITHEN = 0) The register holds the capture value in CCR2[15:0]. The CCR2[19:16] bits are reset. Dithering mode (DITHEN = 1) The register holds the capture in CCR2[19:4]. The CCR2[3:0] bits are reset. */
    using TIM9_CCR2_CCR2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM9 timer input selection register */
    using TIM9_TISEL = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief selects tim_ti1_in[15:0] input ... Refer to Table 656: Interconnect to the tim_ti1 input multiplexer for interconnects list. */
    using TIM9_TISEL_TI1SEL = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CH1 input (tim_ti1_in0) (value: 0)
     *          - B_0x1: tim_ti1_in1 (value: 1)
     *          - B_0xF: tim_ti1_in15 (value: 15)
     */
        /** @brief TIMx_CH1 input (tim_ti1_in0) */
    constexpr std::uint16_t TIM9_TISEL_TI1SEL_B_0x0 = 0;
        /** @brief tim_ti1_in1 */
    constexpr std::uint16_t TIM9_TISEL_TI1SEL_B_0x1 = 1;
        /** @brief tim_ti1_in15 */
    constexpr std::uint16_t TIM9_TISEL_TI1SEL_B_0xF = 15;

    /** @brief selects tim_ti2_in[15:0] input ... Refer to Table 657: Interconnect to the tim_ti2 input multiplexer for interconnects list. */
    using TIM9_TISEL_TI2SEL = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CH2 input (tim_ti2_in0) (value: 0)
     *          - B_0x1: tim_ti2_in1 (value: 1)
     *          - B_0x4: tim_ti2_in15 (value: 4)
     */
        /** @brief TIMx_CH2 input (tim_ti2_in0) */
    constexpr std::uint16_t TIM9_TISEL_TI2SEL_B_0x0 = 0;
        /** @brief tim_ti2_in1 */
    constexpr std::uint16_t TIM9_TISEL_TI2SEL_B_0x1 = 1;
        /** @brief tim_ti2_in15 */
    constexpr std::uint16_t TIM9_TISEL_TI2SEL_B_0x4 = 4;

}

#endif
