/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32L4S9_GFXMMU_HPP
#define EMBEDDED_PP_STM32L4S9_GFXMMU_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief Graphic MMU */
namespace STM32L4S9::GFXMMU {

    /** @brief Graphic MMU configuration register */
    using CR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 0 overflow interrupt enable */
    using CR_B0OIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 1 overflow interrupt enable */
    using CR_B1OIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 2 overflow interrupt enable */
    using CR_B2OIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 3 overflow interrupt enable */
    using CR_B3OIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief AHB master error interrupt enable */
    using CR_AMEIE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief 192 Block mode */
    using CR_BM192 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU status register */
    using SR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 0 overflow flag */
    using SR_B0OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 1 overflow flag */
    using SR_B1OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 2 overflow flag */
    using SR_B2OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Buffer 3 overflow flag */
    using SR_B3OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief AHB master error flag */
    using SR_AMEF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU flag clear register */
    using FCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Clear buffer 0 overflow flag */
    using FCR_CB0OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Clear buffer 1 overflow flag */
    using FCR_CB1OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Clear buffer 2 overflow flag */
    using FCR_CB2OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Clear buffer 3 overflow flag */
    using FCR_CB3OF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Clear AHB master error flag */
    using FCR_CAMEF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU default value register */
    using DVR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Default value */
    using DVR_DV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU buffer 0 configuration register */
    using B0CR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer offset */
    using B0CR_PBO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 19, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer base address */
    using B0CR_PBBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 9, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU buffer 1 configuration register */
    using B1CR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer offset */
    using B1CR_PBO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 19, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer base address */
    using B1CR_PBBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 9, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU buffer 2 configuration register */
    using B2CR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer offset */
    using B2CR_PBO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 19, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer base address */
    using B2CR_PBBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 9, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU buffer 3 configuration register */
    using B3CR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer offset */
    using B3CR_PBO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 19, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Physical buffer base address */
    using B3CR_PBBA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 9, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU version register */
    using VERR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xFF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Minor revision */
    using VERR_MINREV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Major revision */
    using VERR_MAJREV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU identification register */
    using IPIDR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xFF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Identification Code */
    using IPIDR_ID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU size identification register */
    using SIDR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xFFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Size and ID */
    using SIDR_SID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 0 low */
    using LUT0L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1000, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT0L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT0L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT0L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1 low */
    using LUT1L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1008, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 2 low */
    using LUT2L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1010, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT2L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT2L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT2L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 3 low */
    using LUT3L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1018, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT3L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT3L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT3L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 4 low */
    using LUT4L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1020, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT4L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT4L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT4L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 5 low */
    using LUT5L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1028, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT5L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT5L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT5L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 6 low */
    using LUT6L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1030, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT6L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT6L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT6L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 7 low */
    using LUT7L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1038, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT7L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT7L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT7L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 8 low */
    using LUT8L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1040, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT8L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT8L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT8L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 9 low */
    using LUT9L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1048, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT9L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT9L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT9L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 10 low */
    using LUT10L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1050, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT10L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT10L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT10L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 11 low */
    using LUT11L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1058, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT11L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT11L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT11L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 12 low */
    using LUT12L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1060, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT12L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT12L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT12L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 13 low */
    using LUT13L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1068, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT13L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT13L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT13L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 14 low */
    using LUT14L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1070, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT14L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT14L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT14L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 15 low */
    using LUT15L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1078, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT15L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT15L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT15L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 16 low */
    using LUT16L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1080, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT16L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT16L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT16L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 17 low */
    using LUT17L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1088, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT17L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT17L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT17L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 18 low */
    using LUT18L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1090, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT18L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT18L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT18L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 19 low */
    using LUT19L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1098, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT19L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT19L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT19L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 20 low */
    using LUT20L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT20L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT20L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT20L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 21 low */
    using LUT21L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT21L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT21L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT21L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 22 low */
    using LUT22L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT22L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT22L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT22L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 23 low */
    using LUT23L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT23L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT23L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT23L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 24 low */
    using LUT24L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT24L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT24L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT24L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 25 low */
    using LUT25L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT25L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT25L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT25L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 26 low */
    using LUT26L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT26L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT26L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT26L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 27 low */
    using LUT27L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT27L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT27L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT27L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 28 low */
    using LUT28L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT28L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT28L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT28L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 29 low */
    using LUT29L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT29L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT29L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT29L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 30 low */
    using LUT30L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT30L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT30L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT30L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 31 low */
    using LUT31L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT31L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT31L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT31L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 32 low */
    using LUT32L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1100, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT32L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT32L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT32L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 33 low */
    using LUT33L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1108, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT33L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT33L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT33L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 34 low */
    using LUT34L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1110, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT34L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT34L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT34L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 35 low */
    using LUT35L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1118, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT35L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT35L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT35L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 36 low */
    using LUT36L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1120, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT36L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT36L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT36L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 37 low */
    using LUT37L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1128, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT37L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT37L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT37L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 38 low */
    using LUT38L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1130, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT38L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT38L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT38L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 39 low */
    using LUT39L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1138, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT39L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT39L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT39L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 40 low */
    using LUT40L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1140, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT40L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT40L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT40L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 41 low */
    using LUT41L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1148, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT41L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT41L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT41L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 42 low */
    using LUT42L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1150, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT42L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT42L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT42L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 43 low */
    using LUT43L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1158, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT43L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT43L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT43L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 44 low */
    using LUT44L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1160, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT44L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT44L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT44L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 45 low */
    using LUT45L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1168, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT45L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT45L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT45L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 46 low */
    using LUT46L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1170, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT46L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT46L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT46L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 47 low */
    using LUT47L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1178, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT47L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT47L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT47L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 48 low */
    using LUT48L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1180, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT48L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT48L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT48L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 49 low */
    using LUT49L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1188, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT49L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT49L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT49L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 50 low */
    using LUT50L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1190, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT50L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT50L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT50L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 51 low */
    using LUT51L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1198, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT51L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT51L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT51L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 52 low */
    using LUT52L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT52L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT52L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT52L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 53 low */
    using LUT53L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT53L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT53L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT53L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 54 low */
    using LUT54L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT54L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT54L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT54L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 55 low */
    using LUT55L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT55L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT55L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT55L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 56 low */
    using LUT56L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT56L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT56L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT56L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 57 low */
    using LUT57L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT57L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT57L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT57L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 58 low */
    using LUT58L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT58L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT58L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT58L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 59 low */
    using LUT59L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT59L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT59L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT59L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 60 low */
    using LUT60L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT60L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT60L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT60L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 61 low */
    using LUT61L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT61L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT61L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT61L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 62 low */
    using LUT62L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT62L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT62L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT62L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 63 low */
    using LUT63L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT63L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT63L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT63L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 64 low */
    using LUT64L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1200, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT64L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT64L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT64L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 65 low */
    using LUT65L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1208, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT65L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT65L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT65L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 66 low */
    using LUT66L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1210, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT66L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT66L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT66L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 67 low */
    using LUT67L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1218, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT67L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT67L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT67L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 68 low */
    using LUT68L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1220, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT68L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT68L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT68L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 69 low */
    using LUT69L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1228, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT69L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT69L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT69L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 70 low */
    using LUT70L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1230, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT70L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT70L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT70L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 71 low */
    using LUT71L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1238, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT71L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT71L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT71L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 72 low */
    using LUT72L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1240, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT72L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT72L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT72L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 73 low */
    using LUT73L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1248, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT73L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT73L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT73L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 74 low */
    using LUT74L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1250, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT74L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT74L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT74L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 75 low */
    using LUT75L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1258, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT75L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT75L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT75L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 76 low */
    using LUT76L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1260, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT76L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT76L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT76L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 77 low */
    using LUT77L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1268, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT77L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT77L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT77L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 78 low */
    using LUT78L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1270, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT78L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT78L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT78L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 79 low */
    using LUT79L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1278, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT79L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT79L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT79L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 80 low */
    using LUT80L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1280, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT80L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT80L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT80L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 81 low */
    using LUT81L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1288, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT81L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT81L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT81L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 82 low */
    using LUT82L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1290, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT82L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT82L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT82L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 83 low */
    using LUT83L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1298, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT83L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT83L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT83L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 84 low */
    using LUT84L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT84L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT84L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT84L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 85 low */
    using LUT85L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT85L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT85L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT85L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 86 low */
    using LUT86L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT86L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT86L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT86L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 87 low */
    using LUT87L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT87L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT87L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT87L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 88 low */
    using LUT88L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT88L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT88L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT88L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 89 low */
    using LUT89L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT89L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT89L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT89L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 90 low */
    using LUT90L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT90L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT90L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT90L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 91 low */
    using LUT91L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT91L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT91L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT91L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 92 low */
    using LUT92L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT92L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT92L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT92L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 93 low */
    using LUT93L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT93L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT93L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT93L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 94 low */
    using LUT94L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT94L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT94L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT94L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 95 low */
    using LUT95L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT95L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT95L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT95L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 96 low */
    using LUT96L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1300, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT96L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT96L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT96L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 97 low */
    using LUT97L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1308, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT97L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT97L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT97L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 98 low */
    using LUT98L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1310, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT98L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT98L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT98L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 99 low */
    using LUT99L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1318, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT99L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT99L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT99L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 100 low */
    using LUT100L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1320, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT100L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT100L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT100L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 101 low */
    using LUT101L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1328, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT101L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT101L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT101L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 102 low */
    using LUT102L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1330, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT102L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT102L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT102L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 103 low */
    using LUT103L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1338, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT103L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT103L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT103L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 104 low */
    using LUT104L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1340, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT104L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT104L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT104L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 105 low */
    using LUT105L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1348, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT105L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT105L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT105L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 106 low */
    using LUT106L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1350, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT106L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT106L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT106L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 107 low */
    using LUT107L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1358, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT107L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT107L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT107L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 108 low */
    using LUT108L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1360, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT108L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT108L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT108L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 109 low */
    using LUT109L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1368, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT109L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT109L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT109L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 110 low */
    using LUT110L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1370, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT110L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT110L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT110L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 111 low */
    using LUT111L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1378, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT111L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT111L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT111L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 112 low */
    using LUT112L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1380, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT112L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT112L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT112L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 113 low */
    using LUT113L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1388, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT113L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT113L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT113L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 114 low */
    using LUT114L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1390, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT114L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT114L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT114L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 115 low */
    using LUT115L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1398, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT115L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT115L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT115L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 116 low */
    using LUT116L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT116L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT116L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT116L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 117 low */
    using LUT117L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT117L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT117L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT117L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 118 low */
    using LUT118L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT118L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT118L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT118L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 119 low */
    using LUT119L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT119L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT119L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT119L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 120 low */
    using LUT120L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT120L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT120L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT120L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 121 low */
    using LUT121L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT121L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT121L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT121L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 122 low */
    using LUT122L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT122L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT122L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT122L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 123 low */
    using LUT123L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT123L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT123L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT123L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 124 low */
    using LUT124L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT124L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT124L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT124L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 125 low */
    using LUT125L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT125L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT125L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT125L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 126 low */
    using LUT126L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT126L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT126L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT126L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 127 low */
    using LUT127L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT127L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT127L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT127L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 128 low */
    using LUT128L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1400, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT128L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT128L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT128L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 129 low */
    using LUT129L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1408, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT129L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT129L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT129L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 130 low */
    using LUT130L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1410, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT130L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT130L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT130L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 131 low */
    using LUT131L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1418, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT131L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT131L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT131L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 132 low */
    using LUT132L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1420, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT132L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT132L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT132L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 133 low */
    using LUT133L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1428, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT133L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT133L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT133L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 134 low */
    using LUT134L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1430, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT134L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT134L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT134L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 135 low */
    using LUT135L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1438, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT135L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT135L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT135L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 136 low */
    using LUT136L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1440, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT136L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT136L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT136L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 137 low */
    using LUT137L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1448, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT137L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT137L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT137L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 138 low */
    using LUT138L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1450, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT138L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT138L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT138L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 139 low */
    using LUT139L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1458, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT139L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT139L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT139L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 140 low */
    using LUT140L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1460, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT140L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT140L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT140L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 141 low */
    using LUT141L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1468, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT141L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT141L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT141L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 142 low */
    using LUT142L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1470, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT142L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT142L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT142L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 143 low */
    using LUT143L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1478, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT143L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT143L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT143L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 144 low */
    using LUT144L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1480, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT144L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT144L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT144L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 145 low */
    using LUT145L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1488, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT145L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT145L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT145L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 146 low */
    using LUT146L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1490, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT146L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT146L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT146L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 147 low */
    using LUT147L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1498, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT147L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT147L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT147L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 148 low */
    using LUT148L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT148L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT148L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT148L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 149 low */
    using LUT149L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT149L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT149L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT149L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 150 low */
    using LUT150L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT150L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT150L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT150L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 151 low */
    using LUT151L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT151L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT151L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT151L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 152 low */
    using LUT152L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT152L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT152L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT152L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 153 low */
    using LUT153L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT153L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT153L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT153L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 154 low */
    using LUT154L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT154L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT154L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT154L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 155 low */
    using LUT155L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT155L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT155L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT155L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 156 low */
    using LUT156L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT156L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT156L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT156L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 157 low */
    using LUT157L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT157L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT157L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT157L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 158 low */
    using LUT158L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT158L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT158L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT158L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 159 low */
    using LUT159L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT159L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT159L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT159L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 160 low */
    using LUT160L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1500, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT160L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT160L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT160L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 161 low */
    using LUT161L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1508, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT161L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT161L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT161L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 162 low */
    using LUT162L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1510, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT162L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT162L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT162L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 163 low */
    using LUT163L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1518, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT163L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT163L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT163L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 164 low */
    using LUT164L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1520, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT164L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT164L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT164L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 165 low */
    using LUT165L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1528, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT165L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT165L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT165L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 166 low */
    using LUT166L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1530, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT166L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT166L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT166L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 167 low */
    using LUT167L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1538, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT167L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT167L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT167L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 168 low */
    using LUT168L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1540, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT168L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT168L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT168L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 169 low */
    using LUT169L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1548, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT169L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT169L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT169L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 170 low */
    using LUT170L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1550, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT170L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT170L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT170L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 171 low */
    using LUT171L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1558, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT171L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT171L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT171L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 172 low */
    using LUT172L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1560, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT172L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT172L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT172L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 173 low */
    using LUT173L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1568, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT173L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT173L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT173L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 174 low */
    using LUT174L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1570, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT174L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT174L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT174L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 175 low */
    using LUT175L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1578, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT175L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT175L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT175L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 176 low */
    using LUT176L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1580, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT176L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT176L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT176L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 177 low */
    using LUT177L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1588, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT177L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT177L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT177L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 178 low */
    using LUT178L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1590, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT178L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT178L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT178L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 179 low */
    using LUT179L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1598, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT179L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT179L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT179L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 180 low */
    using LUT180L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT180L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT180L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT180L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 181 low */
    using LUT181L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT181L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT181L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT181L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 182 low */
    using LUT182L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT182L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT182L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT182L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 183 low */
    using LUT183L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT183L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT183L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT183L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 184 low */
    using LUT184L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT184L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT184L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT184L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 185 low */
    using LUT185L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT185L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT185L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT185L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 186 low */
    using LUT186L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT186L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT186L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT186L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 187 low */
    using LUT187L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT187L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT187L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT187L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 188 low */
    using LUT188L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT188L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT188L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT188L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 189 low */
    using LUT189L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT189L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT189L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT189L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 190 low */
    using LUT190L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT190L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT190L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT190L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 191 low */
    using LUT191L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT191L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT191L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT191L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 192 low */
    using LUT192L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1600, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT192L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT192L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT192L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 193 low */
    using LUT193L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1608, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT193L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT193L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT193L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 194 low */
    using LUT194L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1610, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT194L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT194L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT194L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 195 low */
    using LUT195L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1618, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT195L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT195L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT195L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 196 low */
    using LUT196L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1620, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT196L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT196L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT196L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 197 low */
    using LUT197L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1628, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT197L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT197L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT197L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 198 low */
    using LUT198L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1630, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT198L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT198L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT198L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 199 low */
    using LUT199L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1638, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT199L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT199L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT199L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 200 low */
    using LUT200L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1640, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT200L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT200L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT200L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 201 low */
    using LUT201L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1648, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT201L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT201L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT201L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 202 low */
    using LUT202L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1650, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT202L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT202L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT202L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 203 low */
    using LUT203L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1658, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT203L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT203L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT203L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 204 low */
    using LUT204L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1660, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT204L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT204L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT204L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 205 low */
    using LUT205L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1668, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT205L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT205L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT205L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 206 low */
    using LUT206L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1670, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT206L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT206L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT206L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 207 low */
    using LUT207L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1678, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT207L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT207L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT207L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 208 low */
    using LUT208L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1680, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT208L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT208L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT208L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 209 low */
    using LUT209L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1688, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT209L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT209L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT209L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 210 low */
    using LUT210L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1690, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT210L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT210L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT210L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 211 low */
    using LUT211L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1698, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT211L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT211L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT211L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 212 low */
    using LUT212L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT212L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT212L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT212L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 213 low */
    using LUT213L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT213L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT213L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT213L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 214 low */
    using LUT214L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT214L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT214L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT214L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 215 low */
    using LUT215L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT215L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT215L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT215L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 216 low */
    using LUT216L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT216L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT216L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT216L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 217 low */
    using LUT217L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT217L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT217L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT217L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 218 low */
    using LUT218L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT218L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT218L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT218L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 219 low */
    using LUT219L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT219L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT219L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT219L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 220 low */
    using LUT220L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT220L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT220L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT220L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 221 low */
    using LUT221L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT221L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT221L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT221L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 222 low */
    using LUT222L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT222L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT222L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT222L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 223 low */
    using LUT223L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT223L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT223L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT223L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 224 low */
    using LUT224L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1700, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT224L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT224L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT224L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 225 low */
    using LUT225L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1708, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT225L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT225L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT225L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 226 low */
    using LUT226L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1710, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT226L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT226L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT226L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 227 low */
    using LUT227L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1718, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT227L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT227L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT227L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 228 low */
    using LUT228L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1720, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT228L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT228L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT228L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 229 low */
    using LUT229L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1728, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT229L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT229L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT229L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 230 low */
    using LUT230L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1730, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT230L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT230L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT230L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 231 low */
    using LUT231L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1738, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT231L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT231L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT231L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 232 low */
    using LUT232L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1740, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT232L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT232L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT232L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 233 low */
    using LUT233L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1748, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT233L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT233L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT233L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 234 low */
    using LUT234L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1750, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT234L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT234L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT234L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 235 low */
    using LUT235L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1758, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT235L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT235L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT235L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 236 low */
    using LUT236L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1760, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT236L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT236L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT236L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 237 low */
    using LUT237L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1768, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT237L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT237L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT237L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 238 low */
    using LUT238L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1770, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT238L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT238L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT238L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 239 low */
    using LUT239L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1778, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT239L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT239L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT239L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 240 low */
    using LUT240L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1780, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT240L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT240L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT240L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 241 low */
    using LUT241L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1788, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT241L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT241L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT241L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 242 low */
    using LUT242L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1790, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT242L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT242L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT242L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 243 low */
    using LUT243L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1798, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT243L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT243L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT243L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 244 low */
    using LUT244L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT244L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT244L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT244L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 245 low */
    using LUT245L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT245L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT245L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT245L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 246 low */
    using LUT246L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT246L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT246L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT246L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 247 low */
    using LUT247L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT247L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT247L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT247L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 248 low */
    using LUT248L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT248L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT248L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT248L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 249 low */
    using LUT249L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT249L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT249L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT249L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 250 low */
    using LUT250L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT250L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT250L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT250L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 251 low */
    using LUT251L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT251L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT251L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT251L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 252 low */
    using LUT252L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT252L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT252L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT252L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 253 low */
    using LUT253L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT253L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT253L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT253L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 254 low */
    using LUT254L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT254L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT254L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT254L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 255 low */
    using LUT255L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT255L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT255L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT255L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 256 low */
    using LUT256L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1800, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT256L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT256L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT256L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 257 low */
    using LUT257L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1808, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT257L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT257L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT257L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 258 low */
    using LUT258L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1810, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT258L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT258L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT258L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 259 low */
    using LUT259L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1818, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT259L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT259L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT259L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 260 low */
    using LUT260L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1820, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT260L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT260L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT260L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 261 low */
    using LUT261L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1828, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT261L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT261L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT261L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 262 low */
    using LUT262L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1830, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT262L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT262L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT262L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 263 low */
    using LUT263L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1838, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT263L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT263L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT263L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 264 low */
    using LUT264L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1840, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT264L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT264L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT264L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 265 low */
    using LUT265L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1848, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT265L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT265L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT265L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 266 low */
    using LUT266L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1850, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT266L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT266L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT266L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 267 low */
    using LUT267L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1858, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT267L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT267L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT267L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 268 low */
    using LUT268L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1860, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT268L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT268L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT268L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 269 low */
    using LUT269L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1868, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT269L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT269L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT269L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 270 low */
    using LUT270L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1870, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT270L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT270L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT270L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 271 low */
    using LUT271L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1878, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT271L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT271L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT271L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 272 low */
    using LUT272L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1880, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT272L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT272L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT272L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 273 low */
    using LUT273L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1888, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT273L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT273L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT273L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 274 low */
    using LUT274L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1890, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT274L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT274L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT274L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 275 low */
    using LUT275L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1898, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT275L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT275L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT275L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 276 low */
    using LUT276L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT276L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT276L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT276L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 277 low */
    using LUT277L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT277L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT277L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT277L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 278 low */
    using LUT278L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT278L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT278L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT278L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 279 low */
    using LUT279L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT279L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT279L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT279L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 280 low */
    using LUT280L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT280L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT280L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT280L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 281 low */
    using LUT281L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT281L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT281L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT281L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 282 low */
    using LUT282L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT282L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT282L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT282L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 283 low */
    using LUT283L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT283L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT283L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT283L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 284 low */
    using LUT284L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT284L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT284L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT284L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 285 low */
    using LUT285L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT285L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT285L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT285L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 286 low */
    using LUT286L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT286L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT286L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT286L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 287 low */
    using LUT287L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT287L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT287L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT287L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 288 low */
    using LUT288L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1900, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT288L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT288L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT288L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 289 low */
    using LUT289L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1908, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT289L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT289L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT289L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 290 low */
    using LUT290L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1910, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT290L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT290L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT290L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 291 low */
    using LUT291L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1918, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT291L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT291L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT291L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 292 low */
    using LUT292L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1920, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT292L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT292L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT292L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 293 low */
    using LUT293L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1928, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT293L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT293L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT293L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 294 low */
    using LUT294L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1930, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT294L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT294L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT294L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 295 low */
    using LUT295L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1938, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT295L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT295L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT295L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 296 low */
    using LUT296L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1940, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT296L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT296L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT296L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 297 low */
    using LUT297L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1948, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT297L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT297L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT297L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 298 low */
    using LUT298L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1950, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT298L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT298L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT298L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 299 low */
    using LUT299L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1958, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT299L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT299L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT299L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 300 low */
    using LUT300L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1960, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT300L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT300L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT300L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 301 low */
    using LUT301L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1968, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT301L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT301L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT301L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 302 low */
    using LUT302L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1970, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT302L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT302L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT302L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 303 low */
    using LUT303L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1978, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT303L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT303L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT303L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 304 low */
    using LUT304L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1980, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT304L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT304L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT304L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 305 low */
    using LUT305L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1988, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT305L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT305L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT305L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 306 low */
    using LUT306L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1990, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT306L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT306L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT306L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 307 low */
    using LUT307L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1998, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT307L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT307L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT307L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 308 low */
    using LUT308L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT308L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT308L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT308L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 309 low */
    using LUT309L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT309L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT309L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT309L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 310 low */
    using LUT310L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT310L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT310L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT310L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 311 low */
    using LUT311L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT311L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT311L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT311L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 312 low */
    using LUT312L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT312L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT312L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT312L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 313 low */
    using LUT313L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT313L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT313L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT313L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 314 low */
    using LUT314L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT314L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT314L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT314L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 315 low */
    using LUT315L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT315L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT315L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT315L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 316 low */
    using LUT316L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT316L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT316L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT316L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 317 low */
    using LUT317L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT317L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT317L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT317L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 318 low */
    using LUT318L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT318L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT318L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT318L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 319 low */
    using LUT319L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT319L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT319L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT319L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 320 low */
    using LUT320L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT320L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT320L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT320L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 321 low */
    using LUT321L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT321L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT321L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT321L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 322 low */
    using LUT322L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT322L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT322L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT322L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 323 low */
    using LUT323L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT323L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT323L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT323L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 324 low */
    using LUT324L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT324L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT324L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT324L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 325 low */
    using LUT325L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT325L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT325L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT325L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 326 low */
    using LUT326L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT326L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT326L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT326L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 327 low */
    using LUT327L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT327L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT327L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT327L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 328 low */
    using LUT328L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT328L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT328L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT328L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 329 low */
    using LUT329L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT329L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT329L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT329L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 330 low */
    using LUT330L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT330L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT330L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT330L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 331 low */
    using LUT331L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT331L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT331L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT331L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 332 low */
    using LUT332L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT332L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT332L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT332L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 333 low */
    using LUT333L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT333L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT333L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT333L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 334 low */
    using LUT334L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT334L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT334L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT334L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 335 low */
    using LUT335L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT335L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT335L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT335L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 336 low */
    using LUT336L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT336L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT336L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT336L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 337 low */
    using LUT337L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT337L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT337L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT337L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 338 low */
    using LUT338L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT338L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT338L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT338L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 339 low */
    using LUT339L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT339L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT339L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT339L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 340 low */
    using LUT340L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT340L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT340L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT340L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 341 low */
    using LUT341L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT341L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT341L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT341L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 342 low */
    using LUT342L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT342L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT342L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT342L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 343 low */
    using LUT343L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT343L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT343L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT343L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 344 low */
    using LUT344L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT344L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT344L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT344L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 345 low */
    using LUT345L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT345L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT345L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT345L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 346 low */
    using LUT346L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT346L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT346L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT346L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 347 low */
    using LUT347L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT347L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT347L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT347L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 348 low */
    using LUT348L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT348L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT348L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT348L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 349 low */
    using LUT349L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT349L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT349L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT349L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 350 low */
    using LUT350L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT350L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT350L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT350L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 351 low */
    using LUT351L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT351L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT351L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT351L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 352 low */
    using LUT352L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT352L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT352L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT352L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 353 low */
    using LUT353L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT353L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT353L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT353L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 354 low */
    using LUT354L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT354L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT354L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT354L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 355 low */
    using LUT355L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT355L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT355L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT355L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 356 low */
    using LUT356L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT356L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT356L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT356L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 357 low */
    using LUT357L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT357L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT357L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT357L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 358 low */
    using LUT358L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT358L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT358L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT358L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 359 low */
    using LUT359L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT359L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT359L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT359L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 360 low */
    using LUT360L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT360L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT360L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT360L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 361 low */
    using LUT361L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT361L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT361L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT361L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 362 low */
    using LUT362L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT362L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT362L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT362L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 363 low */
    using LUT363L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT363L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT363L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT363L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 364 low */
    using LUT364L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT364L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT364L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT364L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 365 low */
    using LUT365L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT365L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT365L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT365L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 366 low */
    using LUT366L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT366L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT366L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT366L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 367 low */
    using LUT367L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT367L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT367L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT367L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 368 low */
    using LUT368L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT368L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT368L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT368L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 369 low */
    using LUT369L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT369L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT369L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT369L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 370 low */
    using LUT370L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT370L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT370L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT370L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 371 low */
    using LUT371L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT371L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT371L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT371L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 372 low */
    using LUT372L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT372L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT372L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT372L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 373 low */
    using LUT373L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT373L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT373L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT373L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 374 low */
    using LUT374L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT374L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT374L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT374L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 375 low */
    using LUT375L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT375L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT375L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT375L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 376 low */
    using LUT376L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT376L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT376L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT376L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 377 low */
    using LUT377L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT377L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT377L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT377L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 378 low */
    using LUT378L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT378L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT378L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT378L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 379 low */
    using LUT379L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT379L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT379L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT379L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 380 low */
    using LUT380L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT380L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT380L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT380L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 381 low */
    using LUT381L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT381L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT381L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT381L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 382 low */
    using LUT382L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT382L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT382L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT382L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 383 low */
    using LUT383L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT383L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT383L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT383L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 384 low */
    using LUT384L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT384L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT384L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT384L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 385 low */
    using LUT385L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT385L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT385L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT385L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 386 low */
    using LUT386L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT386L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT386L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT386L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 387 low */
    using LUT387L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT387L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT387L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT387L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 388 low */
    using LUT388L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT388L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT388L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT388L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 389 low */
    using LUT389L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT389L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT389L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT389L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 390 low */
    using LUT390L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT390L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT390L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT390L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 391 low */
    using LUT391L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT391L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT391L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT391L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 392 low */
    using LUT392L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT392L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT392L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT392L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 393 low */
    using LUT393L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT393L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT393L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT393L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 394 low */
    using LUT394L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT394L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT394L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT394L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 395 low */
    using LUT395L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT395L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT395L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT395L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 396 low */
    using LUT396L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT396L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT396L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT396L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 397 low */
    using LUT397L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT397L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT397L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT397L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 398 low */
    using LUT398L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT398L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT398L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT398L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 399 low */
    using LUT399L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT399L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT399L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT399L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 400 low */
    using LUT400L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT400L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT400L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT400L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 401 low */
    using LUT401L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT401L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT401L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT401L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 402 low */
    using LUT402L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT402L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT402L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT402L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 403 low */
    using LUT403L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT403L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT403L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT403L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 404 low */
    using LUT404L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT404L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT404L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT404L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 405 low */
    using LUT405L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT405L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT405L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT405L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 406 low */
    using LUT406L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT406L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT406L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT406L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 407 low */
    using LUT407L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT407L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT407L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT407L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 408 low */
    using LUT408L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT408L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT408L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT408L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 409 low */
    using LUT409L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT409L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT409L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT409L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 410 low */
    using LUT410L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT410L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT410L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT410L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 411 low */
    using LUT411L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT411L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT411L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT411L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 412 low */
    using LUT412L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT412L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT412L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT412L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 413 low */
    using LUT413L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT413L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT413L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT413L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 414 low */
    using LUT414L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT414L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT414L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT414L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 415 low */
    using LUT415L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT415L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT415L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT415L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 416 low */
    using LUT416L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT416L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT416L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT416L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 417 low */
    using LUT417L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT417L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT417L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT417L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 418 low */
    using LUT418L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT418L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT418L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT418L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 419 low */
    using LUT419L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT419L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT419L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT419L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 420 low */
    using LUT420L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT420L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT420L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT420L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 421 low */
    using LUT421L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT421L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT421L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT421L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 422 low */
    using LUT422L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT422L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT422L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT422L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 423 low */
    using LUT423L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT423L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT423L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT423L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 424 low */
    using LUT424L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT424L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT424L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT424L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 425 low */
    using LUT425L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT425L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT425L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT425L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 426 low */
    using LUT426L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT426L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT426L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT426L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 427 low */
    using LUT427L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT427L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT427L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT427L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 428 low */
    using LUT428L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT428L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT428L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT428L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 429 low */
    using LUT429L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT429L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT429L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT429L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 430 low */
    using LUT430L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT430L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT430L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT430L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 431 low */
    using LUT431L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT431L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT431L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT431L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 432 low */
    using LUT432L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT432L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT432L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT432L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 433 low */
    using LUT433L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT433L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT433L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT433L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 434 low */
    using LUT434L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT434L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT434L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT434L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 435 low */
    using LUT435L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT435L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT435L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT435L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 436 low */
    using LUT436L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT436L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT436L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT436L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 437 low */
    using LUT437L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT437L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT437L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT437L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 438 low */
    using LUT438L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT438L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT438L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT438L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 439 low */
    using LUT439L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT439L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT439L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT439L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 440 low */
    using LUT440L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT440L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT440L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT440L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 441 low */
    using LUT441L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT441L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT441L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT441L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 442 low */
    using LUT442L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT442L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT442L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT442L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 443 low */
    using LUT443L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT443L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT443L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT443L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 444 low */
    using LUT444L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT444L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT444L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT444L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 445 low */
    using LUT445L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT445L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT445L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT445L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 446 low */
    using LUT446L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT446L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT446L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT446L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 447 low */
    using LUT447L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT447L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT447L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT447L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 448 low */
    using LUT448L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT448L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT448L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT448L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 449 low */
    using LUT449L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT449L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT449L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT449L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 450 low */
    using LUT450L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT450L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT450L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT450L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 451 low */
    using LUT451L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT451L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT451L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT451L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 452 low */
    using LUT452L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT452L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT452L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT452L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 453 low */
    using LUT453L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT453L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT453L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT453L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 454 low */
    using LUT454L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT454L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT454L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT454L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 455 low */
    using LUT455L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT455L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT455L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT455L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 456 low */
    using LUT456L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT456L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT456L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT456L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 457 low */
    using LUT457L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT457L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT457L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT457L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 458 low */
    using LUT458L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT458L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT458L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT458L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 459 low */
    using LUT459L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT459L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT459L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT459L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 460 low */
    using LUT460L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT460L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT460L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT460L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 461 low */
    using LUT461L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT461L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT461L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT461L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 462 low */
    using LUT462L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT462L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT462L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT462L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 463 low */
    using LUT463L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT463L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT463L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT463L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 464 low */
    using LUT464L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT464L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT464L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT464L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 465 low */
    using LUT465L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT465L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT465L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT465L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 466 low */
    using LUT466L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT466L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT466L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT466L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 467 low */
    using LUT467L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT467L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT467L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT467L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 468 low */
    using LUT468L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT468L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT468L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT468L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 469 low */
    using LUT469L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT469L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT469L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT469L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 470 low */
    using LUT470L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT470L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT470L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT470L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 471 low */
    using LUT471L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT471L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT471L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT471L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 472 low */
    using LUT472L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT472L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT472L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT472L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 473 low */
    using LUT473L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT473L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT473L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT473L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 474 low */
    using LUT474L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ED0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT474L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT474L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT474L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 475 low */
    using LUT475L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ED8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT475L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT475L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT475L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 476 low */
    using LUT476L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT476L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT476L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT476L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 477 low */
    using LUT477L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT477L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT477L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT477L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 478 low */
    using LUT478L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT478L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT478L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT478L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 479 low */
    using LUT479L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT479L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT479L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT479L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 480 low */
    using LUT480L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT480L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT480L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT480L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 481 low */
    using LUT481L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT481L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT481L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT481L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 482 low */
    using LUT482L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT482L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT482L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT482L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 483 low */
    using LUT483L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT483L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT483L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT483L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 484 low */
    using LUT484L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT484L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT484L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT484L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 485 low */
    using LUT485L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT485L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT485L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT485L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 486 low */
    using LUT486L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT486L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT486L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT486L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 487 low */
    using LUT487L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT487L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT487L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT487L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 488 low */
    using LUT488L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT488L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT488L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT488L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 489 low */
    using LUT489L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT489L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT489L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT489L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 490 low */
    using LUT490L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT490L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT490L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT490L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 491 low */
    using LUT491L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT491L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT491L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT491L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 492 low */
    using LUT492L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT492L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT492L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT492L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 493 low */
    using LUT493L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT493L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT493L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT493L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 494 low */
    using LUT494L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT494L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT494L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT494L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 495 low */
    using LUT495L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT495L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT495L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT495L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 496 low */
    using LUT496L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT496L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT496L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT496L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 497 low */
    using LUT497L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT497L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT497L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT497L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 498 low */
    using LUT498L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT498L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT498L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT498L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 499 low */
    using LUT499L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT499L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT499L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT499L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 500 low */
    using LUT500L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT500L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT500L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT500L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 501 low */
    using LUT501L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT501L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT501L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT501L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 502 low */
    using LUT502L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT502L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT502L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT502L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 503 low */
    using LUT503L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT503L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT503L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT503L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 504 low */
    using LUT504L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT504L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT504L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT504L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 505 low */
    using LUT505L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT505L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT505L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT505L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 506 low */
    using LUT506L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT506L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT506L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT506L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 507 low */
    using LUT507L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT507L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT507L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT507L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 508 low */
    using LUT508L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT508L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT508L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT508L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 509 low */
    using LUT509L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT509L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT509L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT509L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 510 low */
    using LUT510L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT510L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT510L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT510L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 511 low */
    using LUT511L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT511L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT511L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT511L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 512 low */
    using LUT512L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2000, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT512L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT512L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT512L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 513 low */
    using LUT513L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2008, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT513L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT513L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT513L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 514 low */
    using LUT514L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2010, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT514L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT514L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT514L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 515 low */
    using LUT515L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2018, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT515L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT515L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT515L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 516 low */
    using LUT516L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2020, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT516L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT516L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT516L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 517 low */
    using LUT517L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2028, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT517L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT517L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT517L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 518 low */
    using LUT518L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2030, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT518L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT518L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT518L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 519 low */
    using LUT519L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2038, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT519L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT519L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT519L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 520 low */
    using LUT520L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2040, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT520L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT520L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT520L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 521 low */
    using LUT521L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2048, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT521L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT521L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT521L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 522 low */
    using LUT522L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2050, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT522L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT522L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT522L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 523 low */
    using LUT523L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2058, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT523L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT523L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT523L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 524 low */
    using LUT524L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2060, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT524L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT524L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT524L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 525 low */
    using LUT525L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2068, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT525L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT525L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT525L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 526 low */
    using LUT526L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2070, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT526L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT526L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT526L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 527 low */
    using LUT527L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2078, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT527L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT527L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT527L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 528 low */
    using LUT528L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2080, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT528L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT528L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT528L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 529 low */
    using LUT529L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2088, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT529L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT529L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT529L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 530 low */
    using LUT530L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2090, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT530L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT530L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT530L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 531 low */
    using LUT531L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2098, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT531L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT531L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT531L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 532 low */
    using LUT532L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT532L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT532L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT532L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 533 low */
    using LUT533L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT533L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT533L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT533L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 534 low */
    using LUT534L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT534L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT534L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT534L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 535 low */
    using LUT535L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT535L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT535L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT535L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 536 low */
    using LUT536L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT536L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT536L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT536L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 537 low */
    using LUT537L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT537L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT537L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT537L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 538 low */
    using LUT538L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT538L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT538L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT538L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 539 low */
    using LUT539L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT539L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT539L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT539L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 540 low */
    using LUT540L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT540L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT540L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT540L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 541 low */
    using LUT541L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT541L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT541L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT541L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 542 low */
    using LUT542L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT542L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT542L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT542L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 543 low */
    using LUT543L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT543L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT543L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT543L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 544 low */
    using LUT544L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2100, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT544L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT544L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT544L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 545 low */
    using LUT545L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2108, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT545L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT545L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT545L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 546 low */
    using LUT546L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2110, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT546L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT546L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT546L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 547 low */
    using LUT547L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2118, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT547L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT547L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT547L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 548 low */
    using LUT548L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2120, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT548L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT548L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT548L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 549 low */
    using LUT549L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2128, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT549L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT549L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT549L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 550 low */
    using LUT550L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2130, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT550L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT550L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT550L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 551 low */
    using LUT551L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2138, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT551L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT551L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT551L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 552 low */
    using LUT552L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2140, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT552L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT552L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT552L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 553 low */
    using LUT553L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2148, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT553L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT553L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT553L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 554 low */
    using LUT554L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2150, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT554L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT554L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT554L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 555 low */
    using LUT555L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2158, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT555L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT555L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT555L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 556 low */
    using LUT556L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2160, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT556L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT556L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT556L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 557 low */
    using LUT557L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2168, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT557L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT557L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT557L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 558 low */
    using LUT558L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2170, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT558L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT558L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT558L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 559 low */
    using LUT559L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2178, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT559L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT559L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT559L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 560 low */
    using LUT560L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2180, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT560L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT560L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT560L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 561 low */
    using LUT561L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2188, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT561L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT561L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT561L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 562 low */
    using LUT562L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2190, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT562L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT562L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT562L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 563 low */
    using LUT563L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2198, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT563L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT563L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT563L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 564 low */
    using LUT564L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT564L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT564L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT564L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 565 low */
    using LUT565L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT565L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT565L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT565L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 566 low */
    using LUT566L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT566L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT566L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT566L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 567 low */
    using LUT567L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT567L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT567L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT567L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 568 low */
    using LUT568L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT568L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT568L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT568L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 569 low */
    using LUT569L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT569L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT569L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT569L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 570 low */
    using LUT570L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT570L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT570L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT570L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 571 low */
    using LUT571L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT571L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT571L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT571L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 572 low */
    using LUT572L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT572L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT572L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT572L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 573 low */
    using LUT573L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT573L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT573L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT573L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 574 low */
    using LUT574L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT574L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT574L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT574L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 575 low */
    using LUT575L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT575L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT575L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT575L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 576 low */
    using LUT576L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2200, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT576L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT576L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT576L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 577 low */
    using LUT577L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2208, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT577L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT577L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT577L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 578 low */
    using LUT578L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2210, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT578L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT578L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT578L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 579 low */
    using LUT579L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2218, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT579L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT579L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT579L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 580 low */
    using LUT580L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2220, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT580L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT580L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT580L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 581 low */
    using LUT581L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2228, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT581L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT581L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT581L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 582 low */
    using LUT582L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2230, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT582L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT582L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT582L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 583 low */
    using LUT583L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2238, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT583L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT583L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT583L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 584 low */
    using LUT584L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2240, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT584L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT584L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT584L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 585 low */
    using LUT585L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2248, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT585L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT585L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT585L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 586 low */
    using LUT586L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2250, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT586L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT586L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT586L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 587 low */
    using LUT587L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2258, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT587L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT587L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT587L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 588 low */
    using LUT588L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2260, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT588L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT588L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT588L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 589 low */
    using LUT589L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2268, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT589L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT589L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT589L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 590 low */
    using LUT590L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2270, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT590L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT590L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT590L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 591 low */
    using LUT591L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2278, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT591L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT591L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT591L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 592 low */
    using LUT592L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2280, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT592L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT592L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT592L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 593 low */
    using LUT593L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2288, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT593L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT593L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT593L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 594 low */
    using LUT594L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2290, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT594L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT594L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT594L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 595 low */
    using LUT595L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2298, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT595L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT595L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT595L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 596 low */
    using LUT596L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT596L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT596L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT596L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 597 low */
    using LUT597L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT597L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT597L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT597L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 598 low */
    using LUT598L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT598L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT598L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT598L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 599 low */
    using LUT599L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT599L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT599L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT599L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 600 low */
    using LUT600L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT600L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT600L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT600L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 601 low */
    using LUT601L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT601L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT601L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT601L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 602 low */
    using LUT602L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT602L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT602L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT602L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 603 low */
    using LUT603L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT603L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT603L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT603L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 604 low */
    using LUT604L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT604L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT604L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT604L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 605 low */
    using LUT605L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT605L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT605L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT605L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 606 low */
    using LUT606L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT606L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT606L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT606L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 607 low */
    using LUT607L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT607L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT607L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT607L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 608 low */
    using LUT608L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2300, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT608L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT608L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT608L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 609 low */
    using LUT609L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2308, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT609L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT609L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT609L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 610 low */
    using LUT610L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2310, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT610L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT610L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT610L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 611 low */
    using LUT611L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2318, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT611L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT611L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT611L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 612 low */
    using LUT612L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2320, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT612L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT612L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT612L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 613 low */
    using LUT613L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2328, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT613L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT613L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT613L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 614 low */
    using LUT614L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2330, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT614L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT614L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT614L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 615 low */
    using LUT615L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2338, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT615L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT615L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT615L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 616 low */
    using LUT616L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2340, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT616L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT616L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT616L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 617 low */
    using LUT617L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2348, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT617L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT617L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT617L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 618 low */
    using LUT618L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2350, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT618L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT618L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT618L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 619 low */
    using LUT619L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2358, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT619L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT619L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT619L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 620 low */
    using LUT620L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2360, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT620L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT620L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT620L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 621 low */
    using LUT621L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2368, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT621L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT621L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT621L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 622 low */
    using LUT622L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2370, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT622L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT622L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT622L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 623 low */
    using LUT623L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2378, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT623L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT623L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT623L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 624 low */
    using LUT624L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2380, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT624L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT624L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT624L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 625 low */
    using LUT625L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2388, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT625L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT625L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT625L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 626 low */
    using LUT626L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2390, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT626L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT626L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT626L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 627 low */
    using LUT627L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2398, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT627L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT627L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT627L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 628 low */
    using LUT628L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT628L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT628L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT628L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 629 low */
    using LUT629L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT629L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT629L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT629L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 630 low */
    using LUT630L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT630L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT630L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT630L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 631 low */
    using LUT631L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT631L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT631L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT631L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 632 low */
    using LUT632L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT632L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT632L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT632L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 633 low */
    using LUT633L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT633L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT633L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT633L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 634 low */
    using LUT634L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT634L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT634L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT634L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 635 low */
    using LUT635L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT635L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT635L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT635L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 636 low */
    using LUT636L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT636L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT636L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT636L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 637 low */
    using LUT637L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT637L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT637L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT637L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 638 low */
    using LUT638L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT638L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT638L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT638L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 639 low */
    using LUT639L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT639L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT639L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT639L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 640 low */
    using LUT640L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2400, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT640L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT640L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT640L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 641 low */
    using LUT641L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2408, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT641L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT641L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT641L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 642 low */
    using LUT642L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2410, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT642L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT642L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT642L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 643 low */
    using LUT643L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2418, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT643L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT643L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT643L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 644 low */
    using LUT644L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2420, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT644L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT644L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT644L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 645 low */
    using LUT645L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2428, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT645L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT645L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT645L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 646 low */
    using LUT646L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2430, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT646L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT646L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT646L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 647 low */
    using LUT647L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2438, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT647L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT647L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT647L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 648 low */
    using LUT648L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2440, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT648L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT648L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT648L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 649 low */
    using LUT649L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2448, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT649L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT649L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT649L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 650 low */
    using LUT650L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2450, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT650L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT650L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT650L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 651 low */
    using LUT651L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2458, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT651L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT651L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT651L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 652 low */
    using LUT652L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2460, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT652L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT652L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT652L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 653 low */
    using LUT653L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2468, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT653L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT653L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT653L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 654 low */
    using LUT654L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2470, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT654L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT654L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT654L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 655 low */
    using LUT655L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2478, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT655L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT655L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT655L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 656 low */
    using LUT656L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2480, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT656L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT656L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT656L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 657 low */
    using LUT657L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2488, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT657L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT657L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT657L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 658 low */
    using LUT658L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2490, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT658L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT658L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT658L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 659 low */
    using LUT659L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2498, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT659L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT659L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT659L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 660 low */
    using LUT660L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT660L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT660L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT660L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 661 low */
    using LUT661L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT661L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT661L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT661L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 662 low */
    using LUT662L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT662L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT662L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT662L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 663 low */
    using LUT663L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT663L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT663L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT663L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 664 low */
    using LUT664L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT664L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT664L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT664L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 665 low */
    using LUT665L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT665L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT665L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT665L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 666 low */
    using LUT666L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT666L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT666L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT666L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 667 low */
    using LUT667L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT667L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT667L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT667L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 668 low */
    using LUT668L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT668L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT668L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT668L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 669 low */
    using LUT669L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT669L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT669L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT669L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 670 low */
    using LUT670L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT670L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT670L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT670L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 671 low */
    using LUT671L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT671L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT671L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT671L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 672 low */
    using LUT672L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2500, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT672L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT672L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT672L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 673 low */
    using LUT673L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2508, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT673L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT673L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT673L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 674 low */
    using LUT674L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2510, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT674L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT674L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT674L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 675 low */
    using LUT675L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2518, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT675L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT675L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT675L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 676 low */
    using LUT676L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2520, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT676L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT676L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT676L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 677 low */
    using LUT677L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2528, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT677L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT677L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT677L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 678 low */
    using LUT678L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2530, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT678L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT678L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT678L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 679 low */
    using LUT679L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2538, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT679L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT679L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT679L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 680 low */
    using LUT680L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2540, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT680L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT680L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT680L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 681 low */
    using LUT681L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2548, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT681L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT681L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT681L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 682 low */
    using LUT682L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2550, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT682L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT682L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT682L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 683 low */
    using LUT683L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2558, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT683L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT683L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT683L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 684 low */
    using LUT684L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2560, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT684L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT684L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT684L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 685 low */
    using LUT685L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2568, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT685L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT685L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT685L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 686 low */
    using LUT686L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2570, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT686L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT686L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT686L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 687 low */
    using LUT687L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2578, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT687L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT687L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT687L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 688 low */
    using LUT688L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2580, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT688L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT688L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT688L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 689 low */
    using LUT689L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2588, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT689L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT689L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT689L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 690 low */
    using LUT690L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2590, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT690L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT690L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT690L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 691 low */
    using LUT691L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2598, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT691L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT691L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT691L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 692 low */
    using LUT692L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT692L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT692L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT692L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 693 low */
    using LUT693L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT693L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT693L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT693L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 694 low */
    using LUT694L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT694L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT694L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT694L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 695 low */
    using LUT695L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT695L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT695L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT695L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 696 low */
    using LUT696L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT696L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT696L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT696L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 697 low */
    using LUT697L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT697L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT697L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT697L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 698 low */
    using LUT698L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT698L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT698L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT698L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 699 low */
    using LUT699L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT699L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT699L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT699L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 700 low */
    using LUT700L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT700L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT700L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT700L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 701 low */
    using LUT701L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT701L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT701L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT701L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 702 low */
    using LUT702L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT702L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT702L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT702L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 703 low */
    using LUT703L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT703L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT703L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT703L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 704 low */
    using LUT704L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2600, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT704L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT704L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT704L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 705 low */
    using LUT705L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2608, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT705L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT705L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT705L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 706 low */
    using LUT706L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2610, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT706L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT706L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT706L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 707 low */
    using LUT707L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2618, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT707L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT707L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT707L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 708 low */
    using LUT708L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2620, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT708L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT708L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT708L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 709 low */
    using LUT709L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2628, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT709L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT709L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT709L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 710 low */
    using LUT710L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2630, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT710L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT710L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT710L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 711 low */
    using LUT711L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2638, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT711L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT711L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT711L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 712 low */
    using LUT712L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2640, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT712L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT712L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT712L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 713 low */
    using LUT713L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2648, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT713L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT713L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT713L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 714 low */
    using LUT714L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2650, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT714L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT714L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT714L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 715 low */
    using LUT715L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2658, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT715L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT715L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT715L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 716 low */
    using LUT716L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2660, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT716L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT716L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT716L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 717 low */
    using LUT717L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2668, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT717L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT717L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT717L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 718 low */
    using LUT718L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2670, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT718L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT718L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT718L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 719 low */
    using LUT719L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2678, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT719L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT719L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT719L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 720 low */
    using LUT720L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2680, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT720L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT720L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT720L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 721 low */
    using LUT721L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2688, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT721L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT721L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT721L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 722 low */
    using LUT722L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2690, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT722L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT722L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT722L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 723 low */
    using LUT723L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2698, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT723L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT723L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT723L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 724 low */
    using LUT724L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT724L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT724L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT724L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 725 low */
    using LUT725L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT725L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT725L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT725L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 726 low */
    using LUT726L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT726L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT726L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT726L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 727 low */
    using LUT727L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT727L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT727L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT727L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 728 low */
    using LUT728L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT728L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT728L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT728L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 729 low */
    using LUT729L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT729L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT729L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT729L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 730 low */
    using LUT730L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT730L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT730L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT730L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 731 low */
    using LUT731L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT731L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT731L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT731L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 732 low */
    using LUT732L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT732L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT732L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT732L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 733 low */
    using LUT733L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT733L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT733L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT733L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 734 low */
    using LUT734L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT734L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT734L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT734L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 735 low */
    using LUT735L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT735L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT735L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT735L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 736 low */
    using LUT736L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2700, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT736L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT736L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT736L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 737 low */
    using LUT737L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2708, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT737L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT737L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT737L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 738 low */
    using LUT738L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2710, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT738L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT738L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT738L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 739 low */
    using LUT739L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2718, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT739L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT739L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT739L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 740 low */
    using LUT740L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2720, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT740L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT740L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT740L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 741 low */
    using LUT741L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2728, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT741L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT741L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT741L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 742 low */
    using LUT742L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2730, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT742L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT742L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT742L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 743 low */
    using LUT743L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2738, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT743L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT743L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT743L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 744 low */
    using LUT744L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2740, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT744L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT744L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT744L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 745 low */
    using LUT745L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2748, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT745L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT745L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT745L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 746 low */
    using LUT746L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2750, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT746L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT746L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT746L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 747 low */
    using LUT747L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2758, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT747L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT747L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT747L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 748 low */
    using LUT748L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2760, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT748L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT748L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT748L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 749 low */
    using LUT749L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2768, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT749L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT749L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT749L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 750 low */
    using LUT750L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2770, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT750L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT750L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT750L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 751 low */
    using LUT751L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2778, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT751L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT751L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT751L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 752 low */
    using LUT752L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2780, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT752L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT752L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT752L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 753 low */
    using LUT753L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2788, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT753L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT753L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT753L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 754 low */
    using LUT754L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2790, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT754L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT754L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT754L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 755 low */
    using LUT755L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2798, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT755L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT755L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT755L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 756 low */
    using LUT756L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT756L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT756L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT756L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 757 low */
    using LUT757L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT757L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT757L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT757L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 758 low */
    using LUT758L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT758L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT758L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT758L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 759 low */
    using LUT759L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT759L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT759L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT759L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 760 low */
    using LUT760L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT760L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT760L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT760L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 761 low */
    using LUT761L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT761L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT761L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT761L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 762 low */
    using LUT762L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT762L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT762L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT762L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 763 low */
    using LUT763L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT763L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT763L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT763L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 764 low */
    using LUT764L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT764L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT764L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT764L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 765 low */
    using LUT765L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT765L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT765L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT765L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 766 low */
    using LUT766L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT766L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT766L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT766L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 767 low */
    using LUT767L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT767L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT767L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT767L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 768 low */
    using LUT768L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2800, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT768L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT768L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT768L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 769 low */
    using LUT769L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2808, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT769L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT769L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT769L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 770 low */
    using LUT770L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2810, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT770L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT770L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT770L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 771 low */
    using LUT771L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2818, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT771L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT771L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT771L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 772 low */
    using LUT772L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2820, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT772L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT772L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT772L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 773 low */
    using LUT773L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2828, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT773L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT773L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT773L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 774 low */
    using LUT774L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2830, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT774L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT774L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT774L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 775 low */
    using LUT775L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2838, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT775L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT775L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT775L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 776 low */
    using LUT776L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2840, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT776L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT776L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT776L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 777 low */
    using LUT777L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2848, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT777L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT777L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT777L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 778 low */
    using LUT778L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2850, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT778L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT778L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT778L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 779 low */
    using LUT779L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2858, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT779L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT779L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT779L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 780 low */
    using LUT780L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2860, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT780L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT780L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT780L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 781 low */
    using LUT781L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2868, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT781L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT781L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT781L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 782 low */
    using LUT782L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2870, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT782L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT782L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT782L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 783 low */
    using LUT783L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2878, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT783L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT783L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT783L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 784 low */
    using LUT784L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2880, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT784L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT784L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT784L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 785 low */
    using LUT785L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2888, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT785L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT785L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT785L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 786 low */
    using LUT786L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2890, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT786L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT786L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT786L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 787 low */
    using LUT787L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2898, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT787L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT787L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT787L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 788 low */
    using LUT788L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT788L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT788L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT788L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 789 low */
    using LUT789L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT789L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT789L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT789L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 790 low */
    using LUT790L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT790L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT790L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT790L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 791 low */
    using LUT791L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT791L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT791L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT791L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 792 low */
    using LUT792L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT792L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT792L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT792L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 793 low */
    using LUT793L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT793L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT793L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT793L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 794 low */
    using LUT794L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT794L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT794L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT794L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 795 low */
    using LUT795L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT795L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT795L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT795L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 796 low */
    using LUT796L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT796L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT796L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT796L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 797 low */
    using LUT797L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT797L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT797L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT797L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 798 low */
    using LUT798L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT798L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT798L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT798L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 799 low */
    using LUT799L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT799L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT799L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT799L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 800 low */
    using LUT800L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2900, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT800L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT800L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT800L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 801 low */
    using LUT801L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2908, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT801L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT801L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT801L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 802 low */
    using LUT802L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2910, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT802L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT802L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT802L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 803 low */
    using LUT803L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2918, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT803L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT803L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT803L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 804 low */
    using LUT804L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2920, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT804L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT804L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT804L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 805 low */
    using LUT805L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2928, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT805L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT805L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT805L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 806 low */
    using LUT806L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2930, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT806L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT806L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT806L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 807 low */
    using LUT807L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2938, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT807L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT807L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT807L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 808 low */
    using LUT808L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2940, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT808L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT808L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT808L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 809 low */
    using LUT809L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2948, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT809L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT809L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT809L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 810 low */
    using LUT810L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2950, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT810L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT810L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT810L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 811 low */
    using LUT811L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2958, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT811L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT811L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT811L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 812 low */
    using LUT812L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2960, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT812L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT812L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT812L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 813 low */
    using LUT813L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2968, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT813L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT813L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT813L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 814 low */
    using LUT814L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2970, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT814L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT814L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT814L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 815 low */
    using LUT815L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2978, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT815L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT815L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT815L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 816 low */
    using LUT816L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2980, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT816L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT816L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT816L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 817 low */
    using LUT817L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2988, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT817L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT817L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT817L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 818 low */
    using LUT818L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2990, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT818L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT818L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT818L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 819 low */
    using LUT819L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2998, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT819L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT819L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT819L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 820 low */
    using LUT820L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT820L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT820L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT820L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 821 low */
    using LUT821L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT821L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT821L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT821L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 822 low */
    using LUT822L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT822L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT822L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT822L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 823 low */
    using LUT823L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT823L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT823L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT823L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 824 low */
    using LUT824L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT824L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT824L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT824L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 825 low */
    using LUT825L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT825L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT825L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT825L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 826 low */
    using LUT826L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT826L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT826L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT826L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 827 low */
    using LUT827L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT827L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT827L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT827L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 828 low */
    using LUT828L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT828L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT828L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT828L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 829 low */
    using LUT829L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT829L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT829L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT829L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 830 low */
    using LUT830L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT830L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT830L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT830L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 831 low */
    using LUT831L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT831L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT831L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT831L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 832 low */
    using LUT832L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT832L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT832L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT832L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 833 low */
    using LUT833L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT833L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT833L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT833L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 834 low */
    using LUT834L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT834L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT834L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT834L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 835 low */
    using LUT835L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT835L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT835L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT835L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 836 low */
    using LUT836L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT836L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT836L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT836L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 837 low */
    using LUT837L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT837L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT837L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT837L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 838 low */
    using LUT838L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT838L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT838L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT838L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 839 low */
    using LUT839L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT839L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT839L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT839L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 840 low */
    using LUT840L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT840L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT840L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT840L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 841 low */
    using LUT841L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT841L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT841L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT841L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 842 low */
    using LUT842L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT842L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT842L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT842L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 843 low */
    using LUT843L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT843L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT843L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT843L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 844 low */
    using LUT844L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT844L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT844L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT844L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 845 low */
    using LUT845L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT845L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT845L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT845L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 846 low */
    using LUT846L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT846L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT846L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT846L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 847 low */
    using LUT847L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT847L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT847L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT847L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 848 low */
    using LUT848L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT848L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT848L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT848L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 849 low */
    using LUT849L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT849L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT849L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT849L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 850 low */
    using LUT850L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT850L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT850L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT850L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 851 low */
    using LUT851L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT851L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT851L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT851L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 852 low */
    using LUT852L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT852L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT852L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT852L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 853 low */
    using LUT853L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT853L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT853L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT853L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 854 low */
    using LUT854L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT854L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT854L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT854L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 855 low */
    using LUT855L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT855L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT855L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT855L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 856 low */
    using LUT856L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT856L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT856L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT856L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 857 low */
    using LUT857L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT857L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT857L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT857L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 858 low */
    using LUT858L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT858L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT858L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT858L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 859 low */
    using LUT859L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT859L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT859L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT859L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 860 low */
    using LUT860L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT860L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT860L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT860L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 861 low */
    using LUT861L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT861L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT861L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT861L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 862 low */
    using LUT862L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT862L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT862L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT862L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 863 low */
    using LUT863L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT863L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT863L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT863L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 864 low */
    using LUT864L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT864L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT864L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT864L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 865 low */
    using LUT865L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT865L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT865L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT865L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 866 low */
    using LUT866L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT866L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT866L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT866L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 867 low */
    using LUT867L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT867L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT867L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT867L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 868 low */
    using LUT868L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT868L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT868L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT868L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 869 low */
    using LUT869L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT869L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT869L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT869L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 870 low */
    using LUT870L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT870L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT870L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT870L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 871 low */
    using LUT871L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT871L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT871L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT871L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 872 low */
    using LUT872L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT872L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT872L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT872L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 873 low */
    using LUT873L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT873L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT873L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT873L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 874 low */
    using LUT874L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT874L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT874L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT874L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 875 low */
    using LUT875L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT875L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT875L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT875L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 876 low */
    using LUT876L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT876L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT876L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT876L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 877 low */
    using LUT877L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT877L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT877L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT877L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 878 low */
    using LUT878L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT878L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT878L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT878L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 879 low */
    using LUT879L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT879L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT879L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT879L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 880 low */
    using LUT880L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT880L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT880L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT880L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 881 low */
    using LUT881L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT881L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT881L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT881L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 882 low */
    using LUT882L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT882L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT882L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT882L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 883 low */
    using LUT883L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT883L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT883L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT883L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 884 low */
    using LUT884L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT884L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT884L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT884L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 885 low */
    using LUT885L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT885L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT885L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT885L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 886 low */
    using LUT886L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT886L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT886L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT886L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 887 low */
    using LUT887L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT887L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT887L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT887L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 888 low */
    using LUT888L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT888L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT888L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT888L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 889 low */
    using LUT889L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT889L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT889L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT889L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 890 low */
    using LUT890L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT890L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT890L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT890L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 891 low */
    using LUT891L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT891L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT891L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT891L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 892 low */
    using LUT892L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT892L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT892L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT892L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 893 low */
    using LUT893L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT893L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT893L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT893L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 894 low */
    using LUT894L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT894L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT894L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT894L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 895 low */
    using LUT895L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT895L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT895L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT895L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 896 low */
    using LUT896L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT896L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT896L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT896L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 897 low */
    using LUT897L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT897L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT897L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT897L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 898 low */
    using LUT898L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT898L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT898L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT898L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 899 low */
    using LUT899L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT899L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT899L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT899L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 900 low */
    using LUT900L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT900L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT900L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT900L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 901 low */
    using LUT901L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT901L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT901L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT901L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 902 low */
    using LUT902L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT902L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT902L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT902L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 903 low */
    using LUT903L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT903L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT903L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT903L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 904 low */
    using LUT904L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT904L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT904L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT904L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 905 low */
    using LUT905L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT905L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT905L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT905L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 906 low */
    using LUT906L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT906L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT906L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT906L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 907 low */
    using LUT907L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT907L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT907L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT907L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 908 low */
    using LUT908L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT908L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT908L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT908L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 909 low */
    using LUT909L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT909L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT909L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT909L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 910 low */
    using LUT910L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT910L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT910L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT910L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 911 low */
    using LUT911L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT911L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT911L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT911L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 912 low */
    using LUT912L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT912L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT912L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT912L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 913 low */
    using LUT913L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT913L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT913L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT913L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 914 low */
    using LUT914L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT914L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT914L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT914L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 915 low */
    using LUT915L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT915L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT915L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT915L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 916 low */
    using LUT916L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT916L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT916L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT916L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 917 low */
    using LUT917L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT917L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT917L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT917L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 918 low */
    using LUT918L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT918L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT918L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT918L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 919 low */
    using LUT919L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT919L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT919L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT919L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 920 low */
    using LUT920L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT920L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT920L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT920L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 921 low */
    using LUT921L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT921L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT921L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT921L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 922 low */
    using LUT922L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT922L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT922L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT922L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 923 low */
    using LUT923L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT923L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT923L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT923L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 924 low */
    using LUT924L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT924L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT924L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT924L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 925 low */
    using LUT925L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT925L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT925L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT925L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 926 low */
    using LUT926L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT926L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT926L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT926L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 927 low */
    using LUT927L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT927L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT927L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT927L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 928 low */
    using LUT928L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT928L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT928L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT928L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 929 low */
    using LUT929L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT929L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT929L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT929L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 930 low */
    using LUT930L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT930L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT930L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT930L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 931 low */
    using LUT931L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT931L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT931L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT931L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 932 low */
    using LUT932L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT932L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT932L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT932L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 933 low */
    using LUT933L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT933L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT933L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT933L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 934 low */
    using LUT934L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT934L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT934L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT934L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 935 low */
    using LUT935L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT935L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT935L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT935L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 936 low */
    using LUT936L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT936L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT936L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT936L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 937 low */
    using LUT937L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT937L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT937L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT937L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 938 low */
    using LUT938L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT938L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT938L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT938L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 939 low */
    using LUT939L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT939L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT939L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT939L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 940 low */
    using LUT940L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT940L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT940L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT940L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 941 low */
    using LUT941L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT941L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT941L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT941L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 942 low */
    using LUT942L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT942L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT942L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT942L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 943 low */
    using LUT943L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT943L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT943L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT943L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 944 low */
    using LUT944L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT944L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT944L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT944L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 945 low */
    using LUT945L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT945L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT945L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT945L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 946 low */
    using LUT946L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT946L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT946L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT946L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 947 low */
    using LUT947L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT947L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT947L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT947L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 948 low */
    using LUT948L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT948L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT948L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT948L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 949 low */
    using LUT949L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT949L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT949L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT949L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 950 low */
    using LUT950L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT950L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT950L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT950L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 951 low */
    using LUT951L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT951L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT951L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT951L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 952 low */
    using LUT952L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT952L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT952L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT952L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 953 low */
    using LUT953L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT953L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT953L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT953L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 954 low */
    using LUT954L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT954L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT954L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT954L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 955 low */
    using LUT955L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT955L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT955L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT955L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 956 low */
    using LUT956L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT956L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT956L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT956L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 957 low */
    using LUT957L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT957L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT957L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT957L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 958 low */
    using LUT958L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT958L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT958L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT958L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 959 low */
    using LUT959L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT959L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT959L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT959L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 960 low */
    using LUT960L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT960L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT960L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT960L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 961 low */
    using LUT961L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT961L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT961L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT961L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 962 low */
    using LUT962L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT962L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT962L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT962L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 963 low */
    using LUT963L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT963L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT963L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT963L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 964 low */
    using LUT964L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT964L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT964L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT964L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 965 low */
    using LUT965L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT965L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT965L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT965L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 966 low */
    using LUT966L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT966L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT966L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT966L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 967 low */
    using LUT967L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT967L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT967L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT967L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 968 low */
    using LUT968L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT968L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT968L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT968L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 969 low */
    using LUT969L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT969L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT969L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT969L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 970 low */
    using LUT970L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT970L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT970L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT970L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 971 low */
    using LUT971L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT971L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT971L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT971L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 972 low */
    using LUT972L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT972L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT972L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT972L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 973 low */
    using LUT973L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT973L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT973L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT973L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 974 low */
    using LUT974L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT974L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT974L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT974L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 975 low */
    using LUT975L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT975L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT975L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT975L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 976 low */
    using LUT976L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT976L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT976L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT976L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 977 low */
    using LUT977L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT977L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT977L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT977L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 978 low */
    using LUT978L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT978L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT978L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT978L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 979 low */
    using LUT979L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT979L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT979L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT979L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 980 low */
    using LUT980L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT980L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT980L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT980L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 981 low */
    using LUT981L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT981L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT981L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT981L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 982 low */
    using LUT982L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT982L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT982L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT982L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 983 low */
    using LUT983L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT983L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT983L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT983L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 984 low */
    using LUT984L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT984L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT984L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT984L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 985 low */
    using LUT985L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT985L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT985L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT985L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 986 low */
    using LUT986L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ED0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT986L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT986L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT986L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 987 low */
    using LUT987L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ED8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT987L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT987L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT987L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 988 low */
    using LUT988L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT988L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT988L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT988L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 989 low */
    using LUT989L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT989L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT989L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT989L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 990 low */
    using LUT990L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT990L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT990L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT990L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 991 low */
    using LUT991L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT991L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT991L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT991L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 992 low */
    using LUT992L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT992L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT992L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT992L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 993 low */
    using LUT993L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT993L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT993L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT993L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 994 low */
    using LUT994L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT994L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT994L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT994L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 995 low */
    using LUT995L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT995L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT995L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT995L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 996 low */
    using LUT996L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT996L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT996L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT996L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 997 low */
    using LUT997L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT997L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT997L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT997L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 998 low */
    using LUT998L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT998L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT998L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT998L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 999 low */
    using LUT999L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT999L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT999L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT999L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1000 low */
    using LUT1000L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1000L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1000L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1000L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1001 low */
    using LUT1001L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1001L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1001L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1001L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1002 low */
    using LUT1002L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1002L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1002L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1002L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1003 low */
    using LUT1003L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1003L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1003L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1003L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1004 low */
    using LUT1004L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1004L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1004L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1004L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1005 low */
    using LUT1005L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1005L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1005L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1005L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1006 low */
    using LUT1006L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1006L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1006L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1006L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1007 low */
    using LUT1007L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1007L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1007L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1007L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1008 low */
    using LUT1008L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1008L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1008L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1008L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1009 low */
    using LUT1009L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1009L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1009L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1009L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1010 low */
    using LUT1010L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1010L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1010L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1010L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1011 low */
    using LUT1011L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1011L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1011L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1011L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1012 low */
    using LUT1012L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1012L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1012L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1012L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1013 low */
    using LUT1013L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1013L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1013L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1013L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1014 low */
    using LUT1014L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1014L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1014L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1014L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1015 low */
    using LUT1015L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1015L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1015L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1015L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1016 low */
    using LUT1016L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1016L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1016L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1016L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1017 low */
    using LUT1017L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1017L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1017L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1017L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1018 low */
    using LUT1018L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1018L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1018L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1018L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1019 low */
    using LUT1019L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1019L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1019L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1019L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1020 low */
    using LUT1020L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1020L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1020L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1020L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1021 low */
    using LUT1021L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1021L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1021L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1021L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1022 low */
    using LUT1022L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1022L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1022L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1022L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1023 low */
    using LUT1023L = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Enable */
    using LUT1023L_EN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief First Valid Block */
    using LUT1023L_FVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Last Valid Block */
    using LUT1023L_LVB = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 0 high */
    using LUT0H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1004, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT0H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1 high */
    using LUT1H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x100C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 2 high */
    using LUT2H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1014, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT2H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 3 high */
    using LUT3H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x101C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT3H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 4 high */
    using LUT4H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1024, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT4H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 5 high */
    using LUT5H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x102C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT5H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 6 high */
    using LUT6H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1034, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT6H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 7 high */
    using LUT7H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x103C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT7H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 8 high */
    using LUT8H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1044, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT8H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 9 high */
    using LUT9H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x104C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT9H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 10 high */
    using LUT10H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1054, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT10H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 11 high */
    using LUT11H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x105C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT11H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 12 high */
    using LUT12H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1064, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT12H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 13 high */
    using LUT13H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x106C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT13H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 14 high */
    using LUT14H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1074, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT14H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 15 high */
    using LUT15H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x107C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT15H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 16 high */
    using LUT16H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1084, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT16H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 17 high */
    using LUT17H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x108C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT17H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 18 high */
    using LUT18H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1094, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT18H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 19 high */
    using LUT19H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x109C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT19H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 20 high */
    using LUT20H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT20H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 21 high */
    using LUT21H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT21H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 22 high */
    using LUT22H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT22H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 23 high */
    using LUT23H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT23H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 24 high */
    using LUT24H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT24H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 25 high */
    using LUT25H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT25H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 26 high */
    using LUT26H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT26H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 27 high */
    using LUT27H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT27H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 28 high */
    using LUT28H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT28H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 29 high */
    using LUT29H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT29H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 30 high */
    using LUT30H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT30H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 31 high */
    using LUT31H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT31H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 32 high */
    using LUT32H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1104, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT32H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 33 high */
    using LUT33H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x110C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT33H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 34 high */
    using LUT34H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1114, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT34H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 35 high */
    using LUT35H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x111C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT35H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 36 high */
    using LUT36H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1124, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT36H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 37 high */
    using LUT37H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x112C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT37H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 38 high */
    using LUT38H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1134, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT38H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 39 high */
    using LUT39H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x113C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT39H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 40 high */
    using LUT40H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1144, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT40H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 41 high */
    using LUT41H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x114C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT41H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 42 high */
    using LUT42H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1154, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT42H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 43 high */
    using LUT43H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x115C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT43H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 44 high */
    using LUT44H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1164, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT44H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 45 high */
    using LUT45H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x116C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT45H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 46 high */
    using LUT46H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1174, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT46H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 47 high */
    using LUT47H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x117C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT47H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 48 high */
    using LUT48H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1184, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT48H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 49 high */
    using LUT49H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x118C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT49H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 50 high */
    using LUT50H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1194, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT50H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 51 high */
    using LUT51H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x119C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT51H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 52 high */
    using LUT52H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT52H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 53 high */
    using LUT53H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT53H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 54 high */
    using LUT54H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT54H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 55 high */
    using LUT55H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT55H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 56 high */
    using LUT56H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT56H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 57 high */
    using LUT57H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT57H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 58 high */
    using LUT58H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT58H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 59 high */
    using LUT59H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT59H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 60 high */
    using LUT60H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT60H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 61 high */
    using LUT61H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT61H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 62 high */
    using LUT62H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT62H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 63 high */
    using LUT63H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT63H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 64 high */
    using LUT64H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1204, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT64H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 65 high */
    using LUT65H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x120C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT65H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 66 high */
    using LUT66H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1214, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT66H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 67 high */
    using LUT67H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x121C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT67H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 68 high */
    using LUT68H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1224, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT68H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 69 high */
    using LUT69H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x122C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT69H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 70 high */
    using LUT70H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1234, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT70H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 71 high */
    using LUT71H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x123C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT71H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 72 high */
    using LUT72H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1244, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT72H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 73 high */
    using LUT73H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x124C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT73H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 74 high */
    using LUT74H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1254, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT74H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 75 high */
    using LUT75H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x125C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT75H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 76 high */
    using LUT76H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1264, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT76H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 77 high */
    using LUT77H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x126C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT77H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 78 high */
    using LUT78H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1274, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT78H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 79 high */
    using LUT79H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x127C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT79H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 80 high */
    using LUT80H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1284, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT80H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 81 high */
    using LUT81H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x128C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT81H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 82 high */
    using LUT82H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1294, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT82H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 83 high */
    using LUT83H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x129C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT83H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 84 high */
    using LUT84H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT84H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 85 high */
    using LUT85H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT85H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 86 high */
    using LUT86H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT86H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 87 high */
    using LUT87H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT87H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 88 high */
    using LUT88H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT88H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 89 high */
    using LUT89H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT89H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 90 high */
    using LUT90H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT90H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 91 high */
    using LUT91H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT91H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 92 high */
    using LUT92H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT92H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 93 high */
    using LUT93H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT93H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 94 high */
    using LUT94H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT94H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 95 high */
    using LUT95H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT95H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 96 high */
    using LUT96H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1304, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT96H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 97 high */
    using LUT97H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x130C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT97H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 98 high */
    using LUT98H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1314, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT98H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 99 high */
    using LUT99H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x131C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT99H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 100 high */
    using LUT100H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1324, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT100H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 101 high */
    using LUT101H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x132C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT101H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 102 high */
    using LUT102H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1334, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT102H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 103 high */
    using LUT103H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x133C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT103H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 104 high */
    using LUT104H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1344, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT104H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 105 high */
    using LUT105H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x134C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT105H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 106 high */
    using LUT106H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1354, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT106H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 107 high */
    using LUT107H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x135C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT107H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 108 high */
    using LUT108H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1364, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT108H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 109 high */
    using LUT109H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x136C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT109H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 110 high */
    using LUT110H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1374, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT110H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 111 high */
    using LUT111H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x137C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT111H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 112 high */
    using LUT112H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1384, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT112H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 113 high */
    using LUT113H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x138C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT113H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 114 high */
    using LUT114H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1394, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT114H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 115 high */
    using LUT115H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x139C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT115H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 116 high */
    using LUT116H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT116H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 117 high */
    using LUT117H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT117H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 118 high */
    using LUT118H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT118H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 119 high */
    using LUT119H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT119H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 120 high */
    using LUT120H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT120H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 121 high */
    using LUT121H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT121H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 122 high */
    using LUT122H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT122H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 123 high */
    using LUT123H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT123H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 124 high */
    using LUT124H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT124H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 125 high */
    using LUT125H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT125H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 126 high */
    using LUT126H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT126H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 127 high */
    using LUT127H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT127H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 128 high */
    using LUT128H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1404, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT128H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 129 high */
    using LUT129H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x140C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT129H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 130 high */
    using LUT130H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1414, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT130H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 131 high */
    using LUT131H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x141C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT131H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 132 high */
    using LUT132H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1424, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT132H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 133 high */
    using LUT133H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x142C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT133H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 134 high */
    using LUT134H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1434, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT134H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 135 high */
    using LUT135H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x143C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT135H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 136 high */
    using LUT136H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1444, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT136H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 137 high */
    using LUT137H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x144C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT137H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 138 high */
    using LUT138H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1454, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT138H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 139 high */
    using LUT139H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x145C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT139H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 140 high */
    using LUT140H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1464, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT140H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 141 high */
    using LUT141H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x146C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT141H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 142 high */
    using LUT142H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1474, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT142H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 143 high */
    using LUT143H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x147C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT143H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 144 high */
    using LUT144H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1484, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT144H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 145 high */
    using LUT145H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x148C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT145H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 146 high */
    using LUT146H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1494, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT146H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 147 high */
    using LUT147H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x149C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT147H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 148 high */
    using LUT148H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT148H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 149 high */
    using LUT149H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT149H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 150 high */
    using LUT150H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT150H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 151 high */
    using LUT151H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT151H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 152 high */
    using LUT152H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT152H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 153 high */
    using LUT153H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT153H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 154 high */
    using LUT154H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT154H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 155 high */
    using LUT155H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT155H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 156 high */
    using LUT156H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT156H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 157 high */
    using LUT157H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT157H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 158 high */
    using LUT158H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT158H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 159 high */
    using LUT159H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT159H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 160 high */
    using LUT160H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1504, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT160H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 161 high */
    using LUT161H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x150C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT161H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 162 high */
    using LUT162H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1514, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT162H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 163 high */
    using LUT163H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x151C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT163H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 164 high */
    using LUT164H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1524, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT164H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 165 high */
    using LUT165H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x152C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT165H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 166 high */
    using LUT166H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1534, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT166H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 167 high */
    using LUT167H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x153C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT167H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 168 high */
    using LUT168H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1544, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT168H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 169 high */
    using LUT169H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x154C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT169H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 170 high */
    using LUT170H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1554, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT170H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 171 high */
    using LUT171H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x155C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT171H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 172 high */
    using LUT172H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1564, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT172H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 173 high */
    using LUT173H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x156C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT173H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 174 high */
    using LUT174H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1574, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT174H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 175 high */
    using LUT175H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x157C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT175H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 176 high */
    using LUT176H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1584, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT176H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 177 high */
    using LUT177H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x158C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT177H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 178 high */
    using LUT178H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1594, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT178H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 179 high */
    using LUT179H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x159C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT179H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 180 high */
    using LUT180H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT180H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 181 high */
    using LUT181H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT181H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 182 high */
    using LUT182H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT182H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 183 high */
    using LUT183H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT183H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 184 high */
    using LUT184H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT184H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 185 high */
    using LUT185H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT185H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 186 high */
    using LUT186H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT186H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 187 high */
    using LUT187H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT187H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 188 high */
    using LUT188H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT188H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 189 high */
    using LUT189H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT189H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 190 high */
    using LUT190H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT190H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 191 high */
    using LUT191H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT191H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 192 high */
    using LUT192H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1604, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT192H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 193 high */
    using LUT193H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x160C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT193H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 194 high */
    using LUT194H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1614, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT194H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 195 high */
    using LUT195H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x161C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT195H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 196 high */
    using LUT196H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1624, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT196H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 197 high */
    using LUT197H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x162C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT197H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 198 high */
    using LUT198H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1634, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT198H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 199 high */
    using LUT199H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x163C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT199H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 200 high */
    using LUT200H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1644, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT200H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 201 high */
    using LUT201H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x164C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT201H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 202 high */
    using LUT202H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1654, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT202H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 203 high */
    using LUT203H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x165C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT203H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 204 high */
    using LUT204H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1664, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT204H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 205 high */
    using LUT205H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x166C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT205H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 206 high */
    using LUT206H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1674, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT206H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 207 high */
    using LUT207H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x167C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT207H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 208 high */
    using LUT208H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1684, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT208H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 209 high */
    using LUT209H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x168C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT209H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 210 high */
    using LUT210H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1694, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT210H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 211 high */
    using LUT211H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x169C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT211H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 212 high */
    using LUT212H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT212H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 213 high */
    using LUT213H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT213H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 214 high */
    using LUT214H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT214H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 215 high */
    using LUT215H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT215H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 216 high */
    using LUT216H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT216H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 217 high */
    using LUT217H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT217H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 218 high */
    using LUT218H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT218H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 219 high */
    using LUT219H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT219H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 220 high */
    using LUT220H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT220H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 221 high */
    using LUT221H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT221H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 222 high */
    using LUT222H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT222H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 223 high */
    using LUT223H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT223H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 224 high */
    using LUT224H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1704, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT224H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 225 high */
    using LUT225H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x170C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT225H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 226 high */
    using LUT226H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1714, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT226H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 227 high */
    using LUT227H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x171C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT227H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 228 high */
    using LUT228H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1724, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT228H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 229 high */
    using LUT229H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x172C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT229H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 230 high */
    using LUT230H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1734, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT230H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 231 high */
    using LUT231H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x173C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT231H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 232 high */
    using LUT232H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1744, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT232H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 233 high */
    using LUT233H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x174C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT233H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 234 high */
    using LUT234H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1754, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT234H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 235 high */
    using LUT235H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x175C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT235H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 236 high */
    using LUT236H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1764, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT236H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 237 high */
    using LUT237H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x176C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT237H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 238 high */
    using LUT238H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1774, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT238H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 239 high */
    using LUT239H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x177C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT239H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 240 high */
    using LUT240H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1784, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT240H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 241 high */
    using LUT241H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x178C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT241H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 242 high */
    using LUT242H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1794, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT242H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 243 high */
    using LUT243H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x179C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT243H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 244 high */
    using LUT244H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT244H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 245 high */
    using LUT245H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT245H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 246 high */
    using LUT246H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT246H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 247 high */
    using LUT247H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT247H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 248 high */
    using LUT248H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT248H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 249 high */
    using LUT249H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT249H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 250 high */
    using LUT250H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT250H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 251 high */
    using LUT251H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT251H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 252 high */
    using LUT252H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT252H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 253 high */
    using LUT253H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT253H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 254 high */
    using LUT254H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT254H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 255 high */
    using LUT255H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT255H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 256 high */
    using LUT256H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1804, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT256H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 257 high */
    using LUT257H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x180C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT257H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 258 high */
    using LUT258H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1814, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT258H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 259 high */
    using LUT259H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x181C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT259H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 260 high */
    using LUT260H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1824, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT260H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 261 high */
    using LUT261H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x182C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT261H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 262 high */
    using LUT262H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1834, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT262H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 263 high */
    using LUT263H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x183C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT263H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 264 high */
    using LUT264H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1844, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT264H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 265 high */
    using LUT265H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x184C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT265H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 266 high */
    using LUT266H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1854, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT266H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 267 high */
    using LUT267H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x185C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT267H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 268 high */
    using LUT268H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1864, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT268H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 269 high */
    using LUT269H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x186C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT269H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 270 high */
    using LUT270H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1874, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT270H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 271 high */
    using LUT271H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x187C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT271H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 272 high */
    using LUT272H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1884, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT272H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 273 high */
    using LUT273H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x188C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT273H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 274 high */
    using LUT274H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1894, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT274H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 275 high */
    using LUT275H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x189C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT275H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 276 high */
    using LUT276H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT276H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 277 high */
    using LUT277H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT277H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 278 high */
    using LUT278H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT278H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 279 high */
    using LUT279H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT279H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 280 high */
    using LUT280H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT280H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 281 high */
    using LUT281H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT281H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 282 high */
    using LUT282H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT282H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 283 high */
    using LUT283H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT283H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 284 high */
    using LUT284H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT284H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 285 high */
    using LUT285H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT285H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 286 high */
    using LUT286H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT286H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 287 high */
    using LUT287H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT287H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 288 high */
    using LUT288H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1904, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT288H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 289 high */
    using LUT289H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x190C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT289H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 290 high */
    using LUT290H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1914, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT290H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 291 high */
    using LUT291H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x191C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT291H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 292 high */
    using LUT292H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1924, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT292H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 293 high */
    using LUT293H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x192C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT293H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 294 high */
    using LUT294H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1934, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT294H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 295 high */
    using LUT295H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x193C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT295H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 296 high */
    using LUT296H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1944, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT296H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 297 high */
    using LUT297H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x194C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT297H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 298 high */
    using LUT298H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1954, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT298H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 299 high */
    using LUT299H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x195C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT299H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 300 high */
    using LUT300H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1964, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT300H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 301 high */
    using LUT301H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x196C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT301H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 302 high */
    using LUT302H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1974, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT302H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 303 high */
    using LUT303H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x197C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT303H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 304 high */
    using LUT304H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1984, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT304H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 305 high */
    using LUT305H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x198C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT305H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 306 high */
    using LUT306H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1994, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT306H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 307 high */
    using LUT307H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x199C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT307H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 308 high */
    using LUT308H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT308H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 309 high */
    using LUT309H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT309H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 310 high */
    using LUT310H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT310H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 311 high */
    using LUT311H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT311H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 312 high */
    using LUT312H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT312H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 313 high */
    using LUT313H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT313H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 314 high */
    using LUT314H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT314H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 315 high */
    using LUT315H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT315H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 316 high */
    using LUT316H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT316H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 317 high */
    using LUT317H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT317H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 318 high */
    using LUT318H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT318H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 319 high */
    using LUT319H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT319H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 320 high */
    using LUT320H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT320H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 321 high */
    using LUT321H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT321H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 322 high */
    using LUT322H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT322H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 323 high */
    using LUT323H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT323H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 324 high */
    using LUT324H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT324H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 325 high */
    using LUT325H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT325H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 326 high */
    using LUT326H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT326H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 327 high */
    using LUT327H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT327H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 328 high */
    using LUT328H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT328H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 329 high */
    using LUT329H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT329H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 330 high */
    using LUT330H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT330H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 331 high */
    using LUT331H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT331H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 332 high */
    using LUT332H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT332H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 333 high */
    using LUT333H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT333H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 334 high */
    using LUT334H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT334H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 335 high */
    using LUT335H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT335H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 336 high */
    using LUT336H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT336H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 337 high */
    using LUT337H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT337H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 338 high */
    using LUT338H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT338H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 339 high */
    using LUT339H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT339H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 340 high */
    using LUT340H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT340H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 341 high */
    using LUT341H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT341H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 342 high */
    using LUT342H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT342H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 343 high */
    using LUT343H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ABC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT343H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 344 high */
    using LUT344H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT344H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 345 high */
    using LUT345H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ACC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT345H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 346 high */
    using LUT346H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT346H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 347 high */
    using LUT347H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ADC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT347H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 348 high */
    using LUT348H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT348H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 349 high */
    using LUT349H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT349H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 350 high */
    using LUT350H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT350H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 351 high */
    using LUT351H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT351H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 352 high */
    using LUT352H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT352H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 353 high */
    using LUT353H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT353H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 354 high */
    using LUT354H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT354H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 355 high */
    using LUT355H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT355H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 356 high */
    using LUT356H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT356H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 357 high */
    using LUT357H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT357H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 358 high */
    using LUT358H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT358H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 359 high */
    using LUT359H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT359H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 360 high */
    using LUT360H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT360H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 361 high */
    using LUT361H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT361H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 362 high */
    using LUT362H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT362H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 363 high */
    using LUT363H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT363H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 364 high */
    using LUT364H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT364H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 365 high */
    using LUT365H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT365H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 366 high */
    using LUT366H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT366H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 367 high */
    using LUT367H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT367H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 368 high */
    using LUT368H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT368H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 369 high */
    using LUT369H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT369H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 370 high */
    using LUT370H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT370H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 371 high */
    using LUT371H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT371H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 372 high */
    using LUT372H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT372H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 373 high */
    using LUT373H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT373H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 374 high */
    using LUT374H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT374H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 375 high */
    using LUT375H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT375H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 376 high */
    using LUT376H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT376H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 377 high */
    using LUT377H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT377H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 378 high */
    using LUT378H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT378H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 379 high */
    using LUT379H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT379H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 380 high */
    using LUT380H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT380H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 381 high */
    using LUT381H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT381H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 382 high */
    using LUT382H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT382H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 383 high */
    using LUT383H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT383H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 384 high */
    using LUT384H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT384H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 385 high */
    using LUT385H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT385H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 386 high */
    using LUT386H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT386H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 387 high */
    using LUT387H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT387H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 388 high */
    using LUT388H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT388H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 389 high */
    using LUT389H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT389H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 390 high */
    using LUT390H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT390H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 391 high */
    using LUT391H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT391H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 392 high */
    using LUT392H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT392H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 393 high */
    using LUT393H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT393H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 394 high */
    using LUT394H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT394H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 395 high */
    using LUT395H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT395H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 396 high */
    using LUT396H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT396H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 397 high */
    using LUT397H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT397H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 398 high */
    using LUT398H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT398H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 399 high */
    using LUT399H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT399H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 400 high */
    using LUT400H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT400H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 401 high */
    using LUT401H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT401H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 402 high */
    using LUT402H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT402H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 403 high */
    using LUT403H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT403H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 404 high */
    using LUT404H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT404H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 405 high */
    using LUT405H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT405H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 406 high */
    using LUT406H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT406H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 407 high */
    using LUT407H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT407H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 408 high */
    using LUT408H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT408H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 409 high */
    using LUT409H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT409H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 410 high */
    using LUT410H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT410H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 411 high */
    using LUT411H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT411H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 412 high */
    using LUT412H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT412H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 413 high */
    using LUT413H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT413H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 414 high */
    using LUT414H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT414H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 415 high */
    using LUT415H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT415H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 416 high */
    using LUT416H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT416H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 417 high */
    using LUT417H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT417H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 418 high */
    using LUT418H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT418H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 419 high */
    using LUT419H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT419H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 420 high */
    using LUT420H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT420H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 421 high */
    using LUT421H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT421H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 422 high */
    using LUT422H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT422H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 423 high */
    using LUT423H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT423H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 424 high */
    using LUT424H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT424H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 425 high */
    using LUT425H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT425H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 426 high */
    using LUT426H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT426H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 427 high */
    using LUT427H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT427H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 428 high */
    using LUT428H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT428H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 429 high */
    using LUT429H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT429H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 430 high */
    using LUT430H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT430H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 431 high */
    using LUT431H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT431H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 432 high */
    using LUT432H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT432H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 433 high */
    using LUT433H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT433H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 434 high */
    using LUT434H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT434H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 435 high */
    using LUT435H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT435H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 436 high */
    using LUT436H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT436H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 437 high */
    using LUT437H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT437H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 438 high */
    using LUT438H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT438H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 439 high */
    using LUT439H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT439H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 440 high */
    using LUT440H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT440H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 441 high */
    using LUT441H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT441H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 442 high */
    using LUT442H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT442H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 443 high */
    using LUT443H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT443H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 444 high */
    using LUT444H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT444H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 445 high */
    using LUT445H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT445H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 446 high */
    using LUT446H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT446H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 447 high */
    using LUT447H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT447H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 448 high */
    using LUT448H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT448H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 449 high */
    using LUT449H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT449H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 450 high */
    using LUT450H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT450H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 451 high */
    using LUT451H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT451H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 452 high */
    using LUT452H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT452H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 453 high */
    using LUT453H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT453H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 454 high */
    using LUT454H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT454H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 455 high */
    using LUT455H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT455H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 456 high */
    using LUT456H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT456H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 457 high */
    using LUT457H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT457H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 458 high */
    using LUT458H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT458H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 459 high */
    using LUT459H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT459H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 460 high */
    using LUT460H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT460H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 461 high */
    using LUT461H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT461H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 462 high */
    using LUT462H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT462H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 463 high */
    using LUT463H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT463H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 464 high */
    using LUT464H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT464H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 465 high */
    using LUT465H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT465H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 466 high */
    using LUT466H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT466H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 467 high */
    using LUT467H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT467H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 468 high */
    using LUT468H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT468H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 469 high */
    using LUT469H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT469H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 470 high */
    using LUT470H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT470H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 471 high */
    using LUT471H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT471H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 472 high */
    using LUT472H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT472H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 473 high */
    using LUT473H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ECC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT473H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 474 high */
    using LUT474H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1ED4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT474H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 475 high */
    using LUT475H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT475H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 476 high */
    using LUT476H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT476H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 477 high */
    using LUT477H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT477H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 478 high */
    using LUT478H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT478H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 479 high */
    using LUT479H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT479H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 480 high */
    using LUT480H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT480H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 481 high */
    using LUT481H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT481H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 482 high */
    using LUT482H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT482H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 483 high */
    using LUT483H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT483H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 484 high */
    using LUT484H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT484H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 485 high */
    using LUT485H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT485H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 486 high */
    using LUT486H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT486H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 487 high */
    using LUT487H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT487H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 488 high */
    using LUT488H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT488H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 489 high */
    using LUT489H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT489H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 490 high */
    using LUT490H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT490H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 491 high */
    using LUT491H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT491H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 492 high */
    using LUT492H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT492H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 493 high */
    using LUT493H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT493H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 494 high */
    using LUT494H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT494H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 495 high */
    using LUT495H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT495H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 496 high */
    using LUT496H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT496H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 497 high */
    using LUT497H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT497H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 498 high */
    using LUT498H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT498H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 499 high */
    using LUT499H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT499H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 500 high */
    using LUT500H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT500H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 501 high */
    using LUT501H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT501H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 502 high */
    using LUT502H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT502H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 503 high */
    using LUT503H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT503H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 504 high */
    using LUT504H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT504H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 505 high */
    using LUT505H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT505H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 506 high */
    using LUT506H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT506H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 507 high */
    using LUT507H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT507H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 508 high */
    using LUT508H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT508H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 509 high */
    using LUT509H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT509H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 510 high */
    using LUT510H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT510H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 511 high */
    using LUT511H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT511H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 512 high */
    using LUT512H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2004, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT512H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 513 high */
    using LUT513H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x200C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT513H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 514 high */
    using LUT514H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2014, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT514H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 515 high */
    using LUT515H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x201C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT515H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 516 high */
    using LUT516H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2024, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT516H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 517 high */
    using LUT517H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x202C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT517H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 518 high */
    using LUT518H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2034, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT518H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 519 high */
    using LUT519H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x203C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT519H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 520 high */
    using LUT520H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2044, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT520H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 521 high */
    using LUT521H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x204C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT521H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 522 high */
    using LUT522H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2054, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT522H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 523 high */
    using LUT523H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x205C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT523H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 524 high */
    using LUT524H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2064, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT524H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 525 high */
    using LUT525H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x206C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT525H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 526 high */
    using LUT526H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2074, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT526H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 527 high */
    using LUT527H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x207C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT527H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 528 high */
    using LUT528H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2084, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT528H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 529 high */
    using LUT529H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x208C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT529H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 530 high */
    using LUT530H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2094, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT530H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 531 high */
    using LUT531H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x209C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT531H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 532 high */
    using LUT532H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT532H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 533 high */
    using LUT533H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT533H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 534 high */
    using LUT534H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT534H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 535 high */
    using LUT535H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT535H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 536 high */
    using LUT536H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT536H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 537 high */
    using LUT537H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT537H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 538 high */
    using LUT538H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT538H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 539 high */
    using LUT539H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT539H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 540 high */
    using LUT540H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT540H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 541 high */
    using LUT541H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT541H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 542 high */
    using LUT542H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT542H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 543 high */
    using LUT543H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT543H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 544 high */
    using LUT544H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2104, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT544H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 545 high */
    using LUT545H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x210C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT545H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 546 high */
    using LUT546H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2114, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT546H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 547 high */
    using LUT547H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x211C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT547H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 548 high */
    using LUT548H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2124, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT548H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 549 high */
    using LUT549H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x212C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT549H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 550 high */
    using LUT550H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2134, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT550H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 551 high */
    using LUT551H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x213C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT551H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 552 high */
    using LUT552H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2144, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT552H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 553 high */
    using LUT553H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x214C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT553H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 554 high */
    using LUT554H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2154, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT554H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 555 high */
    using LUT555H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x215C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT555H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 556 high */
    using LUT556H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2164, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT556H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 557 high */
    using LUT557H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x216C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT557H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 558 high */
    using LUT558H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2174, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT558H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 559 high */
    using LUT559H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x217C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT559H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 560 high */
    using LUT560H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2184, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT560H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 561 high */
    using LUT561H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x218C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT561H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 562 high */
    using LUT562H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2194, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT562H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 563 high */
    using LUT563H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x219C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT563H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 564 high */
    using LUT564H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT564H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 565 high */
    using LUT565H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT565H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 566 high */
    using LUT566H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT566H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 567 high */
    using LUT567H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT567H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 568 high */
    using LUT568H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT568H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 569 high */
    using LUT569H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT569H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 570 high */
    using LUT570H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT570H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 571 high */
    using LUT571H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT571H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 572 high */
    using LUT572H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT572H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 573 high */
    using LUT573H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT573H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 574 high */
    using LUT574H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT574H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 575 high */
    using LUT575H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT575H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 576 high */
    using LUT576H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2204, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT576H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 577 high */
    using LUT577H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x220C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT577H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 578 high */
    using LUT578H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2214, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT578H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 579 high */
    using LUT579H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x221C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT579H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 580 high */
    using LUT580H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2224, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT580H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 581 high */
    using LUT581H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x222C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT581H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 582 high */
    using LUT582H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2234, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT582H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 583 high */
    using LUT583H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x223C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT583H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 584 high */
    using LUT584H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2244, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT584H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 585 high */
    using LUT585H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x224C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT585H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 586 high */
    using LUT586H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2254, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT586H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 587 high */
    using LUT587H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x225C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT587H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 588 high */
    using LUT588H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2264, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT588H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 589 high */
    using LUT589H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x226C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT589H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 590 high */
    using LUT590H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2274, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT590H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 591 high */
    using LUT591H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x227C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT591H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 592 high */
    using LUT592H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2284, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT592H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 593 high */
    using LUT593H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x228C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT593H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 594 high */
    using LUT594H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2294, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT594H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 595 high */
    using LUT595H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x229C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT595H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 596 high */
    using LUT596H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT596H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 597 high */
    using LUT597H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT597H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 598 high */
    using LUT598H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT598H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 599 high */
    using LUT599H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT599H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 600 high */
    using LUT600H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT600H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 601 high */
    using LUT601H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT601H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 602 high */
    using LUT602H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT602H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 603 high */
    using LUT603H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT603H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 604 high */
    using LUT604H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT604H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 605 high */
    using LUT605H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT605H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 606 high */
    using LUT606H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT606H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 607 high */
    using LUT607H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT607H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 608 high */
    using LUT608H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2304, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT608H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 609 high */
    using LUT609H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x230C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT609H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 610 high */
    using LUT610H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2314, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT610H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 611 high */
    using LUT611H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x231C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT611H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 612 high */
    using LUT612H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2324, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT612H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 613 high */
    using LUT613H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x232C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT613H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 614 high */
    using LUT614H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2334, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT614H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 615 high */
    using LUT615H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x233C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT615H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 616 high */
    using LUT616H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2344, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT616H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 617 high */
    using LUT617H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x234C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT617H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 618 high */
    using LUT618H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2354, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT618H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 619 high */
    using LUT619H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x235C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT619H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 620 high */
    using LUT620H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2364, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT620H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 621 high */
    using LUT621H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x236C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT621H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 622 high */
    using LUT622H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2374, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT622H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 623 high */
    using LUT623H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x237C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT623H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 624 high */
    using LUT624H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2384, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT624H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 625 high */
    using LUT625H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x238C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT625H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 626 high */
    using LUT626H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2394, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT626H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 627 high */
    using LUT627H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x239C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT627H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 628 high */
    using LUT628H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT628H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 629 high */
    using LUT629H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT629H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 630 high */
    using LUT630H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT630H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 631 high */
    using LUT631H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT631H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 632 high */
    using LUT632H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT632H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 633 high */
    using LUT633H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT633H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 634 high */
    using LUT634H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT634H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 635 high */
    using LUT635H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT635H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 636 high */
    using LUT636H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT636H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 637 high */
    using LUT637H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT637H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 638 high */
    using LUT638H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT638H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 639 high */
    using LUT639H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT639H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 640 high */
    using LUT640H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2404, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT640H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 641 high */
    using LUT641H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x240C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT641H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 642 high */
    using LUT642H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2414, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT642H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 643 high */
    using LUT643H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x241C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT643H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 644 high */
    using LUT644H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2424, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT644H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 645 high */
    using LUT645H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x242C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT645H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 646 high */
    using LUT646H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2434, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT646H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 647 high */
    using LUT647H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x243C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT647H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 648 high */
    using LUT648H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2444, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT648H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 649 high */
    using LUT649H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x244C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT649H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 650 high */
    using LUT650H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2454, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT650H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 651 high */
    using LUT651H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x245C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT651H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 652 high */
    using LUT652H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2464, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT652H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 653 high */
    using LUT653H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x246C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT653H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 654 high */
    using LUT654H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2474, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT654H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 655 high */
    using LUT655H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x247C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT655H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 656 high */
    using LUT656H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2484, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT656H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 657 high */
    using LUT657H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x248C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT657H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 658 high */
    using LUT658H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2494, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT658H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 659 high */
    using LUT659H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x249C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT659H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 660 high */
    using LUT660H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT660H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 661 high */
    using LUT661H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT661H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 662 high */
    using LUT662H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT662H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 663 high */
    using LUT663H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT663H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 664 high */
    using LUT664H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT664H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 665 high */
    using LUT665H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT665H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 666 high */
    using LUT666H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT666H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 667 high */
    using LUT667H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT667H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 668 high */
    using LUT668H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT668H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 669 high */
    using LUT669H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT669H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 670 high */
    using LUT670H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT670H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 671 high */
    using LUT671H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT671H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 672 high */
    using LUT672H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2504, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT672H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 673 high */
    using LUT673H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x250C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT673H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 674 high */
    using LUT674H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2514, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT674H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 675 high */
    using LUT675H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x251C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT675H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 676 high */
    using LUT676H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2524, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT676H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 677 high */
    using LUT677H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x252C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT677H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 678 high */
    using LUT678H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2534, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT678H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 679 high */
    using LUT679H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x253C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT679H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 680 high */
    using LUT680H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2544, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT680H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 681 high */
    using LUT681H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x254C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT681H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 682 high */
    using LUT682H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2554, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT682H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 683 high */
    using LUT683H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x255C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT683H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 684 high */
    using LUT684H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2564, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT684H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 685 high */
    using LUT685H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x256C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT685H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 686 high */
    using LUT686H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2574, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT686H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 687 high */
    using LUT687H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x257C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT687H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 688 high */
    using LUT688H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2584, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT688H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 689 high */
    using LUT689H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x258C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT689H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 690 high */
    using LUT690H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2594, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT690H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 691 high */
    using LUT691H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x259C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT691H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 692 high */
    using LUT692H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT692H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 693 high */
    using LUT693H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT693H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 694 high */
    using LUT694H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT694H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 695 high */
    using LUT695H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT695H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 696 high */
    using LUT696H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT696H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 697 high */
    using LUT697H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT697H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 698 high */
    using LUT698H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT698H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 699 high */
    using LUT699H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT699H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 700 high */
    using LUT700H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT700H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 701 high */
    using LUT701H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT701H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 702 high */
    using LUT702H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT702H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 703 high */
    using LUT703H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT703H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 704 high */
    using LUT704H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2604, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT704H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 705 high */
    using LUT705H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x260C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT705H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 706 high */
    using LUT706H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2614, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT706H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 707 high */
    using LUT707H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x261C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT707H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 708 high */
    using LUT708H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2624, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT708H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 709 high */
    using LUT709H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x262C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT709H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 710 high */
    using LUT710H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2634, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT710H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 711 high */
    using LUT711H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x263C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT711H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 712 high */
    using LUT712H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2644, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT712H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 713 high */
    using LUT713H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x264C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT713H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 714 high */
    using LUT714H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2654, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT714H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 715 high */
    using LUT715H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x265C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT715H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 716 high */
    using LUT716H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2664, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT716H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 717 high */
    using LUT717H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x266C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT717H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 718 high */
    using LUT718H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2674, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT718H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 719 high */
    using LUT719H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x267C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT719H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 720 high */
    using LUT720H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2684, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT720H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 721 high */
    using LUT721H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x268C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT721H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 722 high */
    using LUT722H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2694, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT722H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 723 high */
    using LUT723H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x269C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT723H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 724 high */
    using LUT724H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT724H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 725 high */
    using LUT725H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT725H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 726 high */
    using LUT726H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT726H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 727 high */
    using LUT727H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT727H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 728 high */
    using LUT728H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT728H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 729 high */
    using LUT729H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT729H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 730 high */
    using LUT730H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT730H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 731 high */
    using LUT731H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT731H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 732 high */
    using LUT732H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT732H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 733 high */
    using LUT733H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT733H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 734 high */
    using LUT734H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT734H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 735 high */
    using LUT735H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT735H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 736 high */
    using LUT736H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2704, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT736H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 737 high */
    using LUT737H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x270C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT737H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 738 high */
    using LUT738H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2714, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT738H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 739 high */
    using LUT739H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x271C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT739H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 740 high */
    using LUT740H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2724, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT740H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 741 high */
    using LUT741H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x272C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT741H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 742 high */
    using LUT742H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2734, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT742H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 743 high */
    using LUT743H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x273C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT743H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 744 high */
    using LUT744H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2744, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT744H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 745 high */
    using LUT745H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x274C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT745H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 746 high */
    using LUT746H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2754, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT746H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 747 high */
    using LUT747H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x275C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT747H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 748 high */
    using LUT748H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2764, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT748H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 749 high */
    using LUT749H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x276C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT749H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 750 high */
    using LUT750H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2774, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT750H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 751 high */
    using LUT751H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x277C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT751H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 752 high */
    using LUT752H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2784, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT752H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 753 high */
    using LUT753H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x278C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT753H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 754 high */
    using LUT754H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2794, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT754H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 755 high */
    using LUT755H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x279C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT755H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 756 high */
    using LUT756H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT756H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 757 high */
    using LUT757H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT757H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 758 high */
    using LUT758H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT758H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 759 high */
    using LUT759H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT759H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 760 high */
    using LUT760H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT760H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 761 high */
    using LUT761H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT761H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 762 high */
    using LUT762H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT762H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 763 high */
    using LUT763H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT763H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 764 high */
    using LUT764H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT764H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 765 high */
    using LUT765H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT765H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 766 high */
    using LUT766H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT766H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 767 high */
    using LUT767H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT767H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 768 high */
    using LUT768H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2804, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT768H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 769 high */
    using LUT769H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x280C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT769H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 770 high */
    using LUT770H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2814, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT770H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 771 high */
    using LUT771H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x281C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT771H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 772 high */
    using LUT772H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2824, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT772H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 773 high */
    using LUT773H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x282C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT773H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 774 high */
    using LUT774H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2834, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT774H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 775 high */
    using LUT775H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x283C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT775H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 776 high */
    using LUT776H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2844, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT776H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 777 high */
    using LUT777H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x284C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT777H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 778 high */
    using LUT778H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2854, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT778H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 779 high */
    using LUT779H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x285C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT779H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 780 high */
    using LUT780H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2864, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT780H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 781 high */
    using LUT781H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x286C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT781H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 782 high */
    using LUT782H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2874, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT782H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 783 high */
    using LUT783H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x287C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT783H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 784 high */
    using LUT784H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2884, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT784H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 785 high */
    using LUT785H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x288C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT785H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 786 high */
    using LUT786H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2894, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT786H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 787 high */
    using LUT787H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x289C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT787H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 788 high */
    using LUT788H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT788H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 789 high */
    using LUT789H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT789H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 790 high */
    using LUT790H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT790H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 791 high */
    using LUT791H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT791H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 792 high */
    using LUT792H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT792H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 793 high */
    using LUT793H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT793H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 794 high */
    using LUT794H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT794H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 795 high */
    using LUT795H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT795H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 796 high */
    using LUT796H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT796H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 797 high */
    using LUT797H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT797H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 798 high */
    using LUT798H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT798H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 799 high */
    using LUT799H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT799H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 800 high */
    using LUT800H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2904, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT800H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 801 high */
    using LUT801H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x290C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT801H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 802 high */
    using LUT802H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2914, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT802H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 803 high */
    using LUT803H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x291C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT803H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 804 high */
    using LUT804H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2924, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT804H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 805 high */
    using LUT805H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x292C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT805H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 806 high */
    using LUT806H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2934, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT806H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 807 high */
    using LUT807H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x293C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT807H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 808 high */
    using LUT808H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2944, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT808H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 809 high */
    using LUT809H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x294C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT809H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 810 high */
    using LUT810H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2954, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT810H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 811 high */
    using LUT811H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x295C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT811H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 812 high */
    using LUT812H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2964, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT812H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 813 high */
    using LUT813H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x296C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT813H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 814 high */
    using LUT814H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2974, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT814H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 815 high */
    using LUT815H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x297C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT815H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 816 high */
    using LUT816H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2984, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT816H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 817 high */
    using LUT817H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x298C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT817H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 818 high */
    using LUT818H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2994, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT818H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 819 high */
    using LUT819H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x299C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT819H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 820 high */
    using LUT820H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT820H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 821 high */
    using LUT821H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT821H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 822 high */
    using LUT822H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT822H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 823 high */
    using LUT823H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT823H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 824 high */
    using LUT824H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT824H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 825 high */
    using LUT825H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT825H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 826 high */
    using LUT826H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT826H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 827 high */
    using LUT827H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT827H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 828 high */
    using LUT828H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT828H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 829 high */
    using LUT829H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT829H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 830 high */
    using LUT830H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT830H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 831 high */
    using LUT831H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT831H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 832 high */
    using LUT832H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT832H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 833 high */
    using LUT833H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT833H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 834 high */
    using LUT834H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT834H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 835 high */
    using LUT835H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT835H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 836 high */
    using LUT836H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT836H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 837 high */
    using LUT837H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT837H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 838 high */
    using LUT838H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT838H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 839 high */
    using LUT839H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT839H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 840 high */
    using LUT840H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT840H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 841 high */
    using LUT841H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT841H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 842 high */
    using LUT842H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT842H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 843 high */
    using LUT843H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT843H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 844 high */
    using LUT844H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT844H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 845 high */
    using LUT845H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT845H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 846 high */
    using LUT846H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT846H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 847 high */
    using LUT847H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT847H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 848 high */
    using LUT848H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT848H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 849 high */
    using LUT849H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT849H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 850 high */
    using LUT850H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT850H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 851 high */
    using LUT851H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT851H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 852 high */
    using LUT852H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT852H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 853 high */
    using LUT853H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT853H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 854 high */
    using LUT854H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT854H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 855 high */
    using LUT855H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ABC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT855H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 856 high */
    using LUT856H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT856H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 857 high */
    using LUT857H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ACC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT857H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 858 high */
    using LUT858H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT858H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 859 high */
    using LUT859H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ADC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT859H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 860 high */
    using LUT860H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT860H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 861 high */
    using LUT861H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT861H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 862 high */
    using LUT862H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT862H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 863 high */
    using LUT863H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT863H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 864 high */
    using LUT864H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT864H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 865 high */
    using LUT865H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT865H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 866 high */
    using LUT866H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT866H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 867 high */
    using LUT867H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT867H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 868 high */
    using LUT868H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT868H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 869 high */
    using LUT869H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT869H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 870 high */
    using LUT870H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT870H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 871 high */
    using LUT871H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT871H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 872 high */
    using LUT872H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT872H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 873 high */
    using LUT873H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT873H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 874 high */
    using LUT874H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT874H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 875 high */
    using LUT875H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT875H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 876 high */
    using LUT876H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT876H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 877 high */
    using LUT877H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT877H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 878 high */
    using LUT878H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT878H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 879 high */
    using LUT879H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT879H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 880 high */
    using LUT880H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT880H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 881 high */
    using LUT881H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT881H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 882 high */
    using LUT882H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT882H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 883 high */
    using LUT883H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT883H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 884 high */
    using LUT884H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT884H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 885 high */
    using LUT885H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT885H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 886 high */
    using LUT886H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT886H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 887 high */
    using LUT887H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT887H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 888 high */
    using LUT888H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT888H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 889 high */
    using LUT889H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT889H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 890 high */
    using LUT890H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT890H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 891 high */
    using LUT891H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT891H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 892 high */
    using LUT892H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT892H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 893 high */
    using LUT893H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT893H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 894 high */
    using LUT894H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT894H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 895 high */
    using LUT895H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT895H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 896 high */
    using LUT896H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT896H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 897 high */
    using LUT897H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT897H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 898 high */
    using LUT898H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT898H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 899 high */
    using LUT899H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT899H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 900 high */
    using LUT900H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT900H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 901 high */
    using LUT901H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT901H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 902 high */
    using LUT902H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT902H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 903 high */
    using LUT903H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT903H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 904 high */
    using LUT904H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT904H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 905 high */
    using LUT905H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT905H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 906 high */
    using LUT906H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT906H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 907 high */
    using LUT907H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT907H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 908 high */
    using LUT908H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT908H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 909 high */
    using LUT909H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT909H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 910 high */
    using LUT910H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT910H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 911 high */
    using LUT911H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT911H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 912 high */
    using LUT912H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT912H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 913 high */
    using LUT913H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT913H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 914 high */
    using LUT914H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT914H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 915 high */
    using LUT915H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT915H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 916 high */
    using LUT916H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT916H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 917 high */
    using LUT917H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT917H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 918 high */
    using LUT918H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT918H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 919 high */
    using LUT919H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT919H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 920 high */
    using LUT920H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT920H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 921 high */
    using LUT921H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT921H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 922 high */
    using LUT922H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT922H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 923 high */
    using LUT923H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT923H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 924 high */
    using LUT924H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT924H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 925 high */
    using LUT925H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT925H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 926 high */
    using LUT926H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT926H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 927 high */
    using LUT927H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT927H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 928 high */
    using LUT928H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT928H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 929 high */
    using LUT929H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT929H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 930 high */
    using LUT930H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT930H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 931 high */
    using LUT931H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT931H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 932 high */
    using LUT932H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT932H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 933 high */
    using LUT933H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT933H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 934 high */
    using LUT934H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT934H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 935 high */
    using LUT935H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT935H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 936 high */
    using LUT936H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT936H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 937 high */
    using LUT937H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT937H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 938 high */
    using LUT938H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT938H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 939 high */
    using LUT939H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT939H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 940 high */
    using LUT940H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT940H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 941 high */
    using LUT941H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT941H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 942 high */
    using LUT942H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT942H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 943 high */
    using LUT943H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT943H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 944 high */
    using LUT944H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT944H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 945 high */
    using LUT945H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT945H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 946 high */
    using LUT946H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT946H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 947 high */
    using LUT947H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT947H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 948 high */
    using LUT948H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT948H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 949 high */
    using LUT949H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT949H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 950 high */
    using LUT950H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT950H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 951 high */
    using LUT951H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT951H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 952 high */
    using LUT952H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT952H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 953 high */
    using LUT953H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT953H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 954 high */
    using LUT954H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT954H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 955 high */
    using LUT955H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT955H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 956 high */
    using LUT956H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT956H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 957 high */
    using LUT957H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT957H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 958 high */
    using LUT958H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT958H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 959 high */
    using LUT959H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT959H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 960 high */
    using LUT960H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT960H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 961 high */
    using LUT961H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT961H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 962 high */
    using LUT962H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT962H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 963 high */
    using LUT963H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT963H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 964 high */
    using LUT964H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT964H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 965 high */
    using LUT965H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT965H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 966 high */
    using LUT966H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT966H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 967 high */
    using LUT967H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT967H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 968 high */
    using LUT968H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT968H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 969 high */
    using LUT969H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT969H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 970 high */
    using LUT970H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT970H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 971 high */
    using LUT971H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT971H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 972 high */
    using LUT972H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT972H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 973 high */
    using LUT973H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT973H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 974 high */
    using LUT974H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT974H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 975 high */
    using LUT975H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT975H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 976 high */
    using LUT976H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT976H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 977 high */
    using LUT977H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT977H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 978 high */
    using LUT978H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT978H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 979 high */
    using LUT979H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT979H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 980 high */
    using LUT980H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT980H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 981 high */
    using LUT981H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT981H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 982 high */
    using LUT982H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT982H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 983 high */
    using LUT983H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT983H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 984 high */
    using LUT984H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT984H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 985 high */
    using LUT985H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ECC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT985H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 986 high */
    using LUT986H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2ED4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT986H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 987 high */
    using LUT987H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT987H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 988 high */
    using LUT988H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT988H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 989 high */
    using LUT989H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT989H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 990 high */
    using LUT990H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT990H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 991 high */
    using LUT991H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT991H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 992 high */
    using LUT992H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT992H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 993 high */
    using LUT993H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT993H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 994 high */
    using LUT994H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT994H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 995 high */
    using LUT995H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT995H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 996 high */
    using LUT996H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT996H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 997 high */
    using LUT997H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT997H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 998 high */
    using LUT998H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT998H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 999 high */
    using LUT999H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT999H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1000 high */
    using LUT1000H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1000H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1001 high */
    using LUT1001H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1001H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1002 high */
    using LUT1002H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1002H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1003 high */
    using LUT1003H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1003H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1004 high */
    using LUT1004H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1004H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1005 high */
    using LUT1005H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1005H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1006 high */
    using LUT1006H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1006H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1007 high */
    using LUT1007H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1007H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1008 high */
    using LUT1008H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1008H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1009 high */
    using LUT1009H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1009H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1010 high */
    using LUT1010H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1010H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1011 high */
    using LUT1011H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1011H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1012 high */
    using LUT1012H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1012H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1013 high */
    using LUT1013H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1013H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1014 high */
    using LUT1014H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1014H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1015 high */
    using LUT1015H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1015H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1016 high */
    using LUT1016H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1016H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1017 high */
    using LUT1017H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1017H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1018 high */
    using LUT1018H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1018H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1019 high */
    using LUT1019H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1019H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1020 high */
    using LUT1020H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1020H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1021 high */
    using LUT1021H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1021H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1022 high */
    using LUT1022H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1022H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Graphic MMU LUT entry 1023 high */
    using LUT1023H = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Line offset */
    using LUT1023H_LO = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
}

#endif
