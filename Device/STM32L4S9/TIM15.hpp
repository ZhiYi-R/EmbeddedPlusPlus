/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32L4S9_TIM15_HPP
#define EMBEDDED_PP_STM32L4S9_TIM15_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief General purpose timers */
namespace STM32L4S9::TIM15 {

    /** @brief TIM15 control register 1 */
    using TIM15_CR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. */
    using TIM15_CR1_CEN = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter disabled (value: 0)
     *          - B_0x1: Counter enabled (value: 1)
     */
        /** @brief Counter disabled */
    constexpr std::uint16_t TIM15_CR1_CEN_B_0x0 = 0;
        /** @brief Counter enabled */
    constexpr std::uint16_t TIM15_CR1_CEN_B_0x1 = 1;

    /** @brief Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values. */
    using TIM15_CR1_UDIS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: UEV enabled. The Update (UEV) event is generated by one of the following events: (value: 0)
     *          - B_0x1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. (value: 1)
     */
        /** @brief UEV enabled. The Update (UEV) event is generated by one of the following events: */
    constexpr std::uint16_t TIM15_CR1_UDIS_B_0x0 = 0;
        /** @brief UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller. */
    constexpr std::uint16_t TIM15_CR1_UDIS_B_0x1 = 1;

    /** @brief Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller */
    using TIM15_CR1_URS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Any of the following events generate an update interrupt if enabled. These events can be: (value: 0)
     *          - B_0x1: Only counter overflow/underflow generates an update interrupt if enabled (value: 1)
     */
        /** @brief Any of the following events generate an update interrupt if enabled. These events can be: */
    constexpr std::uint16_t TIM15_CR1_URS_B_0x0 = 0;
        /** @brief Only counter overflow/underflow generates an update interrupt if enabled */
    constexpr std::uint16_t TIM15_CR1_URS_B_0x1 = 1;

    /** @brief One-pulse mode */
    using TIM15_CR1_OPM = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Counter is not stopped at update event (value: 0)
     *          - B_0x1: Counter stops counting at the next update event (clearing the bit CEN) (value: 1)
     */
        /** @brief Counter is not stopped at update event */
    constexpr std::uint16_t TIM15_CR1_OPM_B_0x0 = 0;
        /** @brief Counter stops counting at the next update event (clearing the bit CEN) */
    constexpr std::uint16_t TIM15_CR1_OPM_B_0x1 = 1;

    /** @brief Auto-reload preload enable */
    using TIM15_CR1_ARPE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_ARR register is not buffered (value: 0)
     *          - B_0x1: TIMx_ARR register is buffered (value: 1)
     */
        /** @brief TIMx_ARR register is not buffered */
    constexpr std::uint16_t TIM15_CR1_ARPE_B_0x0 = 0;
        /** @brief TIMx_ARR register is buffered */
    constexpr std::uint16_t TIM15_CR1_ARPE_B_0x1 = 1;

    /** @brief Clock division This bitfield indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (t<sub>DTS</sub>) used by the dead-time generators and the digital filters (TIx) */
    using TIM15_CR1_CKD = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: t<sub>DTS </sub>= t<sub>CK_INT</sub> (value: 0)
     *          - B_0x1: t<sub>DTS</sub> = 2 * t<sub>CK_INT</sub> (value: 1)
     *          - B_0x2: t<sub>DTS</sub> = 4 * t<sub>CK_INT</sub> (value: 2)
     *          - B_0x3: Reserved, do not program this value (value: 3)
     */
        /** @brief t<sub>DTS </sub>= t<sub>CK_INT</sub> */
    constexpr std::uint16_t TIM15_CR1_CKD_B_0x0 = 0;
        /** @brief t<sub>DTS</sub> = 2 * t<sub>CK_INT</sub> */
    constexpr std::uint16_t TIM15_CR1_CKD_B_0x1 = 1;
        /** @brief t<sub>DTS</sub> = 4 * t<sub>CK_INT</sub> */
    constexpr std::uint16_t TIM15_CR1_CKD_B_0x2 = 2;
        /** @brief Reserved, do not program this value */
    constexpr std::uint16_t TIM15_CR1_CKD_B_0x3 = 3;

    /** @brief UIF status bit remapping */
    using TIM15_CR1_UIFREMAP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. (value: 0)
     *          - B_0x1: Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. (value: 1)
     */
        /** @brief No remapping. UIF status bit is not copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM15_CR1_UIFREMAP_B_0x0 = 0;
        /** @brief Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31. */
    constexpr std::uint16_t TIM15_CR1_UIFREMAP_B_0x1 = 1;

    /** @brief TIM15 control register 2 */
    using TIM15_CR2 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output. */
    using TIM15_CR2_CCPC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCxE, CCxNE and OCxM bits are not preloaded (value: 0)
     *          - B_0x1: CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on TRGI, depending on the CCUS bit). (value: 1)
     */
        /** @brief CCxE, CCxNE and OCxM bits are not preloaded */
    constexpr std::uint16_t TIM15_CR2_CCPC_B_0x0 = 0;
        /** @brief CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on TRGI, depending on the CCUS bit). */
    constexpr std::uint16_t TIM15_CR2_CCPC_B_0x1 = 1;

    /** @brief Capture/compare control update selection Note: This bit acts only on channels that have a complementary output. */
    using TIM15_CR2_CCUS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only. (value: 0)
     *          - B_0x1: When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI. (value: 1)
     */
        /** @brief When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only. */
    constexpr std::uint16_t TIM15_CR2_CCUS_B_0x0 = 0;
        /** @brief When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI. */
    constexpr std::uint16_t TIM15_CR2_CCUS_B_0x1 = 1;

    /** @brief Capture/compare DMA selection */
    using TIM15_CR2_CCDS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CCx DMA request sent when CCx event occurs (value: 0)
     *          - B_0x1: CCx DMA requests sent when update event occurs (value: 1)
     */
        /** @brief CCx DMA request sent when CCx event occurs */
    constexpr std::uint16_t TIM15_CR2_CCDS_B_0x0 = 0;
        /** @brief CCx DMA requests sent when update event occurs */
    constexpr std::uint16_t TIM15_CR2_CCDS_B_0x1 = 1;

    /** @brief Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: */
    using TIM15_CR2_MMS = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset. (value: 0)
     *          - B_0x1: Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). (value: 1)
     *          - B_0x2: Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer. (value: 2)
     *          - B_0x3: Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO). (value: 3)
     *          - B_0x4: Compare - OC1REFC signal is used as trigger output (TRGO). (value: 4)
     *          - B_0x5: Compare - OC2REFC signal is used as trigger output (TRGO). (value: 5)
     */
        /** @brief Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset. */
    constexpr std::uint16_t TIM15_CR2_MMS_B_0x0 = 0;
        /** @brief Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). */
    constexpr std::uint16_t TIM15_CR2_MMS_B_0x1 = 1;
        /** @brief Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer. */
    constexpr std::uint16_t TIM15_CR2_MMS_B_0x2 = 2;
        /** @brief Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO). */
    constexpr std::uint16_t TIM15_CR2_MMS_B_0x3 = 3;
        /** @brief Compare - OC1REFC signal is used as trigger output (TRGO). */
    constexpr std::uint16_t TIM15_CR2_MMS_B_0x4 = 4;
        /** @brief Compare - OC2REFC signal is used as trigger output (TRGO). */
    constexpr std::uint16_t TIM15_CR2_MMS_B_0x5 = 5;

    /** @brief TI1 selection */
    using TIM15_CR2_TI1S = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: The TIMx_CH1 pin is connected to TI1 input (value: 0)
     *          - B_0x1: The TIMx_CH1, CH2 pins are connected to the TI1 input (XOR combination) (value: 1)
     */
        /** @brief The TIMx_CH1 pin is connected to TI1 input */
    constexpr std::uint16_t TIM15_CR2_TI1S_B_0x0 = 0;
        /** @brief The TIMx_CH1, CH2 pins are connected to the TI1 input (XOR combination) */
    constexpr std::uint16_t TIM15_CR2_TI1S_B_0x1 = 1;

    /** @brief Output Idle state 1 (OC1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIM15_BDTR register). */
    using TIM15_CR2_OIS1 = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1=0 (after a dead-time if OC1N is implemented) when MOE=0 (value: 0)
     *          - B_0x1: OC1=1 (after a dead-time if OC1N is implemented) when MOE=0 (value: 1)
     */
        /** @brief OC1=0 (after a dead-time if OC1N is implemented) when MOE=0 */
    constexpr std::uint16_t TIM15_CR2_OIS1_B_0x0 = 0;
        /** @brief OC1=1 (after a dead-time if OC1N is implemented) when MOE=0 */
    constexpr std::uint16_t TIM15_CR2_OIS1_B_0x1 = 1;

    /** @brief Output Idle state 1 (OC1N output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIM15_BDTR register). */
    using TIM15_CR2_OIS1N = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1N=0 after a dead-time when MOE=0 (value: 0)
     *          - B_0x1: OC1N=1 after a dead-time when MOE=0 (value: 1)
     */
        /** @brief OC1N=0 after a dead-time when MOE=0 */
    constexpr std::uint16_t TIM15_CR2_OIS1N_B_0x0 = 0;
        /** @brief OC1N=1 after a dead-time when MOE=0 */
    constexpr std::uint16_t TIM15_CR2_OIS1N_B_0x1 = 1;

    /** @brief Output idle state 2 (OC2 output) Note: This bit cannot be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in the TIM15_BDTR register). */
    using TIM15_CR2_OIS2 = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC2=0 when MOE=0 (value: 0)
     *          - B_0x1: OC2=1 when MOE=0 (value: 1)
     */
        /** @brief OC2=0 when MOE=0 */
    constexpr std::uint16_t TIM15_CR2_OIS2_B_0x0 = 0;
        /** @brief OC2=1 when MOE=0 */
    constexpr std::uint16_t TIM15_CR2_OIS2_B_0x1 = 1;

    /** @brief TIM15 slave mode control register */
    using TIM15_SMCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief SMS[0]: Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control register description. Other codes: reserved. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS= 00100 ). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer. */
    using TIM15_SMCR_SMS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. (value: 0)
     *          - B_0x4: Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers. (value: 4)
     *          - B_0x5: Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. (value: 5)
     *          - B_0x6: Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled. (value: 6)
     *          - B_0x7: External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter. (value: 7)
     */
        /** @brief Slave mode disabled - if CEN = 1 then the prescaler is clocked directly by the internal clock. */
    constexpr std::uint32_t TIM15_SMCR_SMS_B_0x0 = 0;
        /** @brief Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers. */
    constexpr std::uint32_t TIM15_SMCR_SMS_B_0x4 = 4;
        /** @brief Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled. */
    constexpr std::uint32_t TIM15_SMCR_SMS_B_0x5 = 5;
        /** @brief Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled. */
    constexpr std::uint32_t TIM15_SMCR_SMS_B_0x6 = 6;
        /** @brief External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter. */
    constexpr std::uint32_t TIM15_SMCR_SMS_B_0x7 = 7;

    /** @brief TS[0]: Trigger selection This bit field selects the trigger input to be used to synchronize the counter. Other: Reserved See Table 181: TIMx Internal trigger connection on page 910 for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition. */
    using TIM15_SMCR_TS = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Internal Trigger 0 (ITR0) (value: 0)
     *          - B_0x1: Internal Trigger 1 (ITR1) (value: 1)
     *          - B_0x2: Internal Trigger 2 (ITR2) (value: 2)
     *          - B_0x3: Internal Trigger 3 (ITR3) (value: 3)
     *          - B_0x4: TI1 Edge Detector (TI1F_ED) (value: 4)
     *          - B_0x5: Filtered Timer Input 1 (TI1FP1) (value: 5)
     *          - B_0x6: Filtered Timer Input 2 (TI2FP2) (value: 6)
     */
        /** @brief Internal Trigger 0 (ITR0) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x0 = 0;
        /** @brief Internal Trigger 1 (ITR1) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x1 = 1;
        /** @brief Internal Trigger 2 (ITR2) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x2 = 2;
        /** @brief Internal Trigger 3 (ITR3) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x3 = 3;
        /** @brief TI1 Edge Detector (TI1F_ED) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x4 = 4;
        /** @brief Filtered Timer Input 1 (TI1FP1) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x5 = 5;
        /** @brief Filtered Timer Input 2 (TI2FP2) */
    constexpr std::uint32_t TIM15_SMCR_TS_B_0x6 = 6;

    /** @brief Master/slave mode */
    using TIM15_SMCR_MSM = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint32_t TIM15_SMCR_MSM_B_0x0 = 0;
        /** @brief The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event. */
    constexpr std::uint32_t TIM15_SMCR_MSM_B_0x1 = 1;

    /** @brief SMS[3] */
    using TIM15_SMCR_SMS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TS[4:3] */
    using TIM15_SMCR_TS_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 DMA/interrupt enable register */
    using TIM15_DIER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt enable */
    using TIM15_DIER_UIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update interrupt disabled (value: 0)
     *          - B_0x1: Update interrupt enabled (value: 1)
     */
        /** @brief Update interrupt disabled */
    constexpr std::uint16_t TIM15_DIER_UIE_B_0x0 = 0;
        /** @brief Update interrupt enabled */
    constexpr std::uint16_t TIM15_DIER_UIE_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt enable */
    using TIM15_DIER_CC1IE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 interrupt disabled (value: 0)
     *          - B_0x1: CC1 interrupt enabled (value: 1)
     */
        /** @brief CC1 interrupt disabled */
    constexpr std::uint16_t TIM15_DIER_CC1IE_B_0x0 = 0;
        /** @brief CC1 interrupt enabled */
    constexpr std::uint16_t TIM15_DIER_CC1IE_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt enable */
    using TIM15_DIER_CC2IE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 interrupt disabled (value: 0)
     *          - B_0x1: CC2 interrupt enabled (value: 1)
     */
        /** @brief CC2 interrupt disabled */
    constexpr std::uint16_t TIM15_DIER_CC2IE_B_0x0 = 0;
        /** @brief CC2 interrupt enabled */
    constexpr std::uint16_t TIM15_DIER_CC2IE_B_0x1 = 1;

    /** @brief COM interrupt enable */
    using TIM15_DIER_COMIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COM interrupt disabled (value: 0)
     *          - B_0x1: COM interrupt enabled (value: 1)
     */
        /** @brief COM interrupt disabled */
    constexpr std::uint16_t TIM15_DIER_COMIE_B_0x0 = 0;
        /** @brief COM interrupt enabled */
    constexpr std::uint16_t TIM15_DIER_COMIE_B_0x1 = 1;

    /** @brief Trigger interrupt enable */
    using TIM15_DIER_TIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger interrupt disabled (value: 0)
     *          - B_0x1: Trigger interrupt enabled (value: 1)
     */
        /** @brief Trigger interrupt disabled */
    constexpr std::uint16_t TIM15_DIER_TIE_B_0x0 = 0;
        /** @brief Trigger interrupt enabled */
    constexpr std::uint16_t TIM15_DIER_TIE_B_0x1 = 1;

    /** @brief Break interrupt enable */
    using TIM15_DIER_BIE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break interrupt disabled (value: 0)
     *          - B_0x1: Break interrupt enabled (value: 1)
     */
        /** @brief Break interrupt disabled */
    constexpr std::uint16_t TIM15_DIER_BIE_B_0x0 = 0;
        /** @brief Break interrupt enabled */
    constexpr std::uint16_t TIM15_DIER_BIE_B_0x1 = 1;

    /** @brief Update DMA request enable */
    using TIM15_DIER_UDE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Update DMA request disabled (value: 0)
     *          - B_0x1: Update DMA request enabled (value: 1)
     */
        /** @brief Update DMA request disabled */
    constexpr std::uint16_t TIM15_DIER_UDE_B_0x0 = 0;
        /** @brief Update DMA request enabled */
    constexpr std::uint16_t TIM15_DIER_UDE_B_0x1 = 1;

    /** @brief Capture/Compare 1 DMA request enable */
    using TIM15_DIER_CC1DE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 DMA request disabled (value: 0)
     *          - B_0x1: CC1 DMA request enabled (value: 1)
     */
        /** @brief CC1 DMA request disabled */
    constexpr std::uint16_t TIM15_DIER_CC1DE_B_0x0 = 0;
        /** @brief CC1 DMA request enabled */
    constexpr std::uint16_t TIM15_DIER_CC1DE_B_0x1 = 1;

    /** @brief COM DMA request enable */
    using TIM15_DIER_COMDE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COM DMA request disabled (value: 0)
     *          - B_0x1: COM DMA request enabled (value: 1)
     */
        /** @brief COM DMA request disabled */
    constexpr std::uint16_t TIM15_DIER_COMDE_B_0x0 = 0;
        /** @brief COM DMA request enabled */
    constexpr std::uint16_t TIM15_DIER_COMDE_B_0x1 = 1;

    /** @brief Trigger DMA request enable */
    using TIM15_DIER_TDE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Trigger DMA request disabled (value: 0)
     *          - B_0x1: Trigger DMA request enabled (value: 1)
     */
        /** @brief Trigger DMA request disabled */
    constexpr std::uint16_t TIM15_DIER_TDE_B_0x0 = 0;
        /** @brief Trigger DMA request enabled */
    constexpr std::uint16_t TIM15_DIER_TDE_B_0x1 = 1;

    /** @brief TIM15 status register */
    using TIM15_SR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to Section 26.6.3: TIM15 slave mode control register (TIM15_SMCR)), if URS=0 and UDIS=0 in the TIMx_CR1 register. */
    using TIM15_SR_UIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No update occurred. (value: 0)
     *          - B_0x1: Update interrupt pending. This bit is set by hardware when the registers are updated: (value: 1)
     */
        /** @brief No update occurred. */
    constexpr std::uint16_t TIM15_SR_UIF_B_0x0 = 0;
        /** @brief Update interrupt pending. This bit is set by hardware when the registers are updated: */
    constexpr std::uint16_t TIM15_SR_UIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER). */
    using TIM15_SR_CC1IF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No compare match / No input capture occurred (value: 0)
     *          - B_0x1: A compare match or an input capture occurred (value: 1)
     */
        /** @brief No compare match / No input capture occurred */
    constexpr std::uint16_t TIM15_SR_CC1IF_B_0x0 = 0;
        /** @brief A compare match or an input capture occurred */
    constexpr std::uint16_t TIM15_SR_CC1IF_B_0x1 = 1;

    /** @brief Capture/Compare 2 interrupt flag refer to CC1IF description */
    using TIM15_SR_CC2IF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief COM interrupt flag */
    using TIM15_SR_COMIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No COM event occurred (value: 0)
     *          - B_0x1: COM interrupt pending (value: 1)
     */
        /** @brief No COM event occurred */
    constexpr std::uint16_t TIM15_SR_COMIF_B_0x0 = 0;
        /** @brief COM interrupt pending */
    constexpr std::uint16_t TIM15_SR_COMIF_B_0x1 = 1;

    /** @brief Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode, both edges in case gated mode is selected). It is set when the counter starts or stops when gated mode is selected. It is cleared by software. */
    using TIM15_SR_TIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No trigger event occurred (value: 0)
     *          - B_0x1: Trigger interrupt pending (value: 1)
     */
        /** @brief No trigger event occurred */
    constexpr std::uint16_t TIM15_SR_TIF_B_0x0 = 0;
        /** @brief Trigger interrupt pending */
    constexpr std::uint16_t TIM15_SR_TIF_B_0x1 = 1;

    /** @brief Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active. */
    using TIM15_SR_BIF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No break event occurred (value: 0)
     *          - B_0x1: An active level has been detected on the break input (value: 1)
     */
        /** @brief No break event occurred */
    constexpr std::uint16_t TIM15_SR_BIF_B_0x0 = 0;
        /** @brief An active level has been detected on the break input */
    constexpr std::uint16_t TIM15_SR_BIF_B_0x1 = 1;

    /** @brief Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to 0 . */
    using TIM15_SR_CC1OF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No overcapture has been detected (value: 0)
     *          - B_0x1: The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set (value: 1)
     */
        /** @brief No overcapture has been detected */
    constexpr std::uint16_t TIM15_SR_CC1OF_B_0x0 = 0;
        /** @brief The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set */
    constexpr std::uint16_t TIM15_SR_CC1OF_B_0x1 = 1;

    /** @brief Capture/Compare 2 overcapture flag Refer to CC1OF description */
    using TIM15_SR_CC2OF = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 event generation register */
    using TIM15_EGR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Update generation This bit can be set by software, it is automatically cleared by hardware. */
    using TIM15_EGR_UG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM15_EGR_UG_B_0x0 = 0;
        /** @brief Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). */
    constexpr std::uint16_t TIM15_EGR_UG_B_0x1 = 1;

    /** @brief Capture/Compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high. */
    using TIM15_EGR_CC1G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A capture/compare event is generated on channel 1: (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM15_EGR_CC1G_B_0x0 = 0;
        /** @brief A capture/compare event is generated on channel 1: */
    constexpr std::uint16_t TIM15_EGR_CC1G_B_0x1 = 1;

    /** @brief Capture/Compare 2 generation Refer to CC1G description */
    using TIM15_EGR_CC2G = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare control update generation This bit can be set by software, it is automatically cleared by hardware. Note: This bit acts only on channels that have a complementary output. */
    using TIM15_EGR_COMG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM15_EGR_COMG_B_0x0 = 0;
        /** @brief When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits */
    constexpr std::uint16_t TIM15_EGR_COMG_B_0x1 = 1;

    /** @brief Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM15_EGR_TG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM15_EGR_TG_B_0x0 = 0;
        /** @brief The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled */
    constexpr std::uint16_t TIM15_EGR_TG_B_0x1 = 1;

    /** @brief Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. */
    using TIM15_EGR_BG = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No action (value: 0)
     *          - B_0x1: A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled. (value: 1)
     */
        /** @brief No action */
    constexpr std::uint16_t TIM15_EGR_BG_B_0x0 = 0;
        /** @brief A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled. */
    constexpr std::uint16_t TIM15_EGR_BG_B_0x1 = 1;

    /** @brief TIM15 capture/compare mode register 1 */
    using TIM15_CCMR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using TIM15_CCMR1_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output (value: 0)
     *          - B_0x1: CC1 channel is configured as input, IC1 is mapped on TI1 (value: 1)
     *          - B_0x2: CC1 channel is configured as input, IC1 is mapped on TI2 (value: 2)
     *          - B_0x3: CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output */
    constexpr std::uint32_t TIM15_CCMR1_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TI1 */
    constexpr std::uint32_t TIM15_CCMR1_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TI2 */
    constexpr std::uint32_t TIM15_CCMR1_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM15_CCMR1_CC1S_B_0x3 = 3;

    /** @brief Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E= 0 (TIMx_CCER register). */
    using TIM15_CCMR1_IC1PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: no prescaler, capture is done each time an edge is detected on the capture input (value: 0)
     *          - B_0x1: capture is done once every 2 events (value: 1)
     *          - B_0x2: capture is done once every 4 events (value: 2)
     *          - B_0x3: capture is done once every 8 events (value: 3)
     */
        /** @brief no prescaler, capture is done each time an edge is detected on the capture input */
    constexpr std::uint32_t TIM15_CCMR1_IC1PSC_B_0x0 = 0;
        /** @brief capture is done once every 2 events */
    constexpr std::uint32_t TIM15_CCMR1_IC1PSC_B_0x1 = 1;
        /** @brief capture is done once every 4 events */
    constexpr std::uint32_t TIM15_CCMR1_IC1PSC_B_0x2 = 2;
        /** @brief capture is done once every 8 events */
    constexpr std::uint32_t TIM15_CCMR1_IC1PSC_B_0x3 = 3;

    /** @brief Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: */
    using TIM15_CCMR1_IC1F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, sampling is done at f<sub>DTS</sub> (value: 0)
     *          - B_0x1: f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=2 (value: 1)
     *          - B_0x2: f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=4 (value: 2)
     *          - B_0x3: f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=8 (value: 3)
     *          - B_0x4: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=6 (value: 4)
     *          - B_0x5: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=8 (value: 5)
     *          - B_0x6: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=6 (value: 6)
     *          - B_0x7: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=8 (value: 7)
     *          - B_0x8: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=6 (value: 8)
     *          - B_0x9: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=8 (value: 9)
     *          - B_0xA: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=5 (value: 10)
     *          - B_0xB: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=6 (value: 11)
     *          - B_0xC: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=8 (value: 12)
     *          - B_0xD: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=5 (value: 13)
     *          - B_0xE: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=6 (value: 14)
     *          - B_0xF: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=8 (value: 15)
     */
        /** @brief No filter, sampling is done at f<sub>DTS</sub> */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x0 = 0;
        /** @brief f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=2 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x1 = 1;
        /** @brief f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=4 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x2 = 2;
        /** @brief f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=8 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x3 = 3;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=6 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x4 = 4;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=8 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x5 = 5;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=6 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x6 = 6;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=8 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x7 = 7;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=6 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x8 = 8;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=8 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0x9 = 9;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=5 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0xA = 10;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=6 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0xB = 11;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=8 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0xC = 12;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=5 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0xD = 13;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=6 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0xE = 14;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=8 */
    constexpr std::uint32_t TIM15_CCMR1_IC1F_B_0xF = 15;

    /** @brief Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER). */
    using TIM15_CCMR1_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output (value: 0)
     *          - B_0x1: CC2 channel is configured as input, IC2 is mapped on TI2 (value: 1)
     *          - B_0x2: CC2 channel is configured as input, IC2 is mapped on TI1 (value: 2)
     *          - B_0x3: CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output */
    constexpr std::uint32_t TIM15_CCMR1_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, IC2 is mapped on TI2 */
    constexpr std::uint32_t TIM15_CCMR1_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, IC2 is mapped on TI1 */
    constexpr std::uint32_t TIM15_CCMR1_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM15_CCMR1_CC2S_B_0x3 = 3;

    /** @brief Input capture 2 prescaler */
    using TIM15_CCMR1_IC2PSC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 2 filter */
    using TIM15_CCMR1_IC2F = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 capture/compare mode register 1 */
    using TIM15_CCMR1_ALTERNATE = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER). */
    using TIM15_CCMR1_ALTERNATE_CC1S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 channel is configured as output. (value: 0)
     *          - B_0x1: CC1 channel is configured as input, IC1 is mapped on TI1. (value: 1)
     *          - B_0x2: CC1 channel is configured as input, IC1 is mapped on TI2. (value: 2)
     *          - B_0x3: CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC1 channel is configured as output. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC1S_B_0x0 = 0;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TI1. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC1S_B_0x1 = 1;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TI2. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC1S_B_0x2 = 2;
        /** @brief CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC1S_B_0x3 = 3;

    /** @brief Output Compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger. */
    using TIM15_CCMR1_ALTERNATE_OC1FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. (value: 0)
     *          - B_0x1: An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. (value: 1)
     */
        /** @brief CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1FE_B_0x0 = 0;
        /** @brief An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1FE_B_0x1 = 1;

    /** @brief Output Compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S= 00 (the channel is configured in output). */
    using TIM15_CCMR1_ALTERNATE_OC1PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. (value: 0)
     *          - B_0x1: Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. (value: 1)
     */
        /** @brief Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1PE_B_0x0 = 0;
        /** @brief Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1PE_B_0x1 = 1;

    /** @brief OC1M[2:0]: Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S= 00 (the channel is configured in output). Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from frozen mode to PWM mode. Note: On channels that have a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated. Note: The OC1M[3] bit is not contiguous, located in bit 16. */
    using TIM15_CCMR1_ALTERNATE_OC1M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. (value: 0)
     *          - B_0x1: Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 1)
     *          - B_0x2: Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). (value: 2)
     *          - B_0x3: Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1. (value: 3)
     *          - B_0x4: Force inactive level - OC1REF is forced low. (value: 4)
     *          - B_0x5: Force active level - OC1REF is forced high. (value: 5)
     *          - B_0x6: PWM mode 1 - Channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive. (value: 6)
     *          - B_0x7: PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active. (value: 7)
     */
        /** @brief Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x0 = 0;
        /** @brief Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x1 = 1;
        /** @brief Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x2 = 2;
        /** @brief Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x3 = 3;
        /** @brief Force inactive level - OC1REF is forced low. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x4 = 4;
        /** @brief Force active level - OC1REF is forced high. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x5 = 5;
        /** @brief PWM mode 1 - Channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x6 = 6;
        /** @brief PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_OC1M_B_0x7 = 7;

    /** @brief Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER). */
    using TIM15_CCMR1_ALTERNATE_CC2S = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: CC2 channel is configured as output. (value: 0)
     *          - B_0x1: CC2 channel is configured as input, IC2 is mapped on TI2. (value: 1)
     *          - B_0x2: CC2 channel is configured as input, IC2 is mapped on TI1. (value: 2)
     *          - B_0x3: CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) (value: 3)
     */
        /** @brief CC2 channel is configured as output. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC2S_B_0x0 = 0;
        /** @brief CC2 channel is configured as input, IC2 is mapped on TI2. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC2S_B_0x1 = 1;
        /** @brief CC2 channel is configured as input, IC2 is mapped on TI1. */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC2S_B_0x2 = 2;
        /** @brief CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register) */
    constexpr std::uint32_t TIM15_CCMR1_ALTERNATE_CC2S_B_0x3 = 3;

    /** @brief Output Compare 2 fast enable */
    using TIM15_CCMR1_ALTERNATE_OC2FE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Output Compare 2 preload enable */
    using TIM15_CCMR1_ALTERNATE_OC2PE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC2M[2:0]: Output Compare 2 mode */
    using TIM15_CCMR1_ALTERNATE_OC2M = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC1M[3] */
    using TIM15_CCMR1_ALTERNATE_OC1M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OC2M[3] */
    using TIM15_CCMR1_ALTERNATE_OC2M_1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 capture/compare enable register */
    using TIM15_CCER = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to Table 184 for details. */
    using TIM15_CCER_CC1E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Capture mode disabled / OC1 is not active (see below) (value: 0)
     *          - B_0x1: Capture mode enabled / OC1 signal is output on the corresponding output pin (value: 1)
     */
        /** @brief Capture mode disabled / OC1 is not active (see below) */
    constexpr std::uint16_t TIM15_CCER_CC1E_B_0x0 = 0;
        /** @brief Capture mode enabled / OC1 signal is output on the corresponding output pin */
    constexpr std::uint16_t TIM15_CCER_CC1E_B_0x1 = 1;

    /** @brief Capture/Compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: this configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). Note: On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated. */
    using TIM15_CCER_CC1P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) (value: 0)
     *          - B_0x1: OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) (value: 1)
     */
        /** @brief OC1 active high (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM15_CCER_CC1P_B_0x0 = 0;
        /** @brief OC1 active low (output mode) / Edge sensitivity selection (input mode, see below) */
    constexpr std::uint16_t TIM15_CCER_CC1P_B_0x1 = 1;

    /** @brief Capture/Compare 1 complementary output enable */
    using TIM15_CCER_CC1NE = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. (value: 0)
     *          - B_0x1: On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. (value: 1)
     */
        /** @brief Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. */
    constexpr std::uint16_t TIM15_CCER_CC1NE_B_0x0 = 0;
        /** @brief On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits. */
    constexpr std::uint16_t TIM15_CCER_CC1NE_B_0x1 = 1;

    /** @brief Capture/Compare 1 complementary output polarity */
    using TIM15_CCER_CC1NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC1N active high (value: 0)
     *          - B_0x1: OC1N active low (value: 1)
     */
        /** @brief OC1N active high */
    constexpr std::uint16_t TIM15_CCER_CC1NP_B_0x0 = 0;
        /** @brief OC1N active low */
    constexpr std::uint16_t TIM15_CCER_CC1NP_B_0x1 = 1;

    /** @brief Capture/Compare 2 output enable Refer to CC1E description */
    using TIM15_CCER_CC2E = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 output polarity Refer to CC1P description */
    using TIM15_CCER_CC2P = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 complementary output polarity Refer to CC1NP description */
    using TIM15_CCER_CC2NP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 counter */
    using TIM15_CNT = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Counter value */
    using TIM15_CNT_CNT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief UIF Copy This bit is a read-only copy of the UIF bit in the TIMx_ISR register. */
    using TIM15_CNT_UIFCPY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 prescaler */
    using TIM15_PSC = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Prescaler value */
    using TIM15_PSC_PSC = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 auto-reload register */
    using TIM15_ARR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the Section 26.5.1: Time-base unit on page 862 for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. */
    using TIM15_ARR_ARR = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 repetition counter register */
    using TIM15_RCR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Repetition counter value These bits allow the user to set-up the update rate of the compare registers (i.e. periodic transfers from preload to active registers) when preload registers are enable, as well as the update interrupt generation rate, if this interrupt is enable. Each time the REP_CNT related downcounter reaches zero, an update event is generated and it restarts counting from REP value. As REP_CNT is reloaded with REP value only at the repetition update event U_RC, any write to the TIMx_RCR register is not taken in account until the next repetition update event. It means in PWM mode (REP+1) corresponds to the number of PWM periods in edge-aligned mode. */
    using TIM15_RCR_REP = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 capture/compare register 1 */
    using TIM15_CCR1 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC1 output. If channel CC1 is configured as input: CCR1 is the counter value transferred by the last input capture 1 event (IC1). */
    using TIM15_CCR1_CCR1 = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 capture/compare register 2 */
    using TIM15_CCR2 = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Capture/Compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC2 output. If channel CC2 is configured as input: CCR2 is the counter value transferred by the last input capture 2 event (IC2). */
    using TIM15_CCR2_CCR2 = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 break and dead-time register */
    using TIM15_BDTR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Dead-time generator setup */
    using TIM15_BDTR_DTG = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset. */
    using TIM15_BDTR_LOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: LOCK OFF - No bit is write protected (value: 0)
     *          - B_0x1: LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written (value: 1)
     *          - B_0x2: LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written. (value: 2)
     *          - B_0x3: LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written. (value: 3)
     */
        /** @brief LOCK OFF - No bit is write protected */
    constexpr std::uint32_t TIM15_BDTR_LOCK_B_0x0 = 0;
        /** @brief LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written */
    constexpr std::uint32_t TIM15_BDTR_LOCK_B_0x1 = 1;
        /** @brief LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written. */
    constexpr std::uint32_t TIM15_BDTR_LOCK_B_0x2 = 2;
        /** @brief LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written. */
    constexpr std::uint32_t TIM15_BDTR_LOCK_B_0x3 = 3;

    /** @brief Off-state selection for Idle mode This bit is used when MOE=0 on channels configured as outputs. See OC/OCN enable description for more details (Section 26.6.9: TIM15 capture/compare enable register (TIM15_CCER) on page 918). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_BDTR_OSSI = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0) (value: 0)
     *          - B_0x1: When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1) (value: 1)
     */
        /** @brief When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0) */
    constexpr std::uint32_t TIM15_BDTR_OSSI_B_0x0 = 0;
        /** @brief When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1) */
    constexpr std::uint32_t TIM15_BDTR_OSSI_B_0x1 = 1;

    /** @brief Off-state selection for Run mode This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (Section 26.6.9: TIM15 capture/compare enable register (TIM15_CCER) on page 918). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_BDTR_OSSR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO, which forces a Hi-Z state) (value: 0)
     *          - B_0x1: When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer). (value: 1)
     */
        /** @brief When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO, which forces a Hi-Z state) */
    constexpr std::uint32_t TIM15_BDTR_OSSR_B_0x0 = 0;
        /** @brief When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer). */
    constexpr std::uint32_t TIM15_BDTR_OSSR_B_0x1 = 1;

    /** @brief Break enable 1; Break inputs (BRK and CCS clock failure event) enabled This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM15_BDTR_BKE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break inputs (BRK and CCS clock failure event) disabled (value: 0)
     */
        /** @brief Break inputs (BRK and CCS clock failure event) disabled */
    constexpr std::uint32_t TIM15_BDTR_BKE_B_0x0 = 0;

    /** @brief Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. */
    using TIM15_BDTR_BKP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Break input BRK is active low (value: 0)
     *          - B_0x1: Break input BRK is active high (value: 1)
     */
        /** @brief Break input BRK is active low */
    constexpr std::uint32_t TIM15_BDTR_BKP_B_0x0 = 0;
        /** @brief Break input BRK is active high */
    constexpr std::uint32_t TIM15_BDTR_BKP_B_0x1 = 1;

    /** @brief Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_BDTR_AOE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: MOE can be set only by software (value: 0)
     *          - B_0x1: MOE can be set by software or automatically at the next update event (if the break input is not be active) (value: 1)
     */
        /** @brief MOE can be set only by software */
    constexpr std::uint32_t TIM15_BDTR_AOE_B_0x0 = 0;
        /** @brief MOE can be set by software or automatically at the next update event (if the break input is not be active) */
    constexpr std::uint32_t TIM15_BDTR_AOE_B_0x1 = 1;

    /** @brief Main output enable This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. See OC/OCN enable description for more details (Section 26.6.9: TIM15 capture/compare enable register (TIM15_CCER) on page 918). */
    using TIM15_BDTR_MOE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit. (value: 0)
     *          - B_0x1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register) (value: 1)
     */
        /** @brief OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit. */
    constexpr std::uint32_t TIM15_BDTR_MOE_B_0x0 = 0;
        /** @brief OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register) */
    constexpr std::uint32_t TIM15_BDTR_MOE_B_0x1 = 1;

    /** @brief Break filter This bit-field defines the frequency used to sample the BRK input signal and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_BDTR_BKF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: No filter, BRK acts asynchronously (value: 0)
     *          - B_0x1: f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=2 (value: 1)
     *          - B_0x2: f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=4 (value: 2)
     *          - B_0x3: f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=8 (value: 3)
     *          - B_0x4: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=6 (value: 4)
     *          - B_0x5: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=8 (value: 5)
     *          - B_0x6: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=6 (value: 6)
     *          - B_0x7: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=8 (value: 7)
     *          - B_0x8: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=6 (value: 8)
     *          - B_0x9: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=8 (value: 9)
     *          - B_0xA: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=5 (value: 10)
     *          - B_0xB: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=6 (value: 11)
     *          - B_0xC: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=8 (value: 12)
     *          - B_0xD: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=5 (value: 13)
     *          - B_0xE: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=6 (value: 14)
     *          - B_0xF: f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=8 (value: 15)
     */
        /** @brief No filter, BRK acts asynchronously */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x0 = 0;
        /** @brief f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=2 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x1 = 1;
        /** @brief f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=4 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x2 = 2;
        /** @brief f<sub>SAMPLING</sub>=f<sub>CK_INT</sub>, N=8 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x3 = 3;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=6 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x4 = 4;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/2, N=8 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x5 = 5;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=6 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x6 = 6;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/4, N=8 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x7 = 7;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=6 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x8 = 8;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/8, N=8 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0x9 = 9;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=5 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0xA = 10;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=6 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0xB = 11;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/16, N=8 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0xC = 12;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=5 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0xD = 13;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=6 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0xE = 14;
        /** @brief f<sub>SAMPLING</sub>=f<sub>DTS</sub>/32, N=8 */
    constexpr std::uint32_t TIM15_BDTR_BKF_B_0xF = 15;

    /** @brief TIM15 DMA control register */
    using TIM15_DCR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA base address This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... */
    using TIM15_DCR_DBA = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: TIMx_CR1, (value: 0)
     *          - B_0x1: TIMx_CR2, (value: 1)
     *          - B_0x2: TIMx_SMCR, (value: 2)
     */
        /** @brief TIMx_CR1, */
    constexpr std::uint16_t TIM15_DCR_DBA_B_0x0 = 0;
        /** @brief TIMx_CR2, */
    constexpr std::uint16_t TIM15_DCR_DBA_B_0x1 = 1;
        /** @brief TIMx_SMCR, */
    constexpr std::uint16_t TIM15_DCR_DBA_B_0x2 = 2;

    /** @brief DMA burst length This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). ... */
    using TIM15_DCR_DBL = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 8, 5, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: 1 transfer, (value: 0)
     *          - B_0x1: 2 transfers, (value: 1)
     *          - B_0x2: 3 transfers, (value: 2)
     *          - B_0x11: 18 transfers. (value: 17)
     */
        /** @brief 1 transfer, */
    constexpr std::uint16_t TIM15_DCR_DBL_B_0x0 = 0;
        /** @brief 2 transfers, */
    constexpr std::uint16_t TIM15_DCR_DBL_B_0x1 = 1;
        /** @brief 3 transfers, */
    constexpr std::uint16_t TIM15_DCR_DBL_B_0x2 = 2;
        /** @brief 18 transfers. */
    constexpr std::uint16_t TIM15_DCR_DBL_B_0x11 = 17;

    /** @brief TIM15 DMA address for full transfer */
    using TIM15_DMAR = ::EmbeddedPP::LowLevel::Register<std::uint16_t, 0x4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR). */
    using TIM15_DMAR_DMAB = ::EmbeddedPP::LowLevel::BitField<std::uint16_t, 0, 16, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 option register 1 */
    using TIM15_OR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Input capture 1 remap */
    using TIM15_OR1_TI1_RMP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Encoder mode */
    using TIM15_OR1_ENCODER_MODE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief TIM15 option register 2 */
    using TIM15_OR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BRK BKIN input enable This bit enables the BKIN alternate function input for the timer s BRK input. BKIN input is ORed with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKINE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: BKIN input disabled (value: 0)
     *          - B_0x1: BKIN input enabled (value: 1)
     */
        /** @brief BKIN input disabled */
    constexpr std::uint32_t TIM15_OR2_BKINE_B_0x0 = 0;
        /** @brief BKIN input enabled */
    constexpr std::uint32_t TIM15_OR2_BKINE_B_0x1 = 1;

    /** @brief BRK COMP1 enable This bit enables the COMP1 for the timer s BRK input. COMP1 output is ORed with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKCMP1E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COMP1 input disabled (value: 0)
     *          - B_0x1: COMP1 input enabled (value: 1)
     */
        /** @brief COMP1 input disabled */
    constexpr std::uint32_t TIM15_OR2_BKCMP1E_B_0x0 = 0;
        /** @brief COMP1 input enabled */
    constexpr std::uint32_t TIM15_OR2_BKCMP1E_B_0x1 = 1;

    /** @brief BRK COMP2 enable This bit enables the COMP2 for the timer s BRK input. COMP2 output is ORed with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKCMP2E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COMP2 input disabled (value: 0)
     *          - B_0x1: COMP2 input enabled (value: 1)
     */
        /** @brief COMP2 input disabled */
    constexpr std::uint32_t TIM15_OR2_BKCMP2E_B_0x0 = 0;
        /** @brief COMP2 input enabled */
    constexpr std::uint32_t TIM15_OR2_BKCMP2E_B_0x1 = 1;

    /** @brief BRK dfsdm1_break[0] enable This bit enables the dfsdm1_break[0] for the timer s BRK input. dfsdm1_break[0] output is ORed with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKDF1BK0E = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: dfsdm1_break[0]input disabled (value: 0)
     *          - B_0x1: dfsdm1_break[0]input enabled (value: 1)
     */
        /** @brief dfsdm1_break[0]input disabled */
    constexpr std::uint32_t TIM15_OR2_BKDF1BK0E_B_0x0 = 0;
        /** @brief dfsdm1_break[0]input enabled */
    constexpr std::uint32_t TIM15_OR2_BKDF1BK0E_B_0x1 = 1;

    /** @brief BRK BKIN input polarity This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKINP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: BKIN input is active low (value: 0)
     *          - B_0x1: BKIN input is active high (value: 1)
     */
        /** @brief BKIN input is active low */
    constexpr std::uint32_t TIM15_OR2_BKINP_B_0x0 = 0;
        /** @brief BKIN input is active high */
    constexpr std::uint32_t TIM15_OR2_BKINP_B_0x1 = 1;

    /** @brief BRK COMP1 input polarity This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKCMP1P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COMP1 input is active low (value: 0)
     *          - B_0x1: COMP1 input is active high (value: 1)
     */
        /** @brief COMP1 input is active low */
    constexpr std::uint32_t TIM15_OR2_BKCMP1P_B_0x0 = 0;
        /** @brief COMP1 input is active high */
    constexpr std::uint32_t TIM15_OR2_BKCMP1P_B_0x1 = 1;

    /** @brief BRK COMP2 input polarity This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). */
    using TIM15_OR2_BKCMP2P = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: COMP2 input is active low (value: 0)
     *          - B_0x1: COMP2 input is active high (value: 1)
     */
        /** @brief COMP2 input is active low */
    constexpr std::uint32_t TIM15_OR2_BKCMP2P_B_0x0 = 0;
        /** @brief COMP2 input is active high */
    constexpr std::uint32_t TIM15_OR2_BKCMP2P_B_0x1 = 1;

}

#endif
