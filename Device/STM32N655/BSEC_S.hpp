/* Auto-generated file. Do not edit manually. */

#ifndef EMBEDDED_PP_STM32N655_BSEC_S_HPP
#define EMBEDDED_PP_STM32N655_BSEC_S_HPP

#include <cstdint>
#include "Core/Common.hpp"
#include "Core/BitField.hpp"
#include "Core/Register.hpp"

/** @brief Boot and security control */
namespace STM32N655::BSEC_S {

    /** @brief BSEC fuse word 0 value register */
    using BSEC_FVR0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR0_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 1 value register */
    using BSEC_FVR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR1_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 2 value register */
    using BSEC_FVR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR2_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 3 value register */
    using BSEC_FVR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR3_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 4 value register */
    using BSEC_FVR4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR4_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 5 value register */
    using BSEC_FVR5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR5_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 6 value register */
    using BSEC_FVR6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR6_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 7 value register */
    using BSEC_FVR7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR7_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 8 value register */
    using BSEC_FVR8 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR8_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 9 value register */
    using BSEC_FVR9 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR9_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 10 value register */
    using BSEC_FVR10 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR10_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 11 value register */
    using BSEC_FVR11 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR11_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 12 value register */
    using BSEC_FVR12 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x30, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR12_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 13 value register */
    using BSEC_FVR13 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR13_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 14 value register */
    using BSEC_FVR14 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x38, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR14_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 15 value register */
    using BSEC_FVR15 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR15_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 16 value register */
    using BSEC_FVR16 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR16_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 17 value register */
    using BSEC_FVR17 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR17_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 18 value register */
    using BSEC_FVR18 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR18_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 19 value register */
    using BSEC_FVR19 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR19_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 20 value register */
    using BSEC_FVR20 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR20_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 21 value register */
    using BSEC_FVR21 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR21_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 22 value register */
    using BSEC_FVR22 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR22_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 23 value register */
    using BSEC_FVR23 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR23_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 24 value register */
    using BSEC_FVR24 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x60, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR24_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 25 value register */
    using BSEC_FVR25 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x64, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR25_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 26 value register */
    using BSEC_FVR26 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x68, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR26_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 27 value register */
    using BSEC_FVR27 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x6C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR27_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 28 value register */
    using BSEC_FVR28 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x70, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR28_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 29 value register */
    using BSEC_FVR29 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x74, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR29_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 30 value register */
    using BSEC_FVR30 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x78, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR30_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 31 value register */
    using BSEC_FVR31 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x7C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR31_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 32 value register */
    using BSEC_FVR32 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR32_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 33 value register */
    using BSEC_FVR33 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR33_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 34 value register */
    using BSEC_FVR34 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR34_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 35 value register */
    using BSEC_FVR35 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR35_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 36 value register */
    using BSEC_FVR36 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR36_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 37 value register */
    using BSEC_FVR37 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR37_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 38 value register */
    using BSEC_FVR38 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR38_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 39 value register */
    using BSEC_FVR39 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR39_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 40 value register */
    using BSEC_FVR40 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xA0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR40_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 41 value register */
    using BSEC_FVR41 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xA4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR41_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 42 value register */
    using BSEC_FVR42 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xA8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR42_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 43 value register */
    using BSEC_FVR43 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xAC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR43_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 44 value register */
    using BSEC_FVR44 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xB0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR44_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 45 value register */
    using BSEC_FVR45 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xB4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR45_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 46 value register */
    using BSEC_FVR46 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xB8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR46_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 47 value register */
    using BSEC_FVR47 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xBC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR47_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 48 value register */
    using BSEC_FVR48 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR48_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 49 value register */
    using BSEC_FVR49 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR49_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 50 value register */
    using BSEC_FVR50 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR50_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 51 value register */
    using BSEC_FVR51 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xCC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR51_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 52 value register */
    using BSEC_FVR52 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xD0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR52_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 53 value register */
    using BSEC_FVR53 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xD4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR53_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 54 value register */
    using BSEC_FVR54 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xD8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR54_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 55 value register */
    using BSEC_FVR55 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xDC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR55_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 56 value register */
    using BSEC_FVR56 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR56_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 57 value register */
    using BSEC_FVR57 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR57_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 58 value register */
    using BSEC_FVR58 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR58_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 59 value register */
    using BSEC_FVR59 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR59_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 60 value register */
    using BSEC_FVR60 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR60_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 61 value register */
    using BSEC_FVR61 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR61_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 62 value register */
    using BSEC_FVR62 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR62_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 63 value register */
    using BSEC_FVR63 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xFC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR63_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 64 value register */
    using BSEC_FVR64 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x100, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR64_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 65 value register */
    using BSEC_FVR65 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x104, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR65_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 66 value register */
    using BSEC_FVR66 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x108, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR66_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 67 value register */
    using BSEC_FVR67 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x10C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR67_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 68 value register */
    using BSEC_FVR68 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x110, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR68_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 69 value register */
    using BSEC_FVR69 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x114, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR69_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 70 value register */
    using BSEC_FVR70 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x118, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR70_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 71 value register */
    using BSEC_FVR71 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x11C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR71_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 72 value register */
    using BSEC_FVR72 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x120, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR72_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 73 value register */
    using BSEC_FVR73 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x124, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR73_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 74 value register */
    using BSEC_FVR74 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x128, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR74_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 75 value register */
    using BSEC_FVR75 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x12C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR75_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 76 value register */
    using BSEC_FVR76 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x130, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR76_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 77 value register */
    using BSEC_FVR77 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x134, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR77_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 78 value register */
    using BSEC_FVR78 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x138, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR78_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 79 value register */
    using BSEC_FVR79 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x13C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR79_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 80 value register */
    using BSEC_FVR80 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x140, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR80_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 81 value register */
    using BSEC_FVR81 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x144, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR81_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 82 value register */
    using BSEC_FVR82 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x148, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR82_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 83 value register */
    using BSEC_FVR83 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x14C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR83_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 84 value register */
    using BSEC_FVR84 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x150, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR84_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 85 value register */
    using BSEC_FVR85 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x154, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR85_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 86 value register */
    using BSEC_FVR86 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x158, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR86_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 87 value register */
    using BSEC_FVR87 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x15C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR87_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 88 value register */
    using BSEC_FVR88 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x160, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR88_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 89 value register */
    using BSEC_FVR89 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x164, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR89_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 90 value register */
    using BSEC_FVR90 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x168, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR90_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 91 value register */
    using BSEC_FVR91 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x16C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR91_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 92 value register */
    using BSEC_FVR92 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x170, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR92_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 93 value register */
    using BSEC_FVR93 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x174, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR93_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 94 value register */
    using BSEC_FVR94 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x178, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR94_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 95 value register */
    using BSEC_FVR95 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x17C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR95_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 96 value register */
    using BSEC_FVR96 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x180, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR96_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 97 value register */
    using BSEC_FVR97 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x184, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR97_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 98 value register */
    using BSEC_FVR98 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x188, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR98_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 99 value register */
    using BSEC_FVR99 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x18C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR99_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 100 value register */
    using BSEC_FVR100 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x190, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR100_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 101 value register */
    using BSEC_FVR101 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x194, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR101_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 102 value register */
    using BSEC_FVR102 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x198, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR102_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 103 value register */
    using BSEC_FVR103 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x19C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR103_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 104 value register */
    using BSEC_FVR104 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR104_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 105 value register */
    using BSEC_FVR105 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR105_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 106 value register */
    using BSEC_FVR106 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR106_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 107 value register */
    using BSEC_FVR107 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR107_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 108 value register */
    using BSEC_FVR108 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR108_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 109 value register */
    using BSEC_FVR109 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR109_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 110 value register */
    using BSEC_FVR110 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR110_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 111 value register */
    using BSEC_FVR111 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR111_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 112 value register */
    using BSEC_FVR112 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR112_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 113 value register */
    using BSEC_FVR113 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR113_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 114 value register */
    using BSEC_FVR114 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR114_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 115 value register */
    using BSEC_FVR115 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR115_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 116 value register */
    using BSEC_FVR116 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR116_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 117 value register */
    using BSEC_FVR117 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR117_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 118 value register */
    using BSEC_FVR118 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR118_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 119 value register */
    using BSEC_FVR119 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR119_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 120 value register */
    using BSEC_FVR120 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR120_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 121 value register */
    using BSEC_FVR121 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR121_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 122 value register */
    using BSEC_FVR122 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR122_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 123 value register */
    using BSEC_FVR123 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR123_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 124 value register */
    using BSEC_FVR124 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR124_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 125 value register */
    using BSEC_FVR125 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR125_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 126 value register */
    using BSEC_FVR126 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR126_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 127 value register */
    using BSEC_FVR127 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x1FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR127_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 128 value register */
    using BSEC_FVR128 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x200, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR128_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 129 value register */
    using BSEC_FVR129 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x204, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR129_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 130 value register */
    using BSEC_FVR130 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x208, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR130_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 131 value register */
    using BSEC_FVR131 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x20C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR131_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 132 value register */
    using BSEC_FVR132 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x210, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR132_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 133 value register */
    using BSEC_FVR133 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x214, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR133_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 134 value register */
    using BSEC_FVR134 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x218, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR134_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 135 value register */
    using BSEC_FVR135 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x21C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR135_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 136 value register */
    using BSEC_FVR136 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x220, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR136_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 137 value register */
    using BSEC_FVR137 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x224, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR137_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 138 value register */
    using BSEC_FVR138 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x228, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR138_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 139 value register */
    using BSEC_FVR139 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x22C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR139_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 140 value register */
    using BSEC_FVR140 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x230, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR140_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 141 value register */
    using BSEC_FVR141 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x234, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR141_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 142 value register */
    using BSEC_FVR142 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x238, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR142_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 143 value register */
    using BSEC_FVR143 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x23C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR143_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 144 value register */
    using BSEC_FVR144 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x240, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR144_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 145 value register */
    using BSEC_FVR145 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x244, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR145_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 146 value register */
    using BSEC_FVR146 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x248, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR146_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 147 value register */
    using BSEC_FVR147 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x24C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR147_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 148 value register */
    using BSEC_FVR148 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x250, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR148_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 149 value register */
    using BSEC_FVR149 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x254, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR149_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 150 value register */
    using BSEC_FVR150 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x258, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR150_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 151 value register */
    using BSEC_FVR151 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x25C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR151_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 152 value register */
    using BSEC_FVR152 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x260, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR152_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 153 value register */
    using BSEC_FVR153 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x264, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR153_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 154 value register */
    using BSEC_FVR154 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x268, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR154_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 155 value register */
    using BSEC_FVR155 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x26C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR155_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 156 value register */
    using BSEC_FVR156 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x270, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR156_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 157 value register */
    using BSEC_FVR157 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x274, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR157_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 158 value register */
    using BSEC_FVR158 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x278, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR158_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 159 value register */
    using BSEC_FVR159 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x27C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR159_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 160 value register */
    using BSEC_FVR160 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x280, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR160_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 161 value register */
    using BSEC_FVR161 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x284, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR161_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 162 value register */
    using BSEC_FVR162 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x288, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR162_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 163 value register */
    using BSEC_FVR163 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x28C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR163_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 164 value register */
    using BSEC_FVR164 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x290, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR164_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 165 value register */
    using BSEC_FVR165 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x294, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR165_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 166 value register */
    using BSEC_FVR166 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x298, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR166_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 167 value register */
    using BSEC_FVR167 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x29C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR167_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 168 value register */
    using BSEC_FVR168 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR168_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 169 value register */
    using BSEC_FVR169 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR169_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 170 value register */
    using BSEC_FVR170 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR170_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 171 value register */
    using BSEC_FVR171 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR171_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 172 value register */
    using BSEC_FVR172 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR172_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 173 value register */
    using BSEC_FVR173 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR173_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 174 value register */
    using BSEC_FVR174 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR174_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 175 value register */
    using BSEC_FVR175 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR175_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 176 value register */
    using BSEC_FVR176 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR176_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 177 value register */
    using BSEC_FVR177 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR177_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 178 value register */
    using BSEC_FVR178 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR178_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 179 value register */
    using BSEC_FVR179 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR179_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 180 value register */
    using BSEC_FVR180 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR180_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 181 value register */
    using BSEC_FVR181 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR181_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 182 value register */
    using BSEC_FVR182 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR182_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 183 value register */
    using BSEC_FVR183 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR183_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 184 value register */
    using BSEC_FVR184 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR184_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 185 value register */
    using BSEC_FVR185 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR185_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 186 value register */
    using BSEC_FVR186 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR186_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 187 value register */
    using BSEC_FVR187 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR187_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 188 value register */
    using BSEC_FVR188 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR188_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 189 value register */
    using BSEC_FVR189 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR189_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 190 value register */
    using BSEC_FVR190 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR190_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 191 value register */
    using BSEC_FVR191 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x2FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR191_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 192 value register */
    using BSEC_FVR192 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x300, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR192_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 193 value register */
    using BSEC_FVR193 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x304, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR193_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 194 value register */
    using BSEC_FVR194 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x308, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR194_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 195 value register */
    using BSEC_FVR195 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x30C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR195_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 196 value register */
    using BSEC_FVR196 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x310, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR196_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 197 value register */
    using BSEC_FVR197 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x314, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR197_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 198 value register */
    using BSEC_FVR198 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x318, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR198_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 199 value register */
    using BSEC_FVR199 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x31C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR199_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 200 value register */
    using BSEC_FVR200 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x320, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR200_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 201 value register */
    using BSEC_FVR201 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x324, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR201_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 202 value register */
    using BSEC_FVR202 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x328, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR202_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 203 value register */
    using BSEC_FVR203 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x32C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR203_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 204 value register */
    using BSEC_FVR204 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x330, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR204_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 205 value register */
    using BSEC_FVR205 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x334, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR205_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 206 value register */
    using BSEC_FVR206 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x338, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR206_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 207 value register */
    using BSEC_FVR207 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x33C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR207_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 208 value register */
    using BSEC_FVR208 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x340, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR208_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 209 value register */
    using BSEC_FVR209 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x344, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR209_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 210 value register */
    using BSEC_FVR210 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x348, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR210_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 211 value register */
    using BSEC_FVR211 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x34C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR211_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 212 value register */
    using BSEC_FVR212 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x350, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR212_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 213 value register */
    using BSEC_FVR213 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x354, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR213_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 214 value register */
    using BSEC_FVR214 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x358, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR214_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 215 value register */
    using BSEC_FVR215 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x35C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR215_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 216 value register */
    using BSEC_FVR216 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x360, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR216_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 217 value register */
    using BSEC_FVR217 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x364, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR217_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 218 value register */
    using BSEC_FVR218 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x368, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR218_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 219 value register */
    using BSEC_FVR219 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x36C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR219_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 220 value register */
    using BSEC_FVR220 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x370, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR220_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 221 value register */
    using BSEC_FVR221 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x374, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR221_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 222 value register */
    using BSEC_FVR222 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x378, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR222_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 223 value register */
    using BSEC_FVR223 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x37C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR223_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 224 value register */
    using BSEC_FVR224 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x380, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR224_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 225 value register */
    using BSEC_FVR225 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x384, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR225_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 226 value register */
    using BSEC_FVR226 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x388, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR226_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 227 value register */
    using BSEC_FVR227 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x38C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR227_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 228 value register */
    using BSEC_FVR228 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x390, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR228_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 229 value register */
    using BSEC_FVR229 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x394, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR229_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 230 value register */
    using BSEC_FVR230 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x398, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR230_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 231 value register */
    using BSEC_FVR231 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x39C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR231_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 232 value register */
    using BSEC_FVR232 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR232_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 233 value register */
    using BSEC_FVR233 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR233_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 234 value register */
    using BSEC_FVR234 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR234_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 235 value register */
    using BSEC_FVR235 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR235_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 236 value register */
    using BSEC_FVR236 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR236_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 237 value register */
    using BSEC_FVR237 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR237_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 238 value register */
    using BSEC_FVR238 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR238_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 239 value register */
    using BSEC_FVR239 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR239_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 240 value register */
    using BSEC_FVR240 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR240_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 241 value register */
    using BSEC_FVR241 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR241_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 242 value register */
    using BSEC_FVR242 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR242_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 243 value register */
    using BSEC_FVR243 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR243_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 244 value register */
    using BSEC_FVR244 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR244_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 245 value register */
    using BSEC_FVR245 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR245_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 246 value register */
    using BSEC_FVR246 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR246_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 247 value register */
    using BSEC_FVR247 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR247_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 248 value register */
    using BSEC_FVR248 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR248_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 249 value register */
    using BSEC_FVR249 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR249_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 250 value register */
    using BSEC_FVR250 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR250_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 251 value register */
    using BSEC_FVR251 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR251_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 252 value register */
    using BSEC_FVR252 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR252_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 253 value register */
    using BSEC_FVR253 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR253_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 254 value register */
    using BSEC_FVR254 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR254_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 255 value register */
    using BSEC_FVR255 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x3FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR255_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 256 value register */
    using BSEC_FVR256 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x400, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR256_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 257 value register */
    using BSEC_FVR257 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x404, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR257_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 258 value register */
    using BSEC_FVR258 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x408, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR258_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 259 value register */
    using BSEC_FVR259 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x40C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR259_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 260 value register */
    using BSEC_FVR260 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x410, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR260_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 261 value register */
    using BSEC_FVR261 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x414, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR261_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 262 value register */
    using BSEC_FVR262 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x418, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR262_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 263 value register */
    using BSEC_FVR263 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x41C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR263_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 264 value register */
    using BSEC_FVR264 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x420, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR264_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 265 value register */
    using BSEC_FVR265 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x424, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR265_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 266 value register */
    using BSEC_FVR266 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x428, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR266_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 267 value register */
    using BSEC_FVR267 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x42C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR267_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 268 value register */
    using BSEC_FVR268 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x430, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR268_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 269 value register */
    using BSEC_FVR269 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x434, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR269_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 270 value register */
    using BSEC_FVR270 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x438, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR270_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 271 value register */
    using BSEC_FVR271 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x43C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR271_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 272 value register */
    using BSEC_FVR272 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x440, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR272_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 273 value register */
    using BSEC_FVR273 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x444, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR273_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 274 value register */
    using BSEC_FVR274 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x448, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR274_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 275 value register */
    using BSEC_FVR275 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x44C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR275_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 276 value register */
    using BSEC_FVR276 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x450, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR276_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 277 value register */
    using BSEC_FVR277 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x454, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR277_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 278 value register */
    using BSEC_FVR278 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x458, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR278_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 279 value register */
    using BSEC_FVR279 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x45C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR279_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 280 value register */
    using BSEC_FVR280 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x460, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR280_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 281 value register */
    using BSEC_FVR281 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x464, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR281_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 282 value register */
    using BSEC_FVR282 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x468, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR282_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 283 value register */
    using BSEC_FVR283 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x46C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR283_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 284 value register */
    using BSEC_FVR284 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x470, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR284_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 285 value register */
    using BSEC_FVR285 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x474, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR285_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 286 value register */
    using BSEC_FVR286 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x478, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR286_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 287 value register */
    using BSEC_FVR287 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x47C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR287_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 288 value register */
    using BSEC_FVR288 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x480, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR288_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 289 value register */
    using BSEC_FVR289 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x484, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR289_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 290 value register */
    using BSEC_FVR290 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x488, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR290_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 291 value register */
    using BSEC_FVR291 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x48C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR291_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 292 value register */
    using BSEC_FVR292 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x490, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR292_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 293 value register */
    using BSEC_FVR293 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x494, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR293_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 294 value register */
    using BSEC_FVR294 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x498, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR294_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 295 value register */
    using BSEC_FVR295 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x49C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR295_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 296 value register */
    using BSEC_FVR296 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR296_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 297 value register */
    using BSEC_FVR297 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR297_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 298 value register */
    using BSEC_FVR298 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR298_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 299 value register */
    using BSEC_FVR299 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR299_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 300 value register */
    using BSEC_FVR300 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR300_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 301 value register */
    using BSEC_FVR301 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR301_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 302 value register */
    using BSEC_FVR302 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR302_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 303 value register */
    using BSEC_FVR303 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR303_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 304 value register */
    using BSEC_FVR304 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR304_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 305 value register */
    using BSEC_FVR305 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR305_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 306 value register */
    using BSEC_FVR306 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR306_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 307 value register */
    using BSEC_FVR307 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR307_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 308 value register */
    using BSEC_FVR308 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR308_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 309 value register */
    using BSEC_FVR309 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR309_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 310 value register */
    using BSEC_FVR310 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR310_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 311 value register */
    using BSEC_FVR311 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR311_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 312 value register */
    using BSEC_FVR312 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR312_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 313 value register */
    using BSEC_FVR313 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR313_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 314 value register */
    using BSEC_FVR314 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR314_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 315 value register */
    using BSEC_FVR315 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR315_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 316 value register */
    using BSEC_FVR316 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4F0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR316_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 317 value register */
    using BSEC_FVR317 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4F4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR317_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 318 value register */
    using BSEC_FVR318 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4F8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR318_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 319 value register */
    using BSEC_FVR319 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x4FC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR319_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 320 value register */
    using BSEC_FVR320 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x500, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR320_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 321 value register */
    using BSEC_FVR321 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x504, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR321_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 322 value register */
    using BSEC_FVR322 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x508, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR322_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 323 value register */
    using BSEC_FVR323 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x50C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR323_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 324 value register */
    using BSEC_FVR324 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x510, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR324_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 325 value register */
    using BSEC_FVR325 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x514, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR325_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 326 value register */
    using BSEC_FVR326 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x518, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR326_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 327 value register */
    using BSEC_FVR327 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x51C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR327_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 328 value register */
    using BSEC_FVR328 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x520, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR328_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 329 value register */
    using BSEC_FVR329 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x524, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR329_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 330 value register */
    using BSEC_FVR330 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x528, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR330_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 331 value register */
    using BSEC_FVR331 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x52C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR331_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 332 value register */
    using BSEC_FVR332 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x530, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR332_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 333 value register */
    using BSEC_FVR333 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x534, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR333_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 334 value register */
    using BSEC_FVR334 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x538, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR334_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 335 value register */
    using BSEC_FVR335 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x53C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR335_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 336 value register */
    using BSEC_FVR336 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x540, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR336_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 337 value register */
    using BSEC_FVR337 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x544, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR337_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 338 value register */
    using BSEC_FVR338 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x548, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR338_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 339 value register */
    using BSEC_FVR339 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x54C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR339_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 340 value register */
    using BSEC_FVR340 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x550, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR340_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 341 value register */
    using BSEC_FVR341 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x554, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR341_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 342 value register */
    using BSEC_FVR342 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x558, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR342_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 343 value register */
    using BSEC_FVR343 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x55C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR343_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 344 value register */
    using BSEC_FVR344 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x560, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR344_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 345 value register */
    using BSEC_FVR345 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x564, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR345_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 346 value register */
    using BSEC_FVR346 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x568, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR346_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 347 value register */
    using BSEC_FVR347 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x56C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR347_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 348 value register */
    using BSEC_FVR348 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x570, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR348_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 349 value register */
    using BSEC_FVR349 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x574, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR349_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 350 value register */
    using BSEC_FVR350 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x578, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR350_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 351 value register */
    using BSEC_FVR351 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x57C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR351_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 352 value register */
    using BSEC_FVR352 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x580, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR352_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 353 value register */
    using BSEC_FVR353 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x584, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR353_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 354 value register */
    using BSEC_FVR354 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x588, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR354_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 355 value register */
    using BSEC_FVR355 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x58C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR355_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 356 value register */
    using BSEC_FVR356 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x590, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR356_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 357 value register */
    using BSEC_FVR357 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x594, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR357_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 358 value register */
    using BSEC_FVR358 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x598, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR358_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 359 value register */
    using BSEC_FVR359 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x59C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR359_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 360 value register */
    using BSEC_FVR360 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR360_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 361 value register */
    using BSEC_FVR361 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR361_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 362 value register */
    using BSEC_FVR362 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR362_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 363 value register */
    using BSEC_FVR363 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR363_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 364 value register */
    using BSEC_FVR364 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5B0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR364_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 365 value register */
    using BSEC_FVR365 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5B4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR365_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 366 value register */
    using BSEC_FVR366 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5B8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR366_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 367 value register */
    using BSEC_FVR367 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5BC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR367_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 368 value register */
    using BSEC_FVR368 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR368_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 369 value register */
    using BSEC_FVR369 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR369_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 370 value register */
    using BSEC_FVR370 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR370_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 371 value register */
    using BSEC_FVR371 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR371_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 372 value register */
    using BSEC_FVR372 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR372_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 373 value register */
    using BSEC_FVR373 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR373_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 374 value register */
    using BSEC_FVR374 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR374_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC fuse word 375 value register */
    using BSEC_FVR375 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x5DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief fuse value */
    using BSEC_FVR375_FV = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC sticky programming lock register 0 */
    using BSEC_SPLOCK0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x800, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 0 */
    using BSEC_SPLOCK0_SPLOCK0 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 0 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 0 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 0 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK0_B_0x0 = 0;
        /** @brief Attempt to program fuse word 0 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK0_B_0x1 = 1;

    /** @brief Sticky programming lock for word 1 */
    using BSEC_SPLOCK0_SPLOCK1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 1 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 1 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 1 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK1_B_0x0 = 0;
        /** @brief Attempt to program fuse word 1 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK1_B_0x1 = 1;

    /** @brief Sticky programming lock for word 2 */
    using BSEC_SPLOCK0_SPLOCK2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 2 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 2 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 2 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK2_B_0x0 = 0;
        /** @brief Attempt to program fuse word 2 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK2_B_0x1 = 1;

    /** @brief Sticky programming lock for word 3 */
    using BSEC_SPLOCK0_SPLOCK3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 3 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 3 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 3 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK3_B_0x0 = 0;
        /** @brief Attempt to program fuse word 3 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK3_B_0x1 = 1;

    /** @brief Sticky programming lock for word 4 */
    using BSEC_SPLOCK0_SPLOCK4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 4 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 4 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 4 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK4_B_0x0 = 0;
        /** @brief Attempt to program fuse word 4 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK4_B_0x1 = 1;

    /** @brief Sticky programming lock for word 5 */
    using BSEC_SPLOCK0_SPLOCK5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 5 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 5 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 5 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK5_B_0x0 = 0;
        /** @brief Attempt to program fuse word 5 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK5_B_0x1 = 1;

    /** @brief Sticky programming lock for word 6 */
    using BSEC_SPLOCK0_SPLOCK6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 6 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 6 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 6 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK6_B_0x0 = 0;
        /** @brief Attempt to program fuse word 6 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK6_B_0x1 = 1;

    /** @brief Sticky programming lock for word 7 */
    using BSEC_SPLOCK0_SPLOCK7 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 7 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 7 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 7 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK7_B_0x0 = 0;
        /** @brief Attempt to program fuse word 7 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK7_B_0x1 = 1;

    /** @brief Sticky programming lock for word 8 */
    using BSEC_SPLOCK0_SPLOCK8 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 8 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 8 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 8 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK8_B_0x0 = 0;
        /** @brief Attempt to program fuse word 8 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK8_B_0x1 = 1;

    /** @brief Sticky programming lock for word 9 */
    using BSEC_SPLOCK0_SPLOCK9 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 9 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 9 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 9 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK9_B_0x0 = 0;
        /** @brief Attempt to program fuse word 9 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK9_B_0x1 = 1;

    /** @brief Sticky programming lock for word 10 */
    using BSEC_SPLOCK0_SPLOCK10 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 10 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 10 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 10 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK10_B_0x0 = 0;
        /** @brief Attempt to program fuse word 10 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK10_B_0x1 = 1;

    /** @brief Sticky programming lock for word 11 */
    using BSEC_SPLOCK0_SPLOCK11 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 11 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 11 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 11 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK11_B_0x0 = 0;
        /** @brief Attempt to program fuse word 11 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK11_B_0x1 = 1;

    /** @brief Sticky programming lock for word 12 */
    using BSEC_SPLOCK0_SPLOCK12 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 12 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 12 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 12 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK12_B_0x0 = 0;
        /** @brief Attempt to program fuse word 12 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK12_B_0x1 = 1;

    /** @brief Sticky programming lock for word 13 */
    using BSEC_SPLOCK0_SPLOCK13 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 13 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 13 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 13 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK13_B_0x0 = 0;
        /** @brief Attempt to program fuse word 13 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK13_B_0x1 = 1;

    /** @brief Sticky programming lock for word 14 */
    using BSEC_SPLOCK0_SPLOCK14 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 14 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 14 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 14 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK14_B_0x0 = 0;
        /** @brief Attempt to program fuse word 14 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK14_B_0x1 = 1;

    /** @brief Sticky programming lock for word 15 */
    using BSEC_SPLOCK0_SPLOCK15 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 15 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 15 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 15 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK15_B_0x0 = 0;
        /** @brief Attempt to program fuse word 15 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK15_B_0x1 = 1;

    /** @brief Sticky programming lock for word 16 */
    using BSEC_SPLOCK0_SPLOCK16 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 16 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 16 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 16 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK16_B_0x0 = 0;
        /** @brief Attempt to program fuse word 16 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK16_B_0x1 = 1;

    /** @brief Sticky programming lock for word 17 */
    using BSEC_SPLOCK0_SPLOCK17 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 17 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 17 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 17 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK17_B_0x0 = 0;
        /** @brief Attempt to program fuse word 17 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK17_B_0x1 = 1;

    /** @brief Sticky programming lock for word 18 */
    using BSEC_SPLOCK0_SPLOCK18 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 18 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 18 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 18 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK18_B_0x0 = 0;
        /** @brief Attempt to program fuse word 18 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK18_B_0x1 = 1;

    /** @brief Sticky programming lock for word 19 */
    using BSEC_SPLOCK0_SPLOCK19 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 19 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 19 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 19 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK19_B_0x0 = 0;
        /** @brief Attempt to program fuse word 19 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK19_B_0x1 = 1;

    /** @brief Sticky programming lock for word 20 */
    using BSEC_SPLOCK0_SPLOCK20 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 20 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 20 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 20 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK20_B_0x0 = 0;
        /** @brief Attempt to program fuse word 20 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK20_B_0x1 = 1;

    /** @brief Sticky programming lock for word 21 */
    using BSEC_SPLOCK0_SPLOCK21 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 21 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 21 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 21 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK21_B_0x0 = 0;
        /** @brief Attempt to program fuse word 21 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK21_B_0x1 = 1;

    /** @brief Sticky programming lock for word 22 */
    using BSEC_SPLOCK0_SPLOCK22 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 22 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 22 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 22 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK22_B_0x0 = 0;
        /** @brief Attempt to program fuse word 22 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK22_B_0x1 = 1;

    /** @brief Sticky programming lock for word 23 */
    using BSEC_SPLOCK0_SPLOCK23 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 23 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 23 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 23 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK23_B_0x0 = 0;
        /** @brief Attempt to program fuse word 23 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK23_B_0x1 = 1;

    /** @brief Sticky programming lock for word 24 */
    using BSEC_SPLOCK0_SPLOCK24 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 24 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 24 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 24 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK24_B_0x0 = 0;
        /** @brief Attempt to program fuse word 24 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK24_B_0x1 = 1;

    /** @brief Sticky programming lock for word 25 */
    using BSEC_SPLOCK0_SPLOCK25 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 25 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 25 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 25 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK25_B_0x0 = 0;
        /** @brief Attempt to program fuse word 25 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK25_B_0x1 = 1;

    /** @brief Sticky programming lock for word 26 */
    using BSEC_SPLOCK0_SPLOCK26 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 26 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 26 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 26 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK26_B_0x0 = 0;
        /** @brief Attempt to program fuse word 26 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK26_B_0x1 = 1;

    /** @brief Sticky programming lock for word 27 */
    using BSEC_SPLOCK0_SPLOCK27 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 27 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 27 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 27 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK27_B_0x0 = 0;
        /** @brief Attempt to program fuse word 27 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK27_B_0x1 = 1;

    /** @brief Sticky programming lock for word 28 */
    using BSEC_SPLOCK0_SPLOCK28 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 28 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 28 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 28 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK28_B_0x0 = 0;
        /** @brief Attempt to program fuse word 28 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK28_B_0x1 = 1;

    /** @brief Sticky programming lock for word 29 */
    using BSEC_SPLOCK0_SPLOCK29 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 29 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 29 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 29 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK29_B_0x0 = 0;
        /** @brief Attempt to program fuse word 29 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK29_B_0x1 = 1;

    /** @brief Sticky programming lock for word 30 */
    using BSEC_SPLOCK0_SPLOCK30 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 30 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 30 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 30 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK30_B_0x0 = 0;
        /** @brief Attempt to program fuse word 30 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK30_B_0x1 = 1;

    /** @brief Sticky programming lock for word 31 */
    using BSEC_SPLOCK0_SPLOCK31 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 31 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 31 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 31 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK31_B_0x0 = 0;
        /** @brief Attempt to program fuse word 31 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK0_SPLOCK31_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 1 */
    using BSEC_SPLOCK1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x804, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 32 */
    using BSEC_SPLOCK1_SPLOCK32 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 32 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 32 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 32 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK32_B_0x0 = 0;
        /** @brief Attempt to program fuse word 32 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK32_B_0x1 = 1;

    /** @brief Sticky programming lock for word 33 */
    using BSEC_SPLOCK1_SPLOCK33 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 33 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 33 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 33 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK33_B_0x0 = 0;
        /** @brief Attempt to program fuse word 33 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK33_B_0x1 = 1;

    /** @brief Sticky programming lock for word 34 */
    using BSEC_SPLOCK1_SPLOCK34 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 34 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 34 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 34 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK34_B_0x0 = 0;
        /** @brief Attempt to program fuse word 34 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK34_B_0x1 = 1;

    /** @brief Sticky programming lock for word 35 */
    using BSEC_SPLOCK1_SPLOCK35 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 35 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 35 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 35 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK35_B_0x0 = 0;
        /** @brief Attempt to program fuse word 35 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK35_B_0x1 = 1;

    /** @brief Sticky programming lock for word 36 */
    using BSEC_SPLOCK1_SPLOCK36 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 36 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 36 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 36 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK36_B_0x0 = 0;
        /** @brief Attempt to program fuse word 36 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK36_B_0x1 = 1;

    /** @brief Sticky programming lock for word 37 */
    using BSEC_SPLOCK1_SPLOCK37 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 37 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 37 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 37 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK37_B_0x0 = 0;
        /** @brief Attempt to program fuse word 37 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK37_B_0x1 = 1;

    /** @brief Sticky programming lock for word 38 */
    using BSEC_SPLOCK1_SPLOCK38 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 38 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 38 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 38 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK38_B_0x0 = 0;
        /** @brief Attempt to program fuse word 38 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK38_B_0x1 = 1;

    /** @brief Sticky programming lock for word 39 */
    using BSEC_SPLOCK1_SPLOCK39 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 39 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 39 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 39 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK39_B_0x0 = 0;
        /** @brief Attempt to program fuse word 39 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK39_B_0x1 = 1;

    /** @brief Sticky programming lock for word 40 */
    using BSEC_SPLOCK1_SPLOCK40 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 40 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 40 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 40 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK40_B_0x0 = 0;
        /** @brief Attempt to program fuse word 40 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK40_B_0x1 = 1;

    /** @brief Sticky programming lock for word 41 */
    using BSEC_SPLOCK1_SPLOCK41 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 41 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 41 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 41 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK41_B_0x0 = 0;
        /** @brief Attempt to program fuse word 41 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK41_B_0x1 = 1;

    /** @brief Sticky programming lock for word 42 */
    using BSEC_SPLOCK1_SPLOCK42 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 42 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 42 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 42 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK42_B_0x0 = 0;
        /** @brief Attempt to program fuse word 42 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK42_B_0x1 = 1;

    /** @brief Sticky programming lock for word 43 */
    using BSEC_SPLOCK1_SPLOCK43 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 43 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 43 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 43 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK43_B_0x0 = 0;
        /** @brief Attempt to program fuse word 43 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK43_B_0x1 = 1;

    /** @brief Sticky programming lock for word 44 */
    using BSEC_SPLOCK1_SPLOCK44 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 44 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 44 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 44 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK44_B_0x0 = 0;
        /** @brief Attempt to program fuse word 44 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK44_B_0x1 = 1;

    /** @brief Sticky programming lock for word 45 */
    using BSEC_SPLOCK1_SPLOCK45 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 45 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 45 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 45 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK45_B_0x0 = 0;
        /** @brief Attempt to program fuse word 45 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK45_B_0x1 = 1;

    /** @brief Sticky programming lock for word 46 */
    using BSEC_SPLOCK1_SPLOCK46 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 46 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 46 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 46 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK46_B_0x0 = 0;
        /** @brief Attempt to program fuse word 46 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK46_B_0x1 = 1;

    /** @brief Sticky programming lock for word 47 */
    using BSEC_SPLOCK1_SPLOCK47 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 47 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 47 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 47 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK47_B_0x0 = 0;
        /** @brief Attempt to program fuse word 47 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK47_B_0x1 = 1;

    /** @brief Sticky programming lock for word 48 */
    using BSEC_SPLOCK1_SPLOCK48 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 48 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 48 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 48 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK48_B_0x0 = 0;
        /** @brief Attempt to program fuse word 48 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK48_B_0x1 = 1;

    /** @brief Sticky programming lock for word 49 */
    using BSEC_SPLOCK1_SPLOCK49 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 49 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 49 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 49 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK49_B_0x0 = 0;
        /** @brief Attempt to program fuse word 49 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK49_B_0x1 = 1;

    /** @brief Sticky programming lock for word 50 */
    using BSEC_SPLOCK1_SPLOCK50 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 50 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 50 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 50 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK50_B_0x0 = 0;
        /** @brief Attempt to program fuse word 50 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK50_B_0x1 = 1;

    /** @brief Sticky programming lock for word 51 */
    using BSEC_SPLOCK1_SPLOCK51 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 51 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 51 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 51 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK51_B_0x0 = 0;
        /** @brief Attempt to program fuse word 51 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK51_B_0x1 = 1;

    /** @brief Sticky programming lock for word 52 */
    using BSEC_SPLOCK1_SPLOCK52 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 52 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 52 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 52 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK52_B_0x0 = 0;
        /** @brief Attempt to program fuse word 52 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK52_B_0x1 = 1;

    /** @brief Sticky programming lock for word 53 */
    using BSEC_SPLOCK1_SPLOCK53 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 53 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 53 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 53 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK53_B_0x0 = 0;
        /** @brief Attempt to program fuse word 53 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK53_B_0x1 = 1;

    /** @brief Sticky programming lock for word 54 */
    using BSEC_SPLOCK1_SPLOCK54 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 54 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 54 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 54 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK54_B_0x0 = 0;
        /** @brief Attempt to program fuse word 54 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK54_B_0x1 = 1;

    /** @brief Sticky programming lock for word 55 */
    using BSEC_SPLOCK1_SPLOCK55 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 55 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 55 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 55 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK55_B_0x0 = 0;
        /** @brief Attempt to program fuse word 55 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK55_B_0x1 = 1;

    /** @brief Sticky programming lock for word 56 */
    using BSEC_SPLOCK1_SPLOCK56 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 56 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 56 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 56 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK56_B_0x0 = 0;
        /** @brief Attempt to program fuse word 56 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK56_B_0x1 = 1;

    /** @brief Sticky programming lock for word 57 */
    using BSEC_SPLOCK1_SPLOCK57 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 57 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 57 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 57 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK57_B_0x0 = 0;
        /** @brief Attempt to program fuse word 57 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK57_B_0x1 = 1;

    /** @brief Sticky programming lock for word 58 */
    using BSEC_SPLOCK1_SPLOCK58 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 58 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 58 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 58 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK58_B_0x0 = 0;
        /** @brief Attempt to program fuse word 58 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK58_B_0x1 = 1;

    /** @brief Sticky programming lock for word 59 */
    using BSEC_SPLOCK1_SPLOCK59 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 59 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 59 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 59 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK59_B_0x0 = 0;
        /** @brief Attempt to program fuse word 59 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK59_B_0x1 = 1;

    /** @brief Sticky programming lock for word 60 */
    using BSEC_SPLOCK1_SPLOCK60 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 60 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 60 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 60 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK60_B_0x0 = 0;
        /** @brief Attempt to program fuse word 60 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK60_B_0x1 = 1;

    /** @brief Sticky programming lock for word 61 */
    using BSEC_SPLOCK1_SPLOCK61 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 61 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 61 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 61 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK61_B_0x0 = 0;
        /** @brief Attempt to program fuse word 61 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK61_B_0x1 = 1;

    /** @brief Sticky programming lock for word 62 */
    using BSEC_SPLOCK1_SPLOCK62 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 62 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 62 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 62 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK62_B_0x0 = 0;
        /** @brief Attempt to program fuse word 62 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK62_B_0x1 = 1;

    /** @brief Sticky programming lock for word 63 */
    using BSEC_SPLOCK1_SPLOCK63 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 63 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 63 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 63 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK63_B_0x0 = 0;
        /** @brief Attempt to program fuse word 63 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK1_SPLOCK63_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 2 */
    using BSEC_SPLOCK2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x808, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 64 */
    using BSEC_SPLOCK2_SPLOCK64 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 64 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 64 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 64 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK64_B_0x0 = 0;
        /** @brief Attempt to program fuse word 64 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK64_B_0x1 = 1;

    /** @brief Sticky programming lock for word 65 */
    using BSEC_SPLOCK2_SPLOCK65 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 65 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 65 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 65 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK65_B_0x0 = 0;
        /** @brief Attempt to program fuse word 65 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK65_B_0x1 = 1;

    /** @brief Sticky programming lock for word 66 */
    using BSEC_SPLOCK2_SPLOCK66 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 66 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 66 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 66 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK66_B_0x0 = 0;
        /** @brief Attempt to program fuse word 66 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK66_B_0x1 = 1;

    /** @brief Sticky programming lock for word 67 */
    using BSEC_SPLOCK2_SPLOCK67 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 67 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 67 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 67 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK67_B_0x0 = 0;
        /** @brief Attempt to program fuse word 67 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK67_B_0x1 = 1;

    /** @brief Sticky programming lock for word 68 */
    using BSEC_SPLOCK2_SPLOCK68 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 68 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 68 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 68 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK68_B_0x0 = 0;
        /** @brief Attempt to program fuse word 68 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK68_B_0x1 = 1;

    /** @brief Sticky programming lock for word 69 */
    using BSEC_SPLOCK2_SPLOCK69 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 69 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 69 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 69 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK69_B_0x0 = 0;
        /** @brief Attempt to program fuse word 69 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK69_B_0x1 = 1;

    /** @brief Sticky programming lock for word 70 */
    using BSEC_SPLOCK2_SPLOCK70 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 70 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 70 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 70 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK70_B_0x0 = 0;
        /** @brief Attempt to program fuse word 70 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK70_B_0x1 = 1;

    /** @brief Sticky programming lock for word 71 */
    using BSEC_SPLOCK2_SPLOCK71 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 71 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 71 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 71 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK71_B_0x0 = 0;
        /** @brief Attempt to program fuse word 71 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK71_B_0x1 = 1;

    /** @brief Sticky programming lock for word 72 */
    using BSEC_SPLOCK2_SPLOCK72 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 72 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 72 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 72 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK72_B_0x0 = 0;
        /** @brief Attempt to program fuse word 72 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK72_B_0x1 = 1;

    /** @brief Sticky programming lock for word 73 */
    using BSEC_SPLOCK2_SPLOCK73 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 73 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 73 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 73 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK73_B_0x0 = 0;
        /** @brief Attempt to program fuse word 73 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK73_B_0x1 = 1;

    /** @brief Sticky programming lock for word 74 */
    using BSEC_SPLOCK2_SPLOCK74 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 74 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 74 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 74 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK74_B_0x0 = 0;
        /** @brief Attempt to program fuse word 74 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK74_B_0x1 = 1;

    /** @brief Sticky programming lock for word 75 */
    using BSEC_SPLOCK2_SPLOCK75 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 75 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 75 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 75 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK75_B_0x0 = 0;
        /** @brief Attempt to program fuse word 75 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK75_B_0x1 = 1;

    /** @brief Sticky programming lock for word 76 */
    using BSEC_SPLOCK2_SPLOCK76 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 76 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 76 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 76 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK76_B_0x0 = 0;
        /** @brief Attempt to program fuse word 76 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK76_B_0x1 = 1;

    /** @brief Sticky programming lock for word 77 */
    using BSEC_SPLOCK2_SPLOCK77 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 77 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 77 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 77 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK77_B_0x0 = 0;
        /** @brief Attempt to program fuse word 77 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK77_B_0x1 = 1;

    /** @brief Sticky programming lock for word 78 */
    using BSEC_SPLOCK2_SPLOCK78 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 78 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 78 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 78 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK78_B_0x0 = 0;
        /** @brief Attempt to program fuse word 78 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK78_B_0x1 = 1;

    /** @brief Sticky programming lock for word 79 */
    using BSEC_SPLOCK2_SPLOCK79 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 79 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 79 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 79 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK79_B_0x0 = 0;
        /** @brief Attempt to program fuse word 79 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK79_B_0x1 = 1;

    /** @brief Sticky programming lock for word 80 */
    using BSEC_SPLOCK2_SPLOCK80 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 80 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 80 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 80 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK80_B_0x0 = 0;
        /** @brief Attempt to program fuse word 80 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK80_B_0x1 = 1;

    /** @brief Sticky programming lock for word 81 */
    using BSEC_SPLOCK2_SPLOCK81 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 81 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 81 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 81 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK81_B_0x0 = 0;
        /** @brief Attempt to program fuse word 81 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK81_B_0x1 = 1;

    /** @brief Sticky programming lock for word 82 */
    using BSEC_SPLOCK2_SPLOCK82 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 82 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 82 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 82 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK82_B_0x0 = 0;
        /** @brief Attempt to program fuse word 82 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK82_B_0x1 = 1;

    /** @brief Sticky programming lock for word 83 */
    using BSEC_SPLOCK2_SPLOCK83 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 83 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 83 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 83 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK83_B_0x0 = 0;
        /** @brief Attempt to program fuse word 83 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK83_B_0x1 = 1;

    /** @brief Sticky programming lock for word 84 */
    using BSEC_SPLOCK2_SPLOCK84 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 84 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 84 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 84 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK84_B_0x0 = 0;
        /** @brief Attempt to program fuse word 84 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK84_B_0x1 = 1;

    /** @brief Sticky programming lock for word 85 */
    using BSEC_SPLOCK2_SPLOCK85 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 85 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 85 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 85 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK85_B_0x0 = 0;
        /** @brief Attempt to program fuse word 85 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK85_B_0x1 = 1;

    /** @brief Sticky programming lock for word 86 */
    using BSEC_SPLOCK2_SPLOCK86 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 86 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 86 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 86 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK86_B_0x0 = 0;
        /** @brief Attempt to program fuse word 86 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK86_B_0x1 = 1;

    /** @brief Sticky programming lock for word 87 */
    using BSEC_SPLOCK2_SPLOCK87 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 87 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 87 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 87 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK87_B_0x0 = 0;
        /** @brief Attempt to program fuse word 87 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK87_B_0x1 = 1;

    /** @brief Sticky programming lock for word 88 */
    using BSEC_SPLOCK2_SPLOCK88 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 88 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 88 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 88 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK88_B_0x0 = 0;
        /** @brief Attempt to program fuse word 88 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK88_B_0x1 = 1;

    /** @brief Sticky programming lock for word 89 */
    using BSEC_SPLOCK2_SPLOCK89 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 89 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 89 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 89 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK89_B_0x0 = 0;
        /** @brief Attempt to program fuse word 89 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK89_B_0x1 = 1;

    /** @brief Sticky programming lock for word 90 */
    using BSEC_SPLOCK2_SPLOCK90 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 90 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 90 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 90 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK90_B_0x0 = 0;
        /** @brief Attempt to program fuse word 90 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK90_B_0x1 = 1;

    /** @brief Sticky programming lock for word 91 */
    using BSEC_SPLOCK2_SPLOCK91 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 91 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 91 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 91 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK91_B_0x0 = 0;
        /** @brief Attempt to program fuse word 91 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK91_B_0x1 = 1;

    /** @brief Sticky programming lock for word 92 */
    using BSEC_SPLOCK2_SPLOCK92 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 92 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 92 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 92 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK92_B_0x0 = 0;
        /** @brief Attempt to program fuse word 92 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK92_B_0x1 = 1;

    /** @brief Sticky programming lock for word 93 */
    using BSEC_SPLOCK2_SPLOCK93 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 93 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 93 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 93 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK93_B_0x0 = 0;
        /** @brief Attempt to program fuse word 93 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK93_B_0x1 = 1;

    /** @brief Sticky programming lock for word 94 */
    using BSEC_SPLOCK2_SPLOCK94 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 94 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 94 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 94 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK94_B_0x0 = 0;
        /** @brief Attempt to program fuse word 94 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK94_B_0x1 = 1;

    /** @brief Sticky programming lock for word 95 */
    using BSEC_SPLOCK2_SPLOCK95 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 95 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 95 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 95 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK95_B_0x0 = 0;
        /** @brief Attempt to program fuse word 95 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK2_SPLOCK95_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 3 */
    using BSEC_SPLOCK3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x80C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 96 */
    using BSEC_SPLOCK3_SPLOCK96 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 96 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 96 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 96 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK96_B_0x0 = 0;
        /** @brief Attempt to program fuse word 96 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK96_B_0x1 = 1;

    /** @brief Sticky programming lock for word 97 */
    using BSEC_SPLOCK3_SPLOCK97 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 97 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 97 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 97 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK97_B_0x0 = 0;
        /** @brief Attempt to program fuse word 97 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK97_B_0x1 = 1;

    /** @brief Sticky programming lock for word 98 */
    using BSEC_SPLOCK3_SPLOCK98 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 98 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 98 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 98 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK98_B_0x0 = 0;
        /** @brief Attempt to program fuse word 98 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK98_B_0x1 = 1;

    /** @brief Sticky programming lock for word 99 */
    using BSEC_SPLOCK3_SPLOCK99 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 99 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 99 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 99 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK99_B_0x0 = 0;
        /** @brief Attempt to program fuse word 99 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK99_B_0x1 = 1;

    /** @brief Sticky programming lock for word 100 */
    using BSEC_SPLOCK3_SPLOCK100 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 100 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 100 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 100 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK100_B_0x0 = 0;
        /** @brief Attempt to program fuse word 100 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK100_B_0x1 = 1;

    /** @brief Sticky programming lock for word 101 */
    using BSEC_SPLOCK3_SPLOCK101 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 101 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 101 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 101 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK101_B_0x0 = 0;
        /** @brief Attempt to program fuse word 101 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK101_B_0x1 = 1;

    /** @brief Sticky programming lock for word 102 */
    using BSEC_SPLOCK3_SPLOCK102 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 102 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 102 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 102 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK102_B_0x0 = 0;
        /** @brief Attempt to program fuse word 102 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK102_B_0x1 = 1;

    /** @brief Sticky programming lock for word 103 */
    using BSEC_SPLOCK3_SPLOCK103 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 103 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 103 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 103 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK103_B_0x0 = 0;
        /** @brief Attempt to program fuse word 103 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK103_B_0x1 = 1;

    /** @brief Sticky programming lock for word 104 */
    using BSEC_SPLOCK3_SPLOCK104 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 104 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 104 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 104 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK104_B_0x0 = 0;
        /** @brief Attempt to program fuse word 104 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK104_B_0x1 = 1;

    /** @brief Sticky programming lock for word 105 */
    using BSEC_SPLOCK3_SPLOCK105 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 105 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 105 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 105 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK105_B_0x0 = 0;
        /** @brief Attempt to program fuse word 105 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK105_B_0x1 = 1;

    /** @brief Sticky programming lock for word 106 */
    using BSEC_SPLOCK3_SPLOCK106 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 106 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 106 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 106 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK106_B_0x0 = 0;
        /** @brief Attempt to program fuse word 106 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK106_B_0x1 = 1;

    /** @brief Sticky programming lock for word 107 */
    using BSEC_SPLOCK3_SPLOCK107 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 107 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 107 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 107 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK107_B_0x0 = 0;
        /** @brief Attempt to program fuse word 107 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK107_B_0x1 = 1;

    /** @brief Sticky programming lock for word 108 */
    using BSEC_SPLOCK3_SPLOCK108 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 108 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 108 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 108 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK108_B_0x0 = 0;
        /** @brief Attempt to program fuse word 108 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK108_B_0x1 = 1;

    /** @brief Sticky programming lock for word 109 */
    using BSEC_SPLOCK3_SPLOCK109 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 109 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 109 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 109 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK109_B_0x0 = 0;
        /** @brief Attempt to program fuse word 109 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK109_B_0x1 = 1;

    /** @brief Sticky programming lock for word 110 */
    using BSEC_SPLOCK3_SPLOCK110 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 110 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 110 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 110 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK110_B_0x0 = 0;
        /** @brief Attempt to program fuse word 110 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK110_B_0x1 = 1;

    /** @brief Sticky programming lock for word 111 */
    using BSEC_SPLOCK3_SPLOCK111 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 111 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 111 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 111 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK111_B_0x0 = 0;
        /** @brief Attempt to program fuse word 111 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK111_B_0x1 = 1;

    /** @brief Sticky programming lock for word 112 */
    using BSEC_SPLOCK3_SPLOCK112 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 112 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 112 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 112 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK112_B_0x0 = 0;
        /** @brief Attempt to program fuse word 112 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK112_B_0x1 = 1;

    /** @brief Sticky programming lock for word 113 */
    using BSEC_SPLOCK3_SPLOCK113 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 113 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 113 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 113 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK113_B_0x0 = 0;
        /** @brief Attempt to program fuse word 113 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK113_B_0x1 = 1;

    /** @brief Sticky programming lock for word 114 */
    using BSEC_SPLOCK3_SPLOCK114 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 114 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 114 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 114 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK114_B_0x0 = 0;
        /** @brief Attempt to program fuse word 114 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK114_B_0x1 = 1;

    /** @brief Sticky programming lock for word 115 */
    using BSEC_SPLOCK3_SPLOCK115 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 115 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 115 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 115 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK115_B_0x0 = 0;
        /** @brief Attempt to program fuse word 115 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK115_B_0x1 = 1;

    /** @brief Sticky programming lock for word 116 */
    using BSEC_SPLOCK3_SPLOCK116 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 116 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 116 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 116 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK116_B_0x0 = 0;
        /** @brief Attempt to program fuse word 116 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK116_B_0x1 = 1;

    /** @brief Sticky programming lock for word 117 */
    using BSEC_SPLOCK3_SPLOCK117 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 117 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 117 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 117 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK117_B_0x0 = 0;
        /** @brief Attempt to program fuse word 117 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK117_B_0x1 = 1;

    /** @brief Sticky programming lock for word 118 */
    using BSEC_SPLOCK3_SPLOCK118 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 118 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 118 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 118 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK118_B_0x0 = 0;
        /** @brief Attempt to program fuse word 118 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK118_B_0x1 = 1;

    /** @brief Sticky programming lock for word 119 */
    using BSEC_SPLOCK3_SPLOCK119 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 119 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 119 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 119 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK119_B_0x0 = 0;
        /** @brief Attempt to program fuse word 119 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK119_B_0x1 = 1;

    /** @brief Sticky programming lock for word 120 */
    using BSEC_SPLOCK3_SPLOCK120 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 120 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 120 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 120 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK120_B_0x0 = 0;
        /** @brief Attempt to program fuse word 120 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK120_B_0x1 = 1;

    /** @brief Sticky programming lock for word 121 */
    using BSEC_SPLOCK3_SPLOCK121 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 121 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 121 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 121 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK121_B_0x0 = 0;
        /** @brief Attempt to program fuse word 121 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK121_B_0x1 = 1;

    /** @brief Sticky programming lock for word 122 */
    using BSEC_SPLOCK3_SPLOCK122 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 122 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 122 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 122 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK122_B_0x0 = 0;
        /** @brief Attempt to program fuse word 122 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK122_B_0x1 = 1;

    /** @brief Sticky programming lock for word 123 */
    using BSEC_SPLOCK3_SPLOCK123 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 123 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 123 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 123 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK123_B_0x0 = 0;
        /** @brief Attempt to program fuse word 123 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK123_B_0x1 = 1;

    /** @brief Sticky programming lock for word 124 */
    using BSEC_SPLOCK3_SPLOCK124 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 124 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 124 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 124 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK124_B_0x0 = 0;
        /** @brief Attempt to program fuse word 124 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK124_B_0x1 = 1;

    /** @brief Sticky programming lock for word 125 */
    using BSEC_SPLOCK3_SPLOCK125 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 125 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 125 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 125 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK125_B_0x0 = 0;
        /** @brief Attempt to program fuse word 125 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK125_B_0x1 = 1;

    /** @brief Sticky programming lock for word 126 */
    using BSEC_SPLOCK3_SPLOCK126 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 126 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 126 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 126 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK126_B_0x0 = 0;
        /** @brief Attempt to program fuse word 126 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK126_B_0x1 = 1;

    /** @brief Sticky programming lock for word 127 */
    using BSEC_SPLOCK3_SPLOCK127 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 127 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 127 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 127 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK127_B_0x0 = 0;
        /** @brief Attempt to program fuse word 127 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK3_SPLOCK127_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 4 */
    using BSEC_SPLOCK4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x810, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 128 */
    using BSEC_SPLOCK4_SPLOCK128 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 128 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 128 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 128 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK128_B_0x0 = 0;
        /** @brief Attempt to program fuse word 128 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK128_B_0x1 = 1;

    /** @brief Sticky programming lock for word 129 */
    using BSEC_SPLOCK4_SPLOCK129 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 129 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 129 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 129 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK129_B_0x0 = 0;
        /** @brief Attempt to program fuse word 129 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK129_B_0x1 = 1;

    /** @brief Sticky programming lock for word 130 */
    using BSEC_SPLOCK4_SPLOCK130 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 130 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 130 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 130 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK130_B_0x0 = 0;
        /** @brief Attempt to program fuse word 130 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK130_B_0x1 = 1;

    /** @brief Sticky programming lock for word 131 */
    using BSEC_SPLOCK4_SPLOCK131 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 131 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 131 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 131 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK131_B_0x0 = 0;
        /** @brief Attempt to program fuse word 131 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK131_B_0x1 = 1;

    /** @brief Sticky programming lock for word 132 */
    using BSEC_SPLOCK4_SPLOCK132 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 132 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 132 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 132 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK132_B_0x0 = 0;
        /** @brief Attempt to program fuse word 132 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK132_B_0x1 = 1;

    /** @brief Sticky programming lock for word 133 */
    using BSEC_SPLOCK4_SPLOCK133 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 133 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 133 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 133 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK133_B_0x0 = 0;
        /** @brief Attempt to program fuse word 133 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK133_B_0x1 = 1;

    /** @brief Sticky programming lock for word 134 */
    using BSEC_SPLOCK4_SPLOCK134 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 134 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 134 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 134 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK134_B_0x0 = 0;
        /** @brief Attempt to program fuse word 134 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK134_B_0x1 = 1;

    /** @brief Sticky programming lock for word 135 */
    using BSEC_SPLOCK4_SPLOCK135 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 135 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 135 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 135 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK135_B_0x0 = 0;
        /** @brief Attempt to program fuse word 135 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK135_B_0x1 = 1;

    /** @brief Sticky programming lock for word 136 */
    using BSEC_SPLOCK4_SPLOCK136 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 136 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 136 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 136 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK136_B_0x0 = 0;
        /** @brief Attempt to program fuse word 136 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK136_B_0x1 = 1;

    /** @brief Sticky programming lock for word 137 */
    using BSEC_SPLOCK4_SPLOCK137 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 137 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 137 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 137 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK137_B_0x0 = 0;
        /** @brief Attempt to program fuse word 137 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK137_B_0x1 = 1;

    /** @brief Sticky programming lock for word 138 */
    using BSEC_SPLOCK4_SPLOCK138 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 138 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 138 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 138 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK138_B_0x0 = 0;
        /** @brief Attempt to program fuse word 138 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK138_B_0x1 = 1;

    /** @brief Sticky programming lock for word 139 */
    using BSEC_SPLOCK4_SPLOCK139 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 139 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 139 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 139 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK139_B_0x0 = 0;
        /** @brief Attempt to program fuse word 139 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK139_B_0x1 = 1;

    /** @brief Sticky programming lock for word 140 */
    using BSEC_SPLOCK4_SPLOCK140 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 140 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 140 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 140 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK140_B_0x0 = 0;
        /** @brief Attempt to program fuse word 140 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK140_B_0x1 = 1;

    /** @brief Sticky programming lock for word 141 */
    using BSEC_SPLOCK4_SPLOCK141 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 141 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 141 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 141 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK141_B_0x0 = 0;
        /** @brief Attempt to program fuse word 141 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK141_B_0x1 = 1;

    /** @brief Sticky programming lock for word 142 */
    using BSEC_SPLOCK4_SPLOCK142 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 142 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 142 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 142 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK142_B_0x0 = 0;
        /** @brief Attempt to program fuse word 142 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK142_B_0x1 = 1;

    /** @brief Sticky programming lock for word 143 */
    using BSEC_SPLOCK4_SPLOCK143 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 143 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 143 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 143 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK143_B_0x0 = 0;
        /** @brief Attempt to program fuse word 143 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK143_B_0x1 = 1;

    /** @brief Sticky programming lock for word 144 */
    using BSEC_SPLOCK4_SPLOCK144 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 144 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 144 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 144 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK144_B_0x0 = 0;
        /** @brief Attempt to program fuse word 144 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK144_B_0x1 = 1;

    /** @brief Sticky programming lock for word 145 */
    using BSEC_SPLOCK4_SPLOCK145 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 145 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 145 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 145 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK145_B_0x0 = 0;
        /** @brief Attempt to program fuse word 145 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK145_B_0x1 = 1;

    /** @brief Sticky programming lock for word 146 */
    using BSEC_SPLOCK4_SPLOCK146 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 146 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 146 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 146 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK146_B_0x0 = 0;
        /** @brief Attempt to program fuse word 146 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK146_B_0x1 = 1;

    /** @brief Sticky programming lock for word 147 */
    using BSEC_SPLOCK4_SPLOCK147 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 147 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 147 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 147 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK147_B_0x0 = 0;
        /** @brief Attempt to program fuse word 147 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK147_B_0x1 = 1;

    /** @brief Sticky programming lock for word 148 */
    using BSEC_SPLOCK4_SPLOCK148 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 148 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 148 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 148 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK148_B_0x0 = 0;
        /** @brief Attempt to program fuse word 148 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK148_B_0x1 = 1;

    /** @brief Sticky programming lock for word 149 */
    using BSEC_SPLOCK4_SPLOCK149 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 149 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 149 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 149 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK149_B_0x0 = 0;
        /** @brief Attempt to program fuse word 149 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK149_B_0x1 = 1;

    /** @brief Sticky programming lock for word 150 */
    using BSEC_SPLOCK4_SPLOCK150 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 150 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 150 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 150 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK150_B_0x0 = 0;
        /** @brief Attempt to program fuse word 150 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK150_B_0x1 = 1;

    /** @brief Sticky programming lock for word 151 */
    using BSEC_SPLOCK4_SPLOCK151 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 151 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 151 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 151 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK151_B_0x0 = 0;
        /** @brief Attempt to program fuse word 151 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK151_B_0x1 = 1;

    /** @brief Sticky programming lock for word 152 */
    using BSEC_SPLOCK4_SPLOCK152 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 152 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 152 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 152 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK152_B_0x0 = 0;
        /** @brief Attempt to program fuse word 152 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK152_B_0x1 = 1;

    /** @brief Sticky programming lock for word 153 */
    using BSEC_SPLOCK4_SPLOCK153 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 153 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 153 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 153 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK153_B_0x0 = 0;
        /** @brief Attempt to program fuse word 153 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK153_B_0x1 = 1;

    /** @brief Sticky programming lock for word 154 */
    using BSEC_SPLOCK4_SPLOCK154 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 154 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 154 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 154 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK154_B_0x0 = 0;
        /** @brief Attempt to program fuse word 154 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK154_B_0x1 = 1;

    /** @brief Sticky programming lock for word 155 */
    using BSEC_SPLOCK4_SPLOCK155 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 155 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 155 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 155 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK155_B_0x0 = 0;
        /** @brief Attempt to program fuse word 155 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK155_B_0x1 = 1;

    /** @brief Sticky programming lock for word 156 */
    using BSEC_SPLOCK4_SPLOCK156 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 156 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 156 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 156 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK156_B_0x0 = 0;
        /** @brief Attempt to program fuse word 156 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK156_B_0x1 = 1;

    /** @brief Sticky programming lock for word 157 */
    using BSEC_SPLOCK4_SPLOCK157 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 157 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 157 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 157 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK157_B_0x0 = 0;
        /** @brief Attempt to program fuse word 157 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK157_B_0x1 = 1;

    /** @brief Sticky programming lock for word 158 */
    using BSEC_SPLOCK4_SPLOCK158 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 158 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 158 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 158 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK158_B_0x0 = 0;
        /** @brief Attempt to program fuse word 158 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK158_B_0x1 = 1;

    /** @brief Sticky programming lock for word 159 */
    using BSEC_SPLOCK4_SPLOCK159 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 159 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 159 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 159 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK159_B_0x0 = 0;
        /** @brief Attempt to program fuse word 159 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK4_SPLOCK159_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 5 */
    using BSEC_SPLOCK5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x814, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 160 */
    using BSEC_SPLOCK5_SPLOCK160 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 160 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 160 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 160 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK160_B_0x0 = 0;
        /** @brief Attempt to program fuse word 160 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK160_B_0x1 = 1;

    /** @brief Sticky programming lock for word 161 */
    using BSEC_SPLOCK5_SPLOCK161 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 161 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 161 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 161 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK161_B_0x0 = 0;
        /** @brief Attempt to program fuse word 161 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK161_B_0x1 = 1;

    /** @brief Sticky programming lock for word 162 */
    using BSEC_SPLOCK5_SPLOCK162 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 162 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 162 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 162 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK162_B_0x0 = 0;
        /** @brief Attempt to program fuse word 162 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK162_B_0x1 = 1;

    /** @brief Sticky programming lock for word 163 */
    using BSEC_SPLOCK5_SPLOCK163 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 163 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 163 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 163 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK163_B_0x0 = 0;
        /** @brief Attempt to program fuse word 163 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK163_B_0x1 = 1;

    /** @brief Sticky programming lock for word 164 */
    using BSEC_SPLOCK5_SPLOCK164 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 164 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 164 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 164 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK164_B_0x0 = 0;
        /** @brief Attempt to program fuse word 164 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK164_B_0x1 = 1;

    /** @brief Sticky programming lock for word 165 */
    using BSEC_SPLOCK5_SPLOCK165 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 165 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 165 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 165 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK165_B_0x0 = 0;
        /** @brief Attempt to program fuse word 165 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK165_B_0x1 = 1;

    /** @brief Sticky programming lock for word 166 */
    using BSEC_SPLOCK5_SPLOCK166 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 166 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 166 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 166 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK166_B_0x0 = 0;
        /** @brief Attempt to program fuse word 166 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK166_B_0x1 = 1;

    /** @brief Sticky programming lock for word 167 */
    using BSEC_SPLOCK5_SPLOCK167 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 167 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 167 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 167 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK167_B_0x0 = 0;
        /** @brief Attempt to program fuse word 167 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK167_B_0x1 = 1;

    /** @brief Sticky programming lock for word 168 */
    using BSEC_SPLOCK5_SPLOCK168 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 168 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 168 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 168 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK168_B_0x0 = 0;
        /** @brief Attempt to program fuse word 168 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK168_B_0x1 = 1;

    /** @brief Sticky programming lock for word 169 */
    using BSEC_SPLOCK5_SPLOCK169 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 169 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 169 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 169 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK169_B_0x0 = 0;
        /** @brief Attempt to program fuse word 169 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK169_B_0x1 = 1;

    /** @brief Sticky programming lock for word 170 */
    using BSEC_SPLOCK5_SPLOCK170 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 170 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 170 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 170 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK170_B_0x0 = 0;
        /** @brief Attempt to program fuse word 170 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK170_B_0x1 = 1;

    /** @brief Sticky programming lock for word 171 */
    using BSEC_SPLOCK5_SPLOCK171 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 171 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 171 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 171 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK171_B_0x0 = 0;
        /** @brief Attempt to program fuse word 171 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK171_B_0x1 = 1;

    /** @brief Sticky programming lock for word 172 */
    using BSEC_SPLOCK5_SPLOCK172 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 172 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 172 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 172 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK172_B_0x0 = 0;
        /** @brief Attempt to program fuse word 172 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK172_B_0x1 = 1;

    /** @brief Sticky programming lock for word 173 */
    using BSEC_SPLOCK5_SPLOCK173 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 173 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 173 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 173 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK173_B_0x0 = 0;
        /** @brief Attempt to program fuse word 173 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK173_B_0x1 = 1;

    /** @brief Sticky programming lock for word 174 */
    using BSEC_SPLOCK5_SPLOCK174 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 174 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 174 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 174 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK174_B_0x0 = 0;
        /** @brief Attempt to program fuse word 174 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK174_B_0x1 = 1;

    /** @brief Sticky programming lock for word 175 */
    using BSEC_SPLOCK5_SPLOCK175 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 175 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 175 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 175 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK175_B_0x0 = 0;
        /** @brief Attempt to program fuse word 175 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK175_B_0x1 = 1;

    /** @brief Sticky programming lock for word 176 */
    using BSEC_SPLOCK5_SPLOCK176 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 176 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 176 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 176 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK176_B_0x0 = 0;
        /** @brief Attempt to program fuse word 176 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK176_B_0x1 = 1;

    /** @brief Sticky programming lock for word 177 */
    using BSEC_SPLOCK5_SPLOCK177 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 177 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 177 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 177 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK177_B_0x0 = 0;
        /** @brief Attempt to program fuse word 177 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK177_B_0x1 = 1;

    /** @brief Sticky programming lock for word 178 */
    using BSEC_SPLOCK5_SPLOCK178 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 178 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 178 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 178 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK178_B_0x0 = 0;
        /** @brief Attempt to program fuse word 178 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK178_B_0x1 = 1;

    /** @brief Sticky programming lock for word 179 */
    using BSEC_SPLOCK5_SPLOCK179 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 179 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 179 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 179 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK179_B_0x0 = 0;
        /** @brief Attempt to program fuse word 179 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK179_B_0x1 = 1;

    /** @brief Sticky programming lock for word 180 */
    using BSEC_SPLOCK5_SPLOCK180 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 180 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 180 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 180 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK180_B_0x0 = 0;
        /** @brief Attempt to program fuse word 180 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK180_B_0x1 = 1;

    /** @brief Sticky programming lock for word 181 */
    using BSEC_SPLOCK5_SPLOCK181 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 181 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 181 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 181 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK181_B_0x0 = 0;
        /** @brief Attempt to program fuse word 181 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK181_B_0x1 = 1;

    /** @brief Sticky programming lock for word 182 */
    using BSEC_SPLOCK5_SPLOCK182 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 182 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 182 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 182 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK182_B_0x0 = 0;
        /** @brief Attempt to program fuse word 182 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK182_B_0x1 = 1;

    /** @brief Sticky programming lock for word 183 */
    using BSEC_SPLOCK5_SPLOCK183 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 183 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 183 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 183 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK183_B_0x0 = 0;
        /** @brief Attempt to program fuse word 183 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK183_B_0x1 = 1;

    /** @brief Sticky programming lock for word 184 */
    using BSEC_SPLOCK5_SPLOCK184 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 184 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 184 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 184 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK184_B_0x0 = 0;
        /** @brief Attempt to program fuse word 184 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK184_B_0x1 = 1;

    /** @brief Sticky programming lock for word 185 */
    using BSEC_SPLOCK5_SPLOCK185 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 185 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 185 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 185 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK185_B_0x0 = 0;
        /** @brief Attempt to program fuse word 185 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK185_B_0x1 = 1;

    /** @brief Sticky programming lock for word 186 */
    using BSEC_SPLOCK5_SPLOCK186 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 186 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 186 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 186 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK186_B_0x0 = 0;
        /** @brief Attempt to program fuse word 186 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK186_B_0x1 = 1;

    /** @brief Sticky programming lock for word 187 */
    using BSEC_SPLOCK5_SPLOCK187 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 187 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 187 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 187 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK187_B_0x0 = 0;
        /** @brief Attempt to program fuse word 187 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK187_B_0x1 = 1;

    /** @brief Sticky programming lock for word 188 */
    using BSEC_SPLOCK5_SPLOCK188 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 188 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 188 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 188 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK188_B_0x0 = 0;
        /** @brief Attempt to program fuse word 188 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK188_B_0x1 = 1;

    /** @brief Sticky programming lock for word 189 */
    using BSEC_SPLOCK5_SPLOCK189 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 189 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 189 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 189 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK189_B_0x0 = 0;
        /** @brief Attempt to program fuse word 189 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK189_B_0x1 = 1;

    /** @brief Sticky programming lock for word 190 */
    using BSEC_SPLOCK5_SPLOCK190 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 190 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 190 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 190 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK190_B_0x0 = 0;
        /** @brief Attempt to program fuse word 190 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK190_B_0x1 = 1;

    /** @brief Sticky programming lock for word 191 */
    using BSEC_SPLOCK5_SPLOCK191 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 191 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 191 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 191 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK191_B_0x0 = 0;
        /** @brief Attempt to program fuse word 191 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK5_SPLOCK191_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 6 */
    using BSEC_SPLOCK6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x818, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 192 */
    using BSEC_SPLOCK6_SPLOCK192 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 192 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 192 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 192 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK192_B_0x0 = 0;
        /** @brief Attempt to program fuse word 192 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK192_B_0x1 = 1;

    /** @brief Sticky programming lock for word 193 */
    using BSEC_SPLOCK6_SPLOCK193 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 193 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 193 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 193 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK193_B_0x0 = 0;
        /** @brief Attempt to program fuse word 193 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK193_B_0x1 = 1;

    /** @brief Sticky programming lock for word 194 */
    using BSEC_SPLOCK6_SPLOCK194 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 194 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 194 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 194 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK194_B_0x0 = 0;
        /** @brief Attempt to program fuse word 194 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK194_B_0x1 = 1;

    /** @brief Sticky programming lock for word 195 */
    using BSEC_SPLOCK6_SPLOCK195 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 195 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 195 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 195 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK195_B_0x0 = 0;
        /** @brief Attempt to program fuse word 195 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK195_B_0x1 = 1;

    /** @brief Sticky programming lock for word 196 */
    using BSEC_SPLOCK6_SPLOCK196 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 196 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 196 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 196 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK196_B_0x0 = 0;
        /** @brief Attempt to program fuse word 196 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK196_B_0x1 = 1;

    /** @brief Sticky programming lock for word 197 */
    using BSEC_SPLOCK6_SPLOCK197 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 197 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 197 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 197 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK197_B_0x0 = 0;
        /** @brief Attempt to program fuse word 197 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK197_B_0x1 = 1;

    /** @brief Sticky programming lock for word 198 */
    using BSEC_SPLOCK6_SPLOCK198 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 198 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 198 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 198 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK198_B_0x0 = 0;
        /** @brief Attempt to program fuse word 198 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK198_B_0x1 = 1;

    /** @brief Sticky programming lock for word 199 */
    using BSEC_SPLOCK6_SPLOCK199 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 199 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 199 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 199 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK199_B_0x0 = 0;
        /** @brief Attempt to program fuse word 199 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK199_B_0x1 = 1;

    /** @brief Sticky programming lock for word 200 */
    using BSEC_SPLOCK6_SPLOCK200 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 200 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 200 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 200 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK200_B_0x0 = 0;
        /** @brief Attempt to program fuse word 200 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK200_B_0x1 = 1;

    /** @brief Sticky programming lock for word 201 */
    using BSEC_SPLOCK6_SPLOCK201 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 201 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 201 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 201 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK201_B_0x0 = 0;
        /** @brief Attempt to program fuse word 201 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK201_B_0x1 = 1;

    /** @brief Sticky programming lock for word 202 */
    using BSEC_SPLOCK6_SPLOCK202 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 202 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 202 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 202 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK202_B_0x0 = 0;
        /** @brief Attempt to program fuse word 202 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK202_B_0x1 = 1;

    /** @brief Sticky programming lock for word 203 */
    using BSEC_SPLOCK6_SPLOCK203 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 203 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 203 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 203 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK203_B_0x0 = 0;
        /** @brief Attempt to program fuse word 203 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK203_B_0x1 = 1;

    /** @brief Sticky programming lock for word 204 */
    using BSEC_SPLOCK6_SPLOCK204 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 204 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 204 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 204 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK204_B_0x0 = 0;
        /** @brief Attempt to program fuse word 204 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK204_B_0x1 = 1;

    /** @brief Sticky programming lock for word 205 */
    using BSEC_SPLOCK6_SPLOCK205 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 205 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 205 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 205 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK205_B_0x0 = 0;
        /** @brief Attempt to program fuse word 205 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK205_B_0x1 = 1;

    /** @brief Sticky programming lock for word 206 */
    using BSEC_SPLOCK6_SPLOCK206 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 206 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 206 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 206 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK206_B_0x0 = 0;
        /** @brief Attempt to program fuse word 206 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK206_B_0x1 = 1;

    /** @brief Sticky programming lock for word 207 */
    using BSEC_SPLOCK6_SPLOCK207 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 207 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 207 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 207 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK207_B_0x0 = 0;
        /** @brief Attempt to program fuse word 207 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK207_B_0x1 = 1;

    /** @brief Sticky programming lock for word 208 */
    using BSEC_SPLOCK6_SPLOCK208 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 208 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 208 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 208 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK208_B_0x0 = 0;
        /** @brief Attempt to program fuse word 208 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK208_B_0x1 = 1;

    /** @brief Sticky programming lock for word 209 */
    using BSEC_SPLOCK6_SPLOCK209 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 209 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 209 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 209 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK209_B_0x0 = 0;
        /** @brief Attempt to program fuse word 209 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK209_B_0x1 = 1;

    /** @brief Sticky programming lock for word 210 */
    using BSEC_SPLOCK6_SPLOCK210 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 210 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 210 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 210 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK210_B_0x0 = 0;
        /** @brief Attempt to program fuse word 210 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK210_B_0x1 = 1;

    /** @brief Sticky programming lock for word 211 */
    using BSEC_SPLOCK6_SPLOCK211 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 211 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 211 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 211 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK211_B_0x0 = 0;
        /** @brief Attempt to program fuse word 211 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK211_B_0x1 = 1;

    /** @brief Sticky programming lock for word 212 */
    using BSEC_SPLOCK6_SPLOCK212 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 212 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 212 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 212 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK212_B_0x0 = 0;
        /** @brief Attempt to program fuse word 212 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK212_B_0x1 = 1;

    /** @brief Sticky programming lock for word 213 */
    using BSEC_SPLOCK6_SPLOCK213 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 213 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 213 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 213 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK213_B_0x0 = 0;
        /** @brief Attempt to program fuse word 213 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK213_B_0x1 = 1;

    /** @brief Sticky programming lock for word 214 */
    using BSEC_SPLOCK6_SPLOCK214 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 214 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 214 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 214 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK214_B_0x0 = 0;
        /** @brief Attempt to program fuse word 214 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK214_B_0x1 = 1;

    /** @brief Sticky programming lock for word 215 */
    using BSEC_SPLOCK6_SPLOCK215 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 215 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 215 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 215 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK215_B_0x0 = 0;
        /** @brief Attempt to program fuse word 215 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK215_B_0x1 = 1;

    /** @brief Sticky programming lock for word 216 */
    using BSEC_SPLOCK6_SPLOCK216 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 216 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 216 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 216 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK216_B_0x0 = 0;
        /** @brief Attempt to program fuse word 216 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK216_B_0x1 = 1;

    /** @brief Sticky programming lock for word 217 */
    using BSEC_SPLOCK6_SPLOCK217 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 217 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 217 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 217 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK217_B_0x0 = 0;
        /** @brief Attempt to program fuse word 217 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK217_B_0x1 = 1;

    /** @brief Sticky programming lock for word 218 */
    using BSEC_SPLOCK6_SPLOCK218 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 218 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 218 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 218 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK218_B_0x0 = 0;
        /** @brief Attempt to program fuse word 218 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK218_B_0x1 = 1;

    /** @brief Sticky programming lock for word 219 */
    using BSEC_SPLOCK6_SPLOCK219 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 219 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 219 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 219 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK219_B_0x0 = 0;
        /** @brief Attempt to program fuse word 219 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK219_B_0x1 = 1;

    /** @brief Sticky programming lock for word 220 */
    using BSEC_SPLOCK6_SPLOCK220 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 220 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 220 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 220 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK220_B_0x0 = 0;
        /** @brief Attempt to program fuse word 220 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK220_B_0x1 = 1;

    /** @brief Sticky programming lock for word 221 */
    using BSEC_SPLOCK6_SPLOCK221 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 221 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 221 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 221 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK221_B_0x0 = 0;
        /** @brief Attempt to program fuse word 221 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK221_B_0x1 = 1;

    /** @brief Sticky programming lock for word 222 */
    using BSEC_SPLOCK6_SPLOCK222 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 222 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 222 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 222 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK222_B_0x0 = 0;
        /** @brief Attempt to program fuse word 222 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK222_B_0x1 = 1;

    /** @brief Sticky programming lock for word 223 */
    using BSEC_SPLOCK6_SPLOCK223 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 223 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 223 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 223 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK223_B_0x0 = 0;
        /** @brief Attempt to program fuse word 223 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK6_SPLOCK223_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 7 */
    using BSEC_SPLOCK7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x81C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 224 */
    using BSEC_SPLOCK7_SPLOCK224 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 224 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 224 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 224 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK224_B_0x0 = 0;
        /** @brief Attempt to program fuse word 224 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK224_B_0x1 = 1;

    /** @brief Sticky programming lock for word 225 */
    using BSEC_SPLOCK7_SPLOCK225 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 225 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 225 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 225 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK225_B_0x0 = 0;
        /** @brief Attempt to program fuse word 225 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK225_B_0x1 = 1;

    /** @brief Sticky programming lock for word 226 */
    using BSEC_SPLOCK7_SPLOCK226 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 226 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 226 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 226 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK226_B_0x0 = 0;
        /** @brief Attempt to program fuse word 226 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK226_B_0x1 = 1;

    /** @brief Sticky programming lock for word 227 */
    using BSEC_SPLOCK7_SPLOCK227 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 227 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 227 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 227 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK227_B_0x0 = 0;
        /** @brief Attempt to program fuse word 227 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK227_B_0x1 = 1;

    /** @brief Sticky programming lock for word 228 */
    using BSEC_SPLOCK7_SPLOCK228 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 228 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 228 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 228 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK228_B_0x0 = 0;
        /** @brief Attempt to program fuse word 228 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK228_B_0x1 = 1;

    /** @brief Sticky programming lock for word 229 */
    using BSEC_SPLOCK7_SPLOCK229 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 229 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 229 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 229 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK229_B_0x0 = 0;
        /** @brief Attempt to program fuse word 229 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK229_B_0x1 = 1;

    /** @brief Sticky programming lock for word 230 */
    using BSEC_SPLOCK7_SPLOCK230 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 230 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 230 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 230 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK230_B_0x0 = 0;
        /** @brief Attempt to program fuse word 230 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK230_B_0x1 = 1;

    /** @brief Sticky programming lock for word 231 */
    using BSEC_SPLOCK7_SPLOCK231 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 231 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 231 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 231 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK231_B_0x0 = 0;
        /** @brief Attempt to program fuse word 231 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK231_B_0x1 = 1;

    /** @brief Sticky programming lock for word 232 */
    using BSEC_SPLOCK7_SPLOCK232 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 232 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 232 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 232 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK232_B_0x0 = 0;
        /** @brief Attempt to program fuse word 232 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK232_B_0x1 = 1;

    /** @brief Sticky programming lock for word 233 */
    using BSEC_SPLOCK7_SPLOCK233 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 233 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 233 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 233 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK233_B_0x0 = 0;
        /** @brief Attempt to program fuse word 233 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK233_B_0x1 = 1;

    /** @brief Sticky programming lock for word 234 */
    using BSEC_SPLOCK7_SPLOCK234 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 234 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 234 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 234 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK234_B_0x0 = 0;
        /** @brief Attempt to program fuse word 234 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK234_B_0x1 = 1;

    /** @brief Sticky programming lock for word 235 */
    using BSEC_SPLOCK7_SPLOCK235 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 235 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 235 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 235 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK235_B_0x0 = 0;
        /** @brief Attempt to program fuse word 235 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK235_B_0x1 = 1;

    /** @brief Sticky programming lock for word 236 */
    using BSEC_SPLOCK7_SPLOCK236 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 236 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 236 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 236 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK236_B_0x0 = 0;
        /** @brief Attempt to program fuse word 236 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK236_B_0x1 = 1;

    /** @brief Sticky programming lock for word 237 */
    using BSEC_SPLOCK7_SPLOCK237 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 237 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 237 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 237 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK237_B_0x0 = 0;
        /** @brief Attempt to program fuse word 237 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK237_B_0x1 = 1;

    /** @brief Sticky programming lock for word 238 */
    using BSEC_SPLOCK7_SPLOCK238 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 238 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 238 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 238 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK238_B_0x0 = 0;
        /** @brief Attempt to program fuse word 238 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK238_B_0x1 = 1;

    /** @brief Sticky programming lock for word 239 */
    using BSEC_SPLOCK7_SPLOCK239 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 239 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 239 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 239 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK239_B_0x0 = 0;
        /** @brief Attempt to program fuse word 239 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK239_B_0x1 = 1;

    /** @brief Sticky programming lock for word 240 */
    using BSEC_SPLOCK7_SPLOCK240 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 240 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 240 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 240 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK240_B_0x0 = 0;
        /** @brief Attempt to program fuse word 240 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK240_B_0x1 = 1;

    /** @brief Sticky programming lock for word 241 */
    using BSEC_SPLOCK7_SPLOCK241 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 241 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 241 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 241 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK241_B_0x0 = 0;
        /** @brief Attempt to program fuse word 241 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK241_B_0x1 = 1;

    /** @brief Sticky programming lock for word 242 */
    using BSEC_SPLOCK7_SPLOCK242 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 242 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 242 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 242 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK242_B_0x0 = 0;
        /** @brief Attempt to program fuse word 242 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK242_B_0x1 = 1;

    /** @brief Sticky programming lock for word 243 */
    using BSEC_SPLOCK7_SPLOCK243 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 243 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 243 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 243 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK243_B_0x0 = 0;
        /** @brief Attempt to program fuse word 243 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK243_B_0x1 = 1;

    /** @brief Sticky programming lock for word 244 */
    using BSEC_SPLOCK7_SPLOCK244 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 244 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 244 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 244 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK244_B_0x0 = 0;
        /** @brief Attempt to program fuse word 244 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK244_B_0x1 = 1;

    /** @brief Sticky programming lock for word 245 */
    using BSEC_SPLOCK7_SPLOCK245 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 245 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 245 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 245 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK245_B_0x0 = 0;
        /** @brief Attempt to program fuse word 245 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK245_B_0x1 = 1;

    /** @brief Sticky programming lock for word 246 */
    using BSEC_SPLOCK7_SPLOCK246 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 246 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 246 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 246 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK246_B_0x0 = 0;
        /** @brief Attempt to program fuse word 246 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK246_B_0x1 = 1;

    /** @brief Sticky programming lock for word 247 */
    using BSEC_SPLOCK7_SPLOCK247 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 247 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 247 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 247 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK247_B_0x0 = 0;
        /** @brief Attempt to program fuse word 247 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK247_B_0x1 = 1;

    /** @brief Sticky programming lock for word 248 */
    using BSEC_SPLOCK7_SPLOCK248 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 248 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 248 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 248 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK248_B_0x0 = 0;
        /** @brief Attempt to program fuse word 248 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK248_B_0x1 = 1;

    /** @brief Sticky programming lock for word 249 */
    using BSEC_SPLOCK7_SPLOCK249 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 249 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 249 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 249 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK249_B_0x0 = 0;
        /** @brief Attempt to program fuse word 249 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK249_B_0x1 = 1;

    /** @brief Sticky programming lock for word 250 */
    using BSEC_SPLOCK7_SPLOCK250 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 250 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 250 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 250 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK250_B_0x0 = 0;
        /** @brief Attempt to program fuse word 250 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK250_B_0x1 = 1;

    /** @brief Sticky programming lock for word 251 */
    using BSEC_SPLOCK7_SPLOCK251 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 251 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 251 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 251 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK251_B_0x0 = 0;
        /** @brief Attempt to program fuse word 251 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK251_B_0x1 = 1;

    /** @brief Sticky programming lock for word 252 */
    using BSEC_SPLOCK7_SPLOCK252 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 252 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 252 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 252 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK252_B_0x0 = 0;
        /** @brief Attempt to program fuse word 252 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK252_B_0x1 = 1;

    /** @brief Sticky programming lock for word 253 */
    using BSEC_SPLOCK7_SPLOCK253 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 253 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 253 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 253 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK253_B_0x0 = 0;
        /** @brief Attempt to program fuse word 253 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK253_B_0x1 = 1;

    /** @brief Sticky programming lock for word 254 */
    using BSEC_SPLOCK7_SPLOCK254 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 254 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 254 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 254 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK254_B_0x0 = 0;
        /** @brief Attempt to program fuse word 254 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK254_B_0x1 = 1;

    /** @brief Sticky programming lock for word 255 */
    using BSEC_SPLOCK7_SPLOCK255 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 255 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 255 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 255 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK255_B_0x0 = 0;
        /** @brief Attempt to program fuse word 255 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK7_SPLOCK255_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 8 */
    using BSEC_SPLOCK8 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x820, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 256 */
    using BSEC_SPLOCK8_SPLOCK256 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 256 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 256 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 256 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK256_B_0x0 = 0;
        /** @brief Attempt to program fuse word 256 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK256_B_0x1 = 1;

    /** @brief Sticky programming lock for word 257 */
    using BSEC_SPLOCK8_SPLOCK257 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 257 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 257 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 257 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK257_B_0x0 = 0;
        /** @brief Attempt to program fuse word 257 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK257_B_0x1 = 1;

    /** @brief Sticky programming lock for word 258 */
    using BSEC_SPLOCK8_SPLOCK258 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 258 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 258 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 258 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK258_B_0x0 = 0;
        /** @brief Attempt to program fuse word 258 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK258_B_0x1 = 1;

    /** @brief Sticky programming lock for word 259 */
    using BSEC_SPLOCK8_SPLOCK259 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 259 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 259 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 259 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK259_B_0x0 = 0;
        /** @brief Attempt to program fuse word 259 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK259_B_0x1 = 1;

    /** @brief Sticky programming lock for word 260 */
    using BSEC_SPLOCK8_SPLOCK260 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 260 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 260 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 260 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK260_B_0x0 = 0;
        /** @brief Attempt to program fuse word 260 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK260_B_0x1 = 1;

    /** @brief Sticky programming lock for word 261 */
    using BSEC_SPLOCK8_SPLOCK261 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 261 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 261 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 261 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK261_B_0x0 = 0;
        /** @brief Attempt to program fuse word 261 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK261_B_0x1 = 1;

    /** @brief Sticky programming lock for word 262 */
    using BSEC_SPLOCK8_SPLOCK262 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 262 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 262 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 262 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK262_B_0x0 = 0;
        /** @brief Attempt to program fuse word 262 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK262_B_0x1 = 1;

    /** @brief Sticky programming lock for word 263 */
    using BSEC_SPLOCK8_SPLOCK263 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 263 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 263 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 263 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK263_B_0x0 = 0;
        /** @brief Attempt to program fuse word 263 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK263_B_0x1 = 1;

    /** @brief Sticky programming lock for word 264 */
    using BSEC_SPLOCK8_SPLOCK264 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 264 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 264 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 264 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK264_B_0x0 = 0;
        /** @brief Attempt to program fuse word 264 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK264_B_0x1 = 1;

    /** @brief Sticky programming lock for word 265 */
    using BSEC_SPLOCK8_SPLOCK265 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 265 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 265 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 265 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK265_B_0x0 = 0;
        /** @brief Attempt to program fuse word 265 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK265_B_0x1 = 1;

    /** @brief Sticky programming lock for word 266 */
    using BSEC_SPLOCK8_SPLOCK266 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 266 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 266 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 266 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK266_B_0x0 = 0;
        /** @brief Attempt to program fuse word 266 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK266_B_0x1 = 1;

    /** @brief Sticky programming lock for word 267 */
    using BSEC_SPLOCK8_SPLOCK267 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 267 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 267 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 267 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK267_B_0x0 = 0;
        /** @brief Attempt to program fuse word 267 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK267_B_0x1 = 1;

    /** @brief Sticky programming lock for word 268 */
    using BSEC_SPLOCK8_SPLOCK268 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 268 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 268 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 268 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK268_B_0x0 = 0;
        /** @brief Attempt to program fuse word 268 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK268_B_0x1 = 1;

    /** @brief Sticky programming lock for word 269 */
    using BSEC_SPLOCK8_SPLOCK269 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 269 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 269 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 269 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK269_B_0x0 = 0;
        /** @brief Attempt to program fuse word 269 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK269_B_0x1 = 1;

    /** @brief Sticky programming lock for word 270 */
    using BSEC_SPLOCK8_SPLOCK270 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 270 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 270 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 270 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK270_B_0x0 = 0;
        /** @brief Attempt to program fuse word 270 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK270_B_0x1 = 1;

    /** @brief Sticky programming lock for word 271 */
    using BSEC_SPLOCK8_SPLOCK271 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 271 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 271 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 271 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK271_B_0x0 = 0;
        /** @brief Attempt to program fuse word 271 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK271_B_0x1 = 1;

    /** @brief Sticky programming lock for word 272 */
    using BSEC_SPLOCK8_SPLOCK272 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 272 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 272 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 272 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK272_B_0x0 = 0;
        /** @brief Attempt to program fuse word 272 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK272_B_0x1 = 1;

    /** @brief Sticky programming lock for word 273 */
    using BSEC_SPLOCK8_SPLOCK273 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 273 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 273 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 273 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK273_B_0x0 = 0;
        /** @brief Attempt to program fuse word 273 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK273_B_0x1 = 1;

    /** @brief Sticky programming lock for word 274 */
    using BSEC_SPLOCK8_SPLOCK274 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 274 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 274 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 274 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK274_B_0x0 = 0;
        /** @brief Attempt to program fuse word 274 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK274_B_0x1 = 1;

    /** @brief Sticky programming lock for word 275 */
    using BSEC_SPLOCK8_SPLOCK275 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 275 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 275 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 275 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK275_B_0x0 = 0;
        /** @brief Attempt to program fuse word 275 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK275_B_0x1 = 1;

    /** @brief Sticky programming lock for word 276 */
    using BSEC_SPLOCK8_SPLOCK276 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 276 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 276 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 276 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK276_B_0x0 = 0;
        /** @brief Attempt to program fuse word 276 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK276_B_0x1 = 1;

    /** @brief Sticky programming lock for word 277 */
    using BSEC_SPLOCK8_SPLOCK277 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 277 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 277 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 277 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK277_B_0x0 = 0;
        /** @brief Attempt to program fuse word 277 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK277_B_0x1 = 1;

    /** @brief Sticky programming lock for word 278 */
    using BSEC_SPLOCK8_SPLOCK278 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 278 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 278 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 278 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK278_B_0x0 = 0;
        /** @brief Attempt to program fuse word 278 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK278_B_0x1 = 1;

    /** @brief Sticky programming lock for word 279 */
    using BSEC_SPLOCK8_SPLOCK279 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 279 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 279 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 279 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK279_B_0x0 = 0;
        /** @brief Attempt to program fuse word 279 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK279_B_0x1 = 1;

    /** @brief Sticky programming lock for word 280 */
    using BSEC_SPLOCK8_SPLOCK280 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 280 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 280 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 280 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK280_B_0x0 = 0;
        /** @brief Attempt to program fuse word 280 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK280_B_0x1 = 1;

    /** @brief Sticky programming lock for word 281 */
    using BSEC_SPLOCK8_SPLOCK281 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 281 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 281 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 281 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK281_B_0x0 = 0;
        /** @brief Attempt to program fuse word 281 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK281_B_0x1 = 1;

    /** @brief Sticky programming lock for word 282 */
    using BSEC_SPLOCK8_SPLOCK282 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 282 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 282 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 282 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK282_B_0x0 = 0;
        /** @brief Attempt to program fuse word 282 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK282_B_0x1 = 1;

    /** @brief Sticky programming lock for word 283 */
    using BSEC_SPLOCK8_SPLOCK283 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 283 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 283 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 283 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK283_B_0x0 = 0;
        /** @brief Attempt to program fuse word 283 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK283_B_0x1 = 1;

    /** @brief Sticky programming lock for word 284 */
    using BSEC_SPLOCK8_SPLOCK284 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 284 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 284 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 284 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK284_B_0x0 = 0;
        /** @brief Attempt to program fuse word 284 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK284_B_0x1 = 1;

    /** @brief Sticky programming lock for word 285 */
    using BSEC_SPLOCK8_SPLOCK285 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 285 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 285 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 285 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK285_B_0x0 = 0;
        /** @brief Attempt to program fuse word 285 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK285_B_0x1 = 1;

    /** @brief Sticky programming lock for word 286 */
    using BSEC_SPLOCK8_SPLOCK286 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 286 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 286 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 286 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK286_B_0x0 = 0;
        /** @brief Attempt to program fuse word 286 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK286_B_0x1 = 1;

    /** @brief Sticky programming lock for word 287 */
    using BSEC_SPLOCK8_SPLOCK287 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 287 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 287 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 287 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK287_B_0x0 = 0;
        /** @brief Attempt to program fuse word 287 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK8_SPLOCK287_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 9 */
    using BSEC_SPLOCK9 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x824, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 288 */
    using BSEC_SPLOCK9_SPLOCK288 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 288 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 288 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 288 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK288_B_0x0 = 0;
        /** @brief Attempt to program fuse word 288 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK288_B_0x1 = 1;

    /** @brief Sticky programming lock for word 289 */
    using BSEC_SPLOCK9_SPLOCK289 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 289 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 289 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 289 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK289_B_0x0 = 0;
        /** @brief Attempt to program fuse word 289 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK289_B_0x1 = 1;

    /** @brief Sticky programming lock for word 290 */
    using BSEC_SPLOCK9_SPLOCK290 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 290 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 290 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 290 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK290_B_0x0 = 0;
        /** @brief Attempt to program fuse word 290 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK290_B_0x1 = 1;

    /** @brief Sticky programming lock for word 291 */
    using BSEC_SPLOCK9_SPLOCK291 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 291 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 291 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 291 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK291_B_0x0 = 0;
        /** @brief Attempt to program fuse word 291 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK291_B_0x1 = 1;

    /** @brief Sticky programming lock for word 292 */
    using BSEC_SPLOCK9_SPLOCK292 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 292 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 292 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 292 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK292_B_0x0 = 0;
        /** @brief Attempt to program fuse word 292 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK292_B_0x1 = 1;

    /** @brief Sticky programming lock for word 293 */
    using BSEC_SPLOCK9_SPLOCK293 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 293 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 293 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 293 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK293_B_0x0 = 0;
        /** @brief Attempt to program fuse word 293 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK293_B_0x1 = 1;

    /** @brief Sticky programming lock for word 294 */
    using BSEC_SPLOCK9_SPLOCK294 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 294 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 294 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 294 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK294_B_0x0 = 0;
        /** @brief Attempt to program fuse word 294 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK294_B_0x1 = 1;

    /** @brief Sticky programming lock for word 295 */
    using BSEC_SPLOCK9_SPLOCK295 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 295 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 295 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 295 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK295_B_0x0 = 0;
        /** @brief Attempt to program fuse word 295 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK295_B_0x1 = 1;

    /** @brief Sticky programming lock for word 296 */
    using BSEC_SPLOCK9_SPLOCK296 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 296 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 296 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 296 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK296_B_0x0 = 0;
        /** @brief Attempt to program fuse word 296 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK296_B_0x1 = 1;

    /** @brief Sticky programming lock for word 297 */
    using BSEC_SPLOCK9_SPLOCK297 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 297 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 297 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 297 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK297_B_0x0 = 0;
        /** @brief Attempt to program fuse word 297 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK297_B_0x1 = 1;

    /** @brief Sticky programming lock for word 298 */
    using BSEC_SPLOCK9_SPLOCK298 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 298 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 298 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 298 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK298_B_0x0 = 0;
        /** @brief Attempt to program fuse word 298 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK298_B_0x1 = 1;

    /** @brief Sticky programming lock for word 299 */
    using BSEC_SPLOCK9_SPLOCK299 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 299 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 299 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 299 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK299_B_0x0 = 0;
        /** @brief Attempt to program fuse word 299 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK299_B_0x1 = 1;

    /** @brief Sticky programming lock for word 300 */
    using BSEC_SPLOCK9_SPLOCK300 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 300 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 300 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 300 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK300_B_0x0 = 0;
        /** @brief Attempt to program fuse word 300 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK300_B_0x1 = 1;

    /** @brief Sticky programming lock for word 301 */
    using BSEC_SPLOCK9_SPLOCK301 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 301 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 301 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 301 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK301_B_0x0 = 0;
        /** @brief Attempt to program fuse word 301 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK301_B_0x1 = 1;

    /** @brief Sticky programming lock for word 302 */
    using BSEC_SPLOCK9_SPLOCK302 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 302 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 302 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 302 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK302_B_0x0 = 0;
        /** @brief Attempt to program fuse word 302 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK302_B_0x1 = 1;

    /** @brief Sticky programming lock for word 303 */
    using BSEC_SPLOCK9_SPLOCK303 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 303 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 303 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 303 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK303_B_0x0 = 0;
        /** @brief Attempt to program fuse word 303 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK303_B_0x1 = 1;

    /** @brief Sticky programming lock for word 304 */
    using BSEC_SPLOCK9_SPLOCK304 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 304 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 304 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 304 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK304_B_0x0 = 0;
        /** @brief Attempt to program fuse word 304 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK304_B_0x1 = 1;

    /** @brief Sticky programming lock for word 305 */
    using BSEC_SPLOCK9_SPLOCK305 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 305 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 305 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 305 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK305_B_0x0 = 0;
        /** @brief Attempt to program fuse word 305 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK305_B_0x1 = 1;

    /** @brief Sticky programming lock for word 306 */
    using BSEC_SPLOCK9_SPLOCK306 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 306 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 306 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 306 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK306_B_0x0 = 0;
        /** @brief Attempt to program fuse word 306 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK306_B_0x1 = 1;

    /** @brief Sticky programming lock for word 307 */
    using BSEC_SPLOCK9_SPLOCK307 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 307 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 307 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 307 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK307_B_0x0 = 0;
        /** @brief Attempt to program fuse word 307 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK307_B_0x1 = 1;

    /** @brief Sticky programming lock for word 308 */
    using BSEC_SPLOCK9_SPLOCK308 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 308 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 308 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 308 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK308_B_0x0 = 0;
        /** @brief Attempt to program fuse word 308 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK308_B_0x1 = 1;

    /** @brief Sticky programming lock for word 309 */
    using BSEC_SPLOCK9_SPLOCK309 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 309 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 309 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 309 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK309_B_0x0 = 0;
        /** @brief Attempt to program fuse word 309 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK309_B_0x1 = 1;

    /** @brief Sticky programming lock for word 310 */
    using BSEC_SPLOCK9_SPLOCK310 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 310 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 310 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 310 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK310_B_0x0 = 0;
        /** @brief Attempt to program fuse word 310 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK310_B_0x1 = 1;

    /** @brief Sticky programming lock for word 311 */
    using BSEC_SPLOCK9_SPLOCK311 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 311 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 311 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 311 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK311_B_0x0 = 0;
        /** @brief Attempt to program fuse word 311 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK311_B_0x1 = 1;

    /** @brief Sticky programming lock for word 312 */
    using BSEC_SPLOCK9_SPLOCK312 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 312 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 312 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 312 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK312_B_0x0 = 0;
        /** @brief Attempt to program fuse word 312 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK312_B_0x1 = 1;

    /** @brief Sticky programming lock for word 313 */
    using BSEC_SPLOCK9_SPLOCK313 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 313 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 313 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 313 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK313_B_0x0 = 0;
        /** @brief Attempt to program fuse word 313 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK313_B_0x1 = 1;

    /** @brief Sticky programming lock for word 314 */
    using BSEC_SPLOCK9_SPLOCK314 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 314 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 314 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 314 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK314_B_0x0 = 0;
        /** @brief Attempt to program fuse word 314 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK314_B_0x1 = 1;

    /** @brief Sticky programming lock for word 315 */
    using BSEC_SPLOCK9_SPLOCK315 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 315 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 315 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 315 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK315_B_0x0 = 0;
        /** @brief Attempt to program fuse word 315 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK315_B_0x1 = 1;

    /** @brief Sticky programming lock for word 316 */
    using BSEC_SPLOCK9_SPLOCK316 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 316 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 316 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 316 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK316_B_0x0 = 0;
        /** @brief Attempt to program fuse word 316 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK316_B_0x1 = 1;

    /** @brief Sticky programming lock for word 317 */
    using BSEC_SPLOCK9_SPLOCK317 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 317 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 317 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 317 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK317_B_0x0 = 0;
        /** @brief Attempt to program fuse word 317 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK317_B_0x1 = 1;

    /** @brief Sticky programming lock for word 318 */
    using BSEC_SPLOCK9_SPLOCK318 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 318 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 318 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 318 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK318_B_0x0 = 0;
        /** @brief Attempt to program fuse word 318 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK318_B_0x1 = 1;

    /** @brief Sticky programming lock for word 319 */
    using BSEC_SPLOCK9_SPLOCK319 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 319 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 319 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 319 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK319_B_0x0 = 0;
        /** @brief Attempt to program fuse word 319 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK9_SPLOCK319_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 10 */
    using BSEC_SPLOCK10 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x828, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 320 */
    using BSEC_SPLOCK10_SPLOCK320 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 320 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 320 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 320 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK320_B_0x0 = 0;
        /** @brief Attempt to program fuse word 320 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK320_B_0x1 = 1;

    /** @brief Sticky programming lock for word 321 */
    using BSEC_SPLOCK10_SPLOCK321 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 321 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 321 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 321 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK321_B_0x0 = 0;
        /** @brief Attempt to program fuse word 321 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK321_B_0x1 = 1;

    /** @brief Sticky programming lock for word 322 */
    using BSEC_SPLOCK10_SPLOCK322 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 322 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 322 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 322 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK322_B_0x0 = 0;
        /** @brief Attempt to program fuse word 322 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK322_B_0x1 = 1;

    /** @brief Sticky programming lock for word 323 */
    using BSEC_SPLOCK10_SPLOCK323 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 323 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 323 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 323 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK323_B_0x0 = 0;
        /** @brief Attempt to program fuse word 323 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK323_B_0x1 = 1;

    /** @brief Sticky programming lock for word 324 */
    using BSEC_SPLOCK10_SPLOCK324 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 324 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 324 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 324 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK324_B_0x0 = 0;
        /** @brief Attempt to program fuse word 324 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK324_B_0x1 = 1;

    /** @brief Sticky programming lock for word 325 */
    using BSEC_SPLOCK10_SPLOCK325 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 325 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 325 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 325 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK325_B_0x0 = 0;
        /** @brief Attempt to program fuse word 325 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK325_B_0x1 = 1;

    /** @brief Sticky programming lock for word 326 */
    using BSEC_SPLOCK10_SPLOCK326 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 326 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 326 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 326 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK326_B_0x0 = 0;
        /** @brief Attempt to program fuse word 326 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK326_B_0x1 = 1;

    /** @brief Sticky programming lock for word 327 */
    using BSEC_SPLOCK10_SPLOCK327 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 327 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 327 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 327 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK327_B_0x0 = 0;
        /** @brief Attempt to program fuse word 327 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK327_B_0x1 = 1;

    /** @brief Sticky programming lock for word 328 */
    using BSEC_SPLOCK10_SPLOCK328 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 328 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 328 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 328 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK328_B_0x0 = 0;
        /** @brief Attempt to program fuse word 328 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK328_B_0x1 = 1;

    /** @brief Sticky programming lock for word 329 */
    using BSEC_SPLOCK10_SPLOCK329 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 329 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 329 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 329 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK329_B_0x0 = 0;
        /** @brief Attempt to program fuse word 329 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK329_B_0x1 = 1;

    /** @brief Sticky programming lock for word 330 */
    using BSEC_SPLOCK10_SPLOCK330 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 330 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 330 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 330 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK330_B_0x0 = 0;
        /** @brief Attempt to program fuse word 330 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK330_B_0x1 = 1;

    /** @brief Sticky programming lock for word 331 */
    using BSEC_SPLOCK10_SPLOCK331 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 331 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 331 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 331 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK331_B_0x0 = 0;
        /** @brief Attempt to program fuse word 331 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK331_B_0x1 = 1;

    /** @brief Sticky programming lock for word 332 */
    using BSEC_SPLOCK10_SPLOCK332 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 332 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 332 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 332 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK332_B_0x0 = 0;
        /** @brief Attempt to program fuse word 332 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK332_B_0x1 = 1;

    /** @brief Sticky programming lock for word 333 */
    using BSEC_SPLOCK10_SPLOCK333 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 333 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 333 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 333 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK333_B_0x0 = 0;
        /** @brief Attempt to program fuse word 333 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK333_B_0x1 = 1;

    /** @brief Sticky programming lock for word 334 */
    using BSEC_SPLOCK10_SPLOCK334 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 334 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 334 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 334 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK334_B_0x0 = 0;
        /** @brief Attempt to program fuse word 334 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK334_B_0x1 = 1;

    /** @brief Sticky programming lock for word 335 */
    using BSEC_SPLOCK10_SPLOCK335 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 335 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 335 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 335 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK335_B_0x0 = 0;
        /** @brief Attempt to program fuse word 335 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK335_B_0x1 = 1;

    /** @brief Sticky programming lock for word 336 */
    using BSEC_SPLOCK10_SPLOCK336 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 336 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 336 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 336 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK336_B_0x0 = 0;
        /** @brief Attempt to program fuse word 336 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK336_B_0x1 = 1;

    /** @brief Sticky programming lock for word 337 */
    using BSEC_SPLOCK10_SPLOCK337 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 337 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 337 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 337 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK337_B_0x0 = 0;
        /** @brief Attempt to program fuse word 337 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK337_B_0x1 = 1;

    /** @brief Sticky programming lock for word 338 */
    using BSEC_SPLOCK10_SPLOCK338 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 338 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 338 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 338 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK338_B_0x0 = 0;
        /** @brief Attempt to program fuse word 338 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK338_B_0x1 = 1;

    /** @brief Sticky programming lock for word 339 */
    using BSEC_SPLOCK10_SPLOCK339 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 339 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 339 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 339 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK339_B_0x0 = 0;
        /** @brief Attempt to program fuse word 339 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK339_B_0x1 = 1;

    /** @brief Sticky programming lock for word 340 */
    using BSEC_SPLOCK10_SPLOCK340 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 340 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 340 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 340 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK340_B_0x0 = 0;
        /** @brief Attempt to program fuse word 340 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK340_B_0x1 = 1;

    /** @brief Sticky programming lock for word 341 */
    using BSEC_SPLOCK10_SPLOCK341 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 341 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 341 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 341 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK341_B_0x0 = 0;
        /** @brief Attempt to program fuse word 341 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK341_B_0x1 = 1;

    /** @brief Sticky programming lock for word 342 */
    using BSEC_SPLOCK10_SPLOCK342 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 342 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 342 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 342 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK342_B_0x0 = 0;
        /** @brief Attempt to program fuse word 342 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK342_B_0x1 = 1;

    /** @brief Sticky programming lock for word 343 */
    using BSEC_SPLOCK10_SPLOCK343 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 343 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 343 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 343 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK343_B_0x0 = 0;
        /** @brief Attempt to program fuse word 343 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK343_B_0x1 = 1;

    /** @brief Sticky programming lock for word 344 */
    using BSEC_SPLOCK10_SPLOCK344 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 344 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 344 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 344 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK344_B_0x0 = 0;
        /** @brief Attempt to program fuse word 344 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK344_B_0x1 = 1;

    /** @brief Sticky programming lock for word 345 */
    using BSEC_SPLOCK10_SPLOCK345 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 345 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 345 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 345 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK345_B_0x0 = 0;
        /** @brief Attempt to program fuse word 345 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK345_B_0x1 = 1;

    /** @brief Sticky programming lock for word 346 */
    using BSEC_SPLOCK10_SPLOCK346 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 346 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 346 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 346 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK346_B_0x0 = 0;
        /** @brief Attempt to program fuse word 346 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK346_B_0x1 = 1;

    /** @brief Sticky programming lock for word 347 */
    using BSEC_SPLOCK10_SPLOCK347 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 347 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 347 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 347 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK347_B_0x0 = 0;
        /** @brief Attempt to program fuse word 347 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK347_B_0x1 = 1;

    /** @brief Sticky programming lock for word 348 */
    using BSEC_SPLOCK10_SPLOCK348 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 348 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 348 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 348 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK348_B_0x0 = 0;
        /** @brief Attempt to program fuse word 348 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK348_B_0x1 = 1;

    /** @brief Sticky programming lock for word 349 */
    using BSEC_SPLOCK10_SPLOCK349 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 349 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 349 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 349 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK349_B_0x0 = 0;
        /** @brief Attempt to program fuse word 349 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK349_B_0x1 = 1;

    /** @brief Sticky programming lock for word 350 */
    using BSEC_SPLOCK10_SPLOCK350 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 350 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 350 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 350 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK350_B_0x0 = 0;
        /** @brief Attempt to program fuse word 350 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK350_B_0x1 = 1;

    /** @brief Sticky programming lock for word 351 */
    using BSEC_SPLOCK10_SPLOCK351 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 351 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 351 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 351 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK351_B_0x0 = 0;
        /** @brief Attempt to program fuse word 351 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK10_SPLOCK351_B_0x1 = 1;

    /** @brief BSEC sticky programming lock register 11 */
    using BSEC_SPLOCK11 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x82C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Sticky programming lock for word 352 */
    using BSEC_SPLOCK11_SPLOCK352 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 352 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 352 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 352 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK352_B_0x0 = 0;
        /** @brief Attempt to program fuse word 352 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK352_B_0x1 = 1;

    /** @brief Sticky programming lock for word 353 */
    using BSEC_SPLOCK11_SPLOCK353 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 353 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 353 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 353 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK353_B_0x0 = 0;
        /** @brief Attempt to program fuse word 353 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK353_B_0x1 = 1;

    /** @brief Sticky programming lock for word 354 */
    using BSEC_SPLOCK11_SPLOCK354 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 354 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 354 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 354 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK354_B_0x0 = 0;
        /** @brief Attempt to program fuse word 354 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK354_B_0x1 = 1;

    /** @brief Sticky programming lock for word 355 */
    using BSEC_SPLOCK11_SPLOCK355 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 355 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 355 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 355 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK355_B_0x0 = 0;
        /** @brief Attempt to program fuse word 355 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK355_B_0x1 = 1;

    /** @brief Sticky programming lock for word 356 */
    using BSEC_SPLOCK11_SPLOCK356 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 356 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 356 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 356 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK356_B_0x0 = 0;
        /** @brief Attempt to program fuse word 356 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK356_B_0x1 = 1;

    /** @brief Sticky programming lock for word 357 */
    using BSEC_SPLOCK11_SPLOCK357 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 357 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 357 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 357 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK357_B_0x0 = 0;
        /** @brief Attempt to program fuse word 357 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK357_B_0x1 = 1;

    /** @brief Sticky programming lock for word 358 */
    using BSEC_SPLOCK11_SPLOCK358 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 358 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 358 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 358 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK358_B_0x0 = 0;
        /** @brief Attempt to program fuse word 358 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK358_B_0x1 = 1;

    /** @brief Sticky programming lock for word 359 */
    using BSEC_SPLOCK11_SPLOCK359 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 359 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 359 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 359 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK359_B_0x0 = 0;
        /** @brief Attempt to program fuse word 359 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK359_B_0x1 = 1;

    /** @brief Sticky programming lock for word 360 */
    using BSEC_SPLOCK11_SPLOCK360 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 360 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 360 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 360 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK360_B_0x0 = 0;
        /** @brief Attempt to program fuse word 360 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK360_B_0x1 = 1;

    /** @brief Sticky programming lock for word 361 */
    using BSEC_SPLOCK11_SPLOCK361 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 361 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 361 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 361 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK361_B_0x0 = 0;
        /** @brief Attempt to program fuse word 361 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK361_B_0x1 = 1;

    /** @brief Sticky programming lock for word 362 */
    using BSEC_SPLOCK11_SPLOCK362 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 362 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 362 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 362 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK362_B_0x0 = 0;
        /** @brief Attempt to program fuse word 362 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK362_B_0x1 = 1;

    /** @brief Sticky programming lock for word 363 */
    using BSEC_SPLOCK11_SPLOCK363 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 363 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 363 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 363 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK363_B_0x0 = 0;
        /** @brief Attempt to program fuse word 363 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK363_B_0x1 = 1;

    /** @brief Sticky programming lock for word 364 */
    using BSEC_SPLOCK11_SPLOCK364 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 364 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 364 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 364 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK364_B_0x0 = 0;
        /** @brief Attempt to program fuse word 364 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK364_B_0x1 = 1;

    /** @brief Sticky programming lock for word 365 */
    using BSEC_SPLOCK11_SPLOCK365 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 365 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 365 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 365 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK365_B_0x0 = 0;
        /** @brief Attempt to program fuse word 365 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK365_B_0x1 = 1;

    /** @brief Sticky programming lock for word 366 */
    using BSEC_SPLOCK11_SPLOCK366 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 366 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 366 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 366 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK366_B_0x0 = 0;
        /** @brief Attempt to program fuse word 366 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK366_B_0x1 = 1;

    /** @brief Sticky programming lock for word 367 */
    using BSEC_SPLOCK11_SPLOCK367 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 367 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 367 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 367 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK367_B_0x0 = 0;
        /** @brief Attempt to program fuse word 367 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK367_B_0x1 = 1;

    /** @brief Sticky programming lock for word 368 */
    using BSEC_SPLOCK11_SPLOCK368 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 368 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 368 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 368 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK368_B_0x0 = 0;
        /** @brief Attempt to program fuse word 368 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK368_B_0x1 = 1;

    /** @brief Sticky programming lock for word 369 */
    using BSEC_SPLOCK11_SPLOCK369 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 369 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 369 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 369 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK369_B_0x0 = 0;
        /** @brief Attempt to program fuse word 369 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK369_B_0x1 = 1;

    /** @brief Sticky programming lock for word 370 */
    using BSEC_SPLOCK11_SPLOCK370 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 370 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 370 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 370 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK370_B_0x0 = 0;
        /** @brief Attempt to program fuse word 370 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK370_B_0x1 = 1;

    /** @brief Sticky programming lock for word 371 */
    using BSEC_SPLOCK11_SPLOCK371 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 371 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 371 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 371 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK371_B_0x0 = 0;
        /** @brief Attempt to program fuse word 371 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK371_B_0x1 = 1;

    /** @brief Sticky programming lock for word 372 */
    using BSEC_SPLOCK11_SPLOCK372 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 372 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 372 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 372 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK372_B_0x0 = 0;
        /** @brief Attempt to program fuse word 372 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK372_B_0x1 = 1;

    /** @brief Sticky programming lock for word 373 */
    using BSEC_SPLOCK11_SPLOCK373 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 373 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 373 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 373 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK373_B_0x0 = 0;
        /** @brief Attempt to program fuse word 373 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK373_B_0x1 = 1;

    /** @brief Sticky programming lock for word 374 */
    using BSEC_SPLOCK11_SPLOCK374 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 374 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 374 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 374 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK374_B_0x0 = 0;
        /** @brief Attempt to program fuse word 374 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK374_B_0x1 = 1;

    /** @brief Sticky programming lock for word 375 */
    using BSEC_SPLOCK11_SPLOCK375 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 375 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 375 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 375 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK375_B_0x0 = 0;
        /** @brief Attempt to program fuse word 375 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK375_B_0x1 = 1;

    /** @brief Sticky programming lock for word 376 */
    using BSEC_SPLOCK11_SPLOCK376 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 376 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 376 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 376 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK376_B_0x0 = 0;
        /** @brief Attempt to program fuse word 376 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK376_B_0x1 = 1;

    /** @brief Sticky programming lock for word 377 */
    using BSEC_SPLOCK11_SPLOCK377 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 377 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 377 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 377 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK377_B_0x0 = 0;
        /** @brief Attempt to program fuse word 377 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK377_B_0x1 = 1;

    /** @brief Sticky programming lock for word 378 */
    using BSEC_SPLOCK11_SPLOCK378 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 378 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 378 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 378 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK378_B_0x0 = 0;
        /** @brief Attempt to program fuse word 378 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK378_B_0x1 = 1;

    /** @brief Sticky programming lock for word 379 */
    using BSEC_SPLOCK11_SPLOCK379 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 379 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 379 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 379 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK379_B_0x0 = 0;
        /** @brief Attempt to program fuse word 379 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK379_B_0x1 = 1;

    /** @brief Sticky programming lock for word 380 */
    using BSEC_SPLOCK11_SPLOCK380 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 380 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 380 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 380 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK380_B_0x0 = 0;
        /** @brief Attempt to program fuse word 380 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK380_B_0x1 = 1;

    /** @brief Sticky programming lock for word 381 */
    using BSEC_SPLOCK11_SPLOCK381 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 381 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 381 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 381 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK381_B_0x0 = 0;
        /** @brief Attempt to program fuse word 381 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK381_B_0x1 = 1;

    /** @brief Sticky programming lock for word 382 */
    using BSEC_SPLOCK11_SPLOCK382 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 382 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 382 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 382 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK382_B_0x0 = 0;
        /** @brief Attempt to program fuse word 382 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK382_B_0x1 = 1;

    /** @brief Sticky programming lock for word 383 */
    using BSEC_SPLOCK11_SPLOCK383 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 383 can be burnt in fuse memory array (value: 0)
     *          - B_0x1: Attempt to program fuse word 383 in OTP memory array is silently ignored (value: 1)
     */
        /** @brief Fuse word 383 can be burnt in fuse memory array */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK383_B_0x0 = 0;
        /** @brief Attempt to program fuse word 383 in OTP memory array is silently ignored */
    constexpr std::uint32_t BSEC_SPLOCK11_SPLOCK383_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 0 */
    using BSEC_SWLOCK0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x840, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 0 */
    using BSEC_SWLOCK0_SWLOCK0 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR0 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR0 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR0 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK0_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR0 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK0_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 1 */
    using BSEC_SWLOCK0_SWLOCK1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR1 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR1 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR1 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK1_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR1 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK1_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 2 */
    using BSEC_SWLOCK0_SWLOCK2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR2 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR2 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR2 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK2_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR2 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK2_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 3 */
    using BSEC_SWLOCK0_SWLOCK3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR3 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR3 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR3 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK3_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR3 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK3_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 4 */
    using BSEC_SWLOCK0_SWLOCK4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR4 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR4 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR4 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK4_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR4 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK4_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 5 */
    using BSEC_SWLOCK0_SWLOCK5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR5 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR5 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR5 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK5_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR5 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK5_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 6 */
    using BSEC_SWLOCK0_SWLOCK6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR6 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR6 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR6 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK6_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR6 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK6_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 7 */
    using BSEC_SWLOCK0_SWLOCK7 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR7 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR7 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR7 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK7_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR7 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK7_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 8 */
    using BSEC_SWLOCK0_SWLOCK8 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR8 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR8 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR8 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK8_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR8 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK8_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 9 */
    using BSEC_SWLOCK0_SWLOCK9 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR9 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR9 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR9 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK9_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR9 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK9_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 10 */
    using BSEC_SWLOCK0_SWLOCK10 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR10 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR10 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR10 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK10_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR10 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK10_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 11 */
    using BSEC_SWLOCK0_SWLOCK11 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR11 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR11 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR11 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK11_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR11 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK11_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 12 */
    using BSEC_SWLOCK0_SWLOCK12 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR12 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR12 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR12 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK12_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR12 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK12_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 13 */
    using BSEC_SWLOCK0_SWLOCK13 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR13 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR13 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR13 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK13_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR13 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK13_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 14 */
    using BSEC_SWLOCK0_SWLOCK14 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR14 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR14 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR14 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK14_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR14 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK14_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 15 */
    using BSEC_SWLOCK0_SWLOCK15 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR15 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR15 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR15 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK15_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR15 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK15_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 16 */
    using BSEC_SWLOCK0_SWLOCK16 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR16 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR16 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR16 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK16_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR16 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK16_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 17 */
    using BSEC_SWLOCK0_SWLOCK17 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR17 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR17 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR17 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK17_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR17 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK17_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 18 */
    using BSEC_SWLOCK0_SWLOCK18 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR18 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR18 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR18 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK18_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR18 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK18_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 19 */
    using BSEC_SWLOCK0_SWLOCK19 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR19 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR19 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR19 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK19_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR19 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK19_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 20 */
    using BSEC_SWLOCK0_SWLOCK20 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR20 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR20 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR20 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK20_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR20 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK20_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 21 */
    using BSEC_SWLOCK0_SWLOCK21 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR21 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR21 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR21 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK21_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR21 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK21_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 22 */
    using BSEC_SWLOCK0_SWLOCK22 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR22 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR22 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR22 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK22_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR22 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK22_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 23 */
    using BSEC_SWLOCK0_SWLOCK23 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR23 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR23 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR23 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK23_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR23 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK23_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 24 */
    using BSEC_SWLOCK0_SWLOCK24 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR24 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR24 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR24 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK24_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR24 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK24_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 25 */
    using BSEC_SWLOCK0_SWLOCK25 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR25 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR25 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR25 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK25_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR25 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK25_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 26 */
    using BSEC_SWLOCK0_SWLOCK26 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR26 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR26 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR26 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK26_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR26 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK26_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 27 */
    using BSEC_SWLOCK0_SWLOCK27 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR27 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR27 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR27 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK27_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR27 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK27_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 28 */
    using BSEC_SWLOCK0_SWLOCK28 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR28 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR28 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR28 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK28_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR28 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK28_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 29 */
    using BSEC_SWLOCK0_SWLOCK29 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR29 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR29 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR29 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK29_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR29 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK29_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 30 */
    using BSEC_SWLOCK0_SWLOCK30 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR30 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR30 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR30 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK30_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR30 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK30_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 31 */
    using BSEC_SWLOCK0_SWLOCK31 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR31 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR31 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR31 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK31_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR31 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK0_SWLOCK31_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 1 */
    using BSEC_SWLOCK1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x844, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 32 */
    using BSEC_SWLOCK1_SWLOCK32 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR32 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR32 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR32 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK32_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR32 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK32_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 33 */
    using BSEC_SWLOCK1_SWLOCK33 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR33 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR33 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR33 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK33_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR33 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK33_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 34 */
    using BSEC_SWLOCK1_SWLOCK34 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR34 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR34 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR34 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK34_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR34 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK34_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 35 */
    using BSEC_SWLOCK1_SWLOCK35 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR35 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR35 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR35 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK35_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR35 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK35_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 36 */
    using BSEC_SWLOCK1_SWLOCK36 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR36 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR36 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR36 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK36_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR36 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK36_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 37 */
    using BSEC_SWLOCK1_SWLOCK37 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR37 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR37 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR37 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK37_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR37 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK37_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 38 */
    using BSEC_SWLOCK1_SWLOCK38 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR38 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR38 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR38 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK38_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR38 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK38_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 39 */
    using BSEC_SWLOCK1_SWLOCK39 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR39 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR39 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR39 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK39_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR39 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK39_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 40 */
    using BSEC_SWLOCK1_SWLOCK40 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR40 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR40 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR40 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK40_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR40 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK40_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 41 */
    using BSEC_SWLOCK1_SWLOCK41 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR41 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR41 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR41 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK41_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR41 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK41_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 42 */
    using BSEC_SWLOCK1_SWLOCK42 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR42 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR42 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR42 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK42_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR42 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK42_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 43 */
    using BSEC_SWLOCK1_SWLOCK43 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR43 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR43 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR43 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK43_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR43 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK43_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 44 */
    using BSEC_SWLOCK1_SWLOCK44 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR44 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR44 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR44 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK44_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR44 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK44_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 45 */
    using BSEC_SWLOCK1_SWLOCK45 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR45 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR45 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR45 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK45_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR45 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK45_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 46 */
    using BSEC_SWLOCK1_SWLOCK46 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR46 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR46 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR46 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK46_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR46 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK46_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 47 */
    using BSEC_SWLOCK1_SWLOCK47 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR47 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR47 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR47 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK47_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR47 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK47_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 48 */
    using BSEC_SWLOCK1_SWLOCK48 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR48 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR48 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR48 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK48_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR48 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK48_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 49 */
    using BSEC_SWLOCK1_SWLOCK49 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR49 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR49 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR49 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK49_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR49 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK49_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 50 */
    using BSEC_SWLOCK1_SWLOCK50 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR50 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR50 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR50 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK50_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR50 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK50_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 51 */
    using BSEC_SWLOCK1_SWLOCK51 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR51 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR51 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR51 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK51_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR51 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK51_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 52 */
    using BSEC_SWLOCK1_SWLOCK52 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR52 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR52 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR52 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK52_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR52 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK52_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 53 */
    using BSEC_SWLOCK1_SWLOCK53 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR53 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR53 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR53 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK53_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR53 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK53_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 54 */
    using BSEC_SWLOCK1_SWLOCK54 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR54 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR54 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR54 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK54_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR54 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK54_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 55 */
    using BSEC_SWLOCK1_SWLOCK55 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR55 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR55 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR55 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK55_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR55 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK55_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 56 */
    using BSEC_SWLOCK1_SWLOCK56 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR56 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR56 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR56 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK56_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR56 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK56_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 57 */
    using BSEC_SWLOCK1_SWLOCK57 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR57 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR57 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR57 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK57_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR57 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK57_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 58 */
    using BSEC_SWLOCK1_SWLOCK58 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR58 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR58 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR58 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK58_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR58 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK58_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 59 */
    using BSEC_SWLOCK1_SWLOCK59 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR59 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR59 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR59 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK59_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR59 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK59_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 60 */
    using BSEC_SWLOCK1_SWLOCK60 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR60 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR60 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR60 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK60_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR60 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK60_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 61 */
    using BSEC_SWLOCK1_SWLOCK61 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR61 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR61 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR61 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK61_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR61 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK61_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 62 */
    using BSEC_SWLOCK1_SWLOCK62 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR62 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR62 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR62 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK62_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR62 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK62_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 63 */
    using BSEC_SWLOCK1_SWLOCK63 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR63 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR63 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR63 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK63_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR63 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK1_SWLOCK63_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 2 */
    using BSEC_SWLOCK2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x848, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 64 */
    using BSEC_SWLOCK2_SWLOCK64 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR64 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR64 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR64 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK64_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR64 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK64_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 65 */
    using BSEC_SWLOCK2_SWLOCK65 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR65 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR65 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR65 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK65_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR65 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK65_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 66 */
    using BSEC_SWLOCK2_SWLOCK66 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR66 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR66 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR66 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK66_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR66 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK66_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 67 */
    using BSEC_SWLOCK2_SWLOCK67 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR67 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR67 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR67 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK67_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR67 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK67_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 68 */
    using BSEC_SWLOCK2_SWLOCK68 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR68 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR68 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR68 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK68_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR68 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK68_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 69 */
    using BSEC_SWLOCK2_SWLOCK69 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR69 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR69 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR69 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK69_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR69 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK69_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 70 */
    using BSEC_SWLOCK2_SWLOCK70 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR70 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR70 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR70 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK70_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR70 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK70_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 71 */
    using BSEC_SWLOCK2_SWLOCK71 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR71 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR71 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR71 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK71_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR71 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK71_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 72 */
    using BSEC_SWLOCK2_SWLOCK72 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR72 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR72 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR72 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK72_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR72 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK72_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 73 */
    using BSEC_SWLOCK2_SWLOCK73 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR73 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR73 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR73 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK73_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR73 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK73_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 74 */
    using BSEC_SWLOCK2_SWLOCK74 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR74 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR74 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR74 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK74_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR74 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK74_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 75 */
    using BSEC_SWLOCK2_SWLOCK75 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR75 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR75 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR75 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK75_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR75 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK75_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 76 */
    using BSEC_SWLOCK2_SWLOCK76 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR76 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR76 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR76 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK76_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR76 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK76_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 77 */
    using BSEC_SWLOCK2_SWLOCK77 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR77 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR77 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR77 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK77_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR77 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK77_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 78 */
    using BSEC_SWLOCK2_SWLOCK78 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR78 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR78 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR78 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK78_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR78 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK78_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 79 */
    using BSEC_SWLOCK2_SWLOCK79 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR79 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR79 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR79 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK79_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR79 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK79_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 80 */
    using BSEC_SWLOCK2_SWLOCK80 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR80 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR80 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR80 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK80_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR80 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK80_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 81 */
    using BSEC_SWLOCK2_SWLOCK81 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR81 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR81 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR81 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK81_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR81 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK81_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 82 */
    using BSEC_SWLOCK2_SWLOCK82 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR82 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR82 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR82 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK82_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR82 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK82_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 83 */
    using BSEC_SWLOCK2_SWLOCK83 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR83 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR83 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR83 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK83_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR83 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK83_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 84 */
    using BSEC_SWLOCK2_SWLOCK84 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR84 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR84 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR84 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK84_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR84 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK84_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 85 */
    using BSEC_SWLOCK2_SWLOCK85 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR85 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR85 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR85 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK85_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR85 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK85_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 86 */
    using BSEC_SWLOCK2_SWLOCK86 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR86 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR86 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR86 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK86_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR86 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK86_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 87 */
    using BSEC_SWLOCK2_SWLOCK87 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR87 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR87 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR87 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK87_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR87 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK87_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 88 */
    using BSEC_SWLOCK2_SWLOCK88 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR88 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR88 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR88 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK88_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR88 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK88_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 89 */
    using BSEC_SWLOCK2_SWLOCK89 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR89 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR89 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR89 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK89_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR89 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK89_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 90 */
    using BSEC_SWLOCK2_SWLOCK90 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR90 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR90 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR90 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK90_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR90 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK90_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 91 */
    using BSEC_SWLOCK2_SWLOCK91 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR91 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR91 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR91 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK91_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR91 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK91_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 92 */
    using BSEC_SWLOCK2_SWLOCK92 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR92 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR92 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR92 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK92_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR92 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK92_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 93 */
    using BSEC_SWLOCK2_SWLOCK93 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR93 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR93 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR93 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK93_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR93 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK93_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 94 */
    using BSEC_SWLOCK2_SWLOCK94 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR94 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR94 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR94 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK94_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR94 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK94_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 95 */
    using BSEC_SWLOCK2_SWLOCK95 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR95 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR95 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR95 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK95_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR95 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK2_SWLOCK95_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 3 */
    using BSEC_SWLOCK3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x84C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 96 */
    using BSEC_SWLOCK3_SWLOCK96 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR96 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR96 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR96 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK96_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR96 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK96_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 97 */
    using BSEC_SWLOCK3_SWLOCK97 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR97 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR97 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR97 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK97_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR97 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK97_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 98 */
    using BSEC_SWLOCK3_SWLOCK98 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR98 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR98 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR98 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK98_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR98 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK98_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 99 */
    using BSEC_SWLOCK3_SWLOCK99 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR99 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR99 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR99 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK99_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR99 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK99_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 100 */
    using BSEC_SWLOCK3_SWLOCK100 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR100 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR100 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR100 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK100_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR100 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK100_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 101 */
    using BSEC_SWLOCK3_SWLOCK101 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR101 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR101 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR101 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK101_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR101 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK101_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 102 */
    using BSEC_SWLOCK3_SWLOCK102 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR102 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR102 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR102 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK102_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR102 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK102_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 103 */
    using BSEC_SWLOCK3_SWLOCK103 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR103 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR103 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR103 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK103_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR103 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK103_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 104 */
    using BSEC_SWLOCK3_SWLOCK104 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR104 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR104 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR104 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK104_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR104 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK104_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 105 */
    using BSEC_SWLOCK3_SWLOCK105 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR105 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR105 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR105 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK105_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR105 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK105_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 106 */
    using BSEC_SWLOCK3_SWLOCK106 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR106 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR106 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR106 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK106_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR106 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK106_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 107 */
    using BSEC_SWLOCK3_SWLOCK107 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR107 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR107 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR107 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK107_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR107 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK107_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 108 */
    using BSEC_SWLOCK3_SWLOCK108 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR108 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR108 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR108 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK108_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR108 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK108_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 109 */
    using BSEC_SWLOCK3_SWLOCK109 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR109 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR109 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR109 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK109_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR109 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK109_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 110 */
    using BSEC_SWLOCK3_SWLOCK110 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR110 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR110 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR110 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK110_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR110 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK110_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 111 */
    using BSEC_SWLOCK3_SWLOCK111 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR111 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR111 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR111 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK111_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR111 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK111_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 112 */
    using BSEC_SWLOCK3_SWLOCK112 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR112 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR112 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR112 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK112_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR112 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK112_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 113 */
    using BSEC_SWLOCK3_SWLOCK113 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR113 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR113 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR113 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK113_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR113 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK113_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 114 */
    using BSEC_SWLOCK3_SWLOCK114 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR114 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR114 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR114 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK114_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR114 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK114_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 115 */
    using BSEC_SWLOCK3_SWLOCK115 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR115 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR115 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR115 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK115_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR115 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK115_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 116 */
    using BSEC_SWLOCK3_SWLOCK116 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR116 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR116 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR116 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK116_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR116 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK116_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 117 */
    using BSEC_SWLOCK3_SWLOCK117 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR117 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR117 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR117 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK117_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR117 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK117_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 118 */
    using BSEC_SWLOCK3_SWLOCK118 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR118 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR118 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR118 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK118_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR118 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK118_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 119 */
    using BSEC_SWLOCK3_SWLOCK119 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR119 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR119 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR119 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK119_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR119 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK119_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 120 */
    using BSEC_SWLOCK3_SWLOCK120 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR120 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR120 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR120 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK120_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR120 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK120_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 121 */
    using BSEC_SWLOCK3_SWLOCK121 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR121 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR121 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR121 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK121_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR121 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK121_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 122 */
    using BSEC_SWLOCK3_SWLOCK122 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR122 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR122 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR122 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK122_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR122 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK122_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 123 */
    using BSEC_SWLOCK3_SWLOCK123 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR123 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR123 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR123 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK123_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR123 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK123_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 124 */
    using BSEC_SWLOCK3_SWLOCK124 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR124 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR124 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR124 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK124_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR124 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK124_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 125 */
    using BSEC_SWLOCK3_SWLOCK125 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR125 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR125 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR125 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK125_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR125 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK125_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 126 */
    using BSEC_SWLOCK3_SWLOCK126 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR126 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR126 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR126 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK126_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR126 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK126_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 127 */
    using BSEC_SWLOCK3_SWLOCK127 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR127 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR127 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR127 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK127_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR127 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK3_SWLOCK127_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 4 */
    using BSEC_SWLOCK4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x850, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 128 */
    using BSEC_SWLOCK4_SWLOCK128 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR128 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR128 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR128 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK128_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR128 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK128_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 129 */
    using BSEC_SWLOCK4_SWLOCK129 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR129 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR129 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR129 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK129_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR129 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK129_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 130 */
    using BSEC_SWLOCK4_SWLOCK130 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR130 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR130 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR130 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK130_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR130 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK130_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 131 */
    using BSEC_SWLOCK4_SWLOCK131 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR131 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR131 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR131 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK131_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR131 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK131_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 132 */
    using BSEC_SWLOCK4_SWLOCK132 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR132 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR132 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR132 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK132_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR132 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK132_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 133 */
    using BSEC_SWLOCK4_SWLOCK133 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR133 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR133 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR133 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK133_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR133 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK133_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 134 */
    using BSEC_SWLOCK4_SWLOCK134 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR134 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR134 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR134 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK134_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR134 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK134_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 135 */
    using BSEC_SWLOCK4_SWLOCK135 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR135 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR135 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR135 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK135_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR135 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK135_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 136 */
    using BSEC_SWLOCK4_SWLOCK136 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR136 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR136 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR136 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK136_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR136 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK136_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 137 */
    using BSEC_SWLOCK4_SWLOCK137 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR137 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR137 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR137 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK137_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR137 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK137_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 138 */
    using BSEC_SWLOCK4_SWLOCK138 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR138 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR138 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR138 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK138_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR138 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK138_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 139 */
    using BSEC_SWLOCK4_SWLOCK139 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR139 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR139 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR139 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK139_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR139 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK139_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 140 */
    using BSEC_SWLOCK4_SWLOCK140 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR140 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR140 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR140 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK140_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR140 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK140_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 141 */
    using BSEC_SWLOCK4_SWLOCK141 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR141 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR141 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR141 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK141_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR141 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK141_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 142 */
    using BSEC_SWLOCK4_SWLOCK142 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR142 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR142 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR142 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK142_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR142 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK142_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 143 */
    using BSEC_SWLOCK4_SWLOCK143 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR143 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR143 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR143 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK143_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR143 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK143_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 144 */
    using BSEC_SWLOCK4_SWLOCK144 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR144 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR144 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR144 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK144_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR144 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK144_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 145 */
    using BSEC_SWLOCK4_SWLOCK145 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR145 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR145 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR145 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK145_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR145 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK145_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 146 */
    using BSEC_SWLOCK4_SWLOCK146 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR146 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR146 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR146 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK146_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR146 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK146_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 147 */
    using BSEC_SWLOCK4_SWLOCK147 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR147 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR147 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR147 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK147_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR147 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK147_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 148 */
    using BSEC_SWLOCK4_SWLOCK148 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR148 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR148 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR148 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK148_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR148 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK148_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 149 */
    using BSEC_SWLOCK4_SWLOCK149 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR149 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR149 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR149 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK149_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR149 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK149_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 150 */
    using BSEC_SWLOCK4_SWLOCK150 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR150 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR150 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR150 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK150_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR150 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK150_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 151 */
    using BSEC_SWLOCK4_SWLOCK151 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR151 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR151 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR151 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK151_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR151 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK151_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 152 */
    using BSEC_SWLOCK4_SWLOCK152 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR152 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR152 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR152 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK152_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR152 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK152_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 153 */
    using BSEC_SWLOCK4_SWLOCK153 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR153 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR153 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR153 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK153_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR153 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK153_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 154 */
    using BSEC_SWLOCK4_SWLOCK154 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR154 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR154 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR154 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK154_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR154 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK154_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 155 */
    using BSEC_SWLOCK4_SWLOCK155 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR155 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR155 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR155 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK155_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR155 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK155_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 156 */
    using BSEC_SWLOCK4_SWLOCK156 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR156 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR156 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR156 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK156_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR156 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK156_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 157 */
    using BSEC_SWLOCK4_SWLOCK157 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR157 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR157 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR157 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK157_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR157 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK157_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 158 */
    using BSEC_SWLOCK4_SWLOCK158 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR158 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR158 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR158 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK158_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR158 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK158_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 159 */
    using BSEC_SWLOCK4_SWLOCK159 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR159 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR159 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR159 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK159_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR159 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK4_SWLOCK159_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 5 */
    using BSEC_SWLOCK5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x854, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 160 */
    using BSEC_SWLOCK5_SWLOCK160 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR160 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR160 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR160 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK160_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR160 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK160_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 161 */
    using BSEC_SWLOCK5_SWLOCK161 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR161 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR161 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR161 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK161_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR161 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK161_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 162 */
    using BSEC_SWLOCK5_SWLOCK162 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR162 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR162 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR162 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK162_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR162 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK162_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 163 */
    using BSEC_SWLOCK5_SWLOCK163 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR163 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR163 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR163 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK163_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR163 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK163_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 164 */
    using BSEC_SWLOCK5_SWLOCK164 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR164 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR164 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR164 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK164_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR164 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK164_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 165 */
    using BSEC_SWLOCK5_SWLOCK165 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR165 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR165 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR165 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK165_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR165 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK165_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 166 */
    using BSEC_SWLOCK5_SWLOCK166 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR166 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR166 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR166 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK166_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR166 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK166_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 167 */
    using BSEC_SWLOCK5_SWLOCK167 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR167 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR167 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR167 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK167_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR167 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK167_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 168 */
    using BSEC_SWLOCK5_SWLOCK168 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR168 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR168 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR168 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK168_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR168 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK168_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 169 */
    using BSEC_SWLOCK5_SWLOCK169 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR169 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR169 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR169 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK169_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR169 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK169_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 170 */
    using BSEC_SWLOCK5_SWLOCK170 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR170 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR170 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR170 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK170_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR170 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK170_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 171 */
    using BSEC_SWLOCK5_SWLOCK171 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR171 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR171 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR171 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK171_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR171 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK171_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 172 */
    using BSEC_SWLOCK5_SWLOCK172 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR172 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR172 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR172 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK172_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR172 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK172_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 173 */
    using BSEC_SWLOCK5_SWLOCK173 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR173 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR173 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR173 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK173_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR173 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK173_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 174 */
    using BSEC_SWLOCK5_SWLOCK174 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR174 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR174 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR174 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK174_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR174 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK174_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 175 */
    using BSEC_SWLOCK5_SWLOCK175 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR175 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR175 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR175 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK175_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR175 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK175_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 176 */
    using BSEC_SWLOCK5_SWLOCK176 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR176 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR176 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR176 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK176_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR176 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK176_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 177 */
    using BSEC_SWLOCK5_SWLOCK177 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR177 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR177 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR177 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK177_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR177 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK177_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 178 */
    using BSEC_SWLOCK5_SWLOCK178 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR178 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR178 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR178 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK178_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR178 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK178_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 179 */
    using BSEC_SWLOCK5_SWLOCK179 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR179 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR179 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR179 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK179_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR179 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK179_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 180 */
    using BSEC_SWLOCK5_SWLOCK180 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR180 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR180 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR180 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK180_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR180 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK180_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 181 */
    using BSEC_SWLOCK5_SWLOCK181 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR181 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR181 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR181 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK181_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR181 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK181_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 182 */
    using BSEC_SWLOCK5_SWLOCK182 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR182 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR182 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR182 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK182_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR182 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK182_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 183 */
    using BSEC_SWLOCK5_SWLOCK183 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR183 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR183 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR183 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK183_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR183 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK183_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 184 */
    using BSEC_SWLOCK5_SWLOCK184 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR184 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR184 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR184 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK184_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR184 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK184_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 185 */
    using BSEC_SWLOCK5_SWLOCK185 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR185 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR185 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR185 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK185_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR185 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK185_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 186 */
    using BSEC_SWLOCK5_SWLOCK186 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR186 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR186 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR186 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK186_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR186 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK186_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 187 */
    using BSEC_SWLOCK5_SWLOCK187 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR187 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR187 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR187 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK187_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR187 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK187_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 188 */
    using BSEC_SWLOCK5_SWLOCK188 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR188 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR188 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR188 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK188_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR188 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK188_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 189 */
    using BSEC_SWLOCK5_SWLOCK189 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR189 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR189 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR189 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK189_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR189 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK189_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 190 */
    using BSEC_SWLOCK5_SWLOCK190 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR190 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR190 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR190 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK190_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR190 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK190_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 191 */
    using BSEC_SWLOCK5_SWLOCK191 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR191 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR191 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR191 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK191_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR191 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK5_SWLOCK191_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 6 */
    using BSEC_SWLOCK6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x858, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 192 */
    using BSEC_SWLOCK6_SWLOCK192 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR192 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR192 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR192 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK192_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR192 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK192_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 193 */
    using BSEC_SWLOCK6_SWLOCK193 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR193 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR193 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR193 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK193_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR193 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK193_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 194 */
    using BSEC_SWLOCK6_SWLOCK194 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR194 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR194 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR194 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK194_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR194 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK194_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 195 */
    using BSEC_SWLOCK6_SWLOCK195 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR195 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR195 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR195 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK195_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR195 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK195_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 196 */
    using BSEC_SWLOCK6_SWLOCK196 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR196 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR196 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR196 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK196_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR196 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK196_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 197 */
    using BSEC_SWLOCK6_SWLOCK197 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR197 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR197 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR197 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK197_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR197 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK197_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 198 */
    using BSEC_SWLOCK6_SWLOCK198 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR198 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR198 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR198 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK198_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR198 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK198_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 199 */
    using BSEC_SWLOCK6_SWLOCK199 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR199 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR199 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR199 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK199_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR199 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK199_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 200 */
    using BSEC_SWLOCK6_SWLOCK200 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR200 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR200 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR200 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK200_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR200 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK200_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 201 */
    using BSEC_SWLOCK6_SWLOCK201 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR201 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR201 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR201 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK201_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR201 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK201_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 202 */
    using BSEC_SWLOCK6_SWLOCK202 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR202 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR202 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR202 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK202_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR202 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK202_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 203 */
    using BSEC_SWLOCK6_SWLOCK203 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR203 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR203 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR203 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK203_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR203 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK203_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 204 */
    using BSEC_SWLOCK6_SWLOCK204 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR204 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR204 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR204 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK204_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR204 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK204_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 205 */
    using BSEC_SWLOCK6_SWLOCK205 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR205 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR205 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR205 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK205_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR205 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK205_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 206 */
    using BSEC_SWLOCK6_SWLOCK206 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR206 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR206 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR206 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK206_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR206 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK206_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 207 */
    using BSEC_SWLOCK6_SWLOCK207 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR207 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR207 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR207 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK207_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR207 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK207_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 208 */
    using BSEC_SWLOCK6_SWLOCK208 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR208 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR208 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR208 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK208_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR208 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK208_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 209 */
    using BSEC_SWLOCK6_SWLOCK209 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR209 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR209 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR209 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK209_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR209 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK209_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 210 */
    using BSEC_SWLOCK6_SWLOCK210 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR210 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR210 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR210 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK210_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR210 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK210_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 211 */
    using BSEC_SWLOCK6_SWLOCK211 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR211 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR211 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR211 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK211_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR211 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK211_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 212 */
    using BSEC_SWLOCK6_SWLOCK212 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR212 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR212 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR212 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK212_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR212 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK212_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 213 */
    using BSEC_SWLOCK6_SWLOCK213 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR213 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR213 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR213 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK213_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR213 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK213_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 214 */
    using BSEC_SWLOCK6_SWLOCK214 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR214 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR214 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR214 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK214_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR214 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK214_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 215 */
    using BSEC_SWLOCK6_SWLOCK215 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR215 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR215 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR215 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK215_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR215 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK215_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 216 */
    using BSEC_SWLOCK6_SWLOCK216 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR216 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR216 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR216 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK216_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR216 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK216_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 217 */
    using BSEC_SWLOCK6_SWLOCK217 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR217 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR217 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR217 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK217_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR217 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK217_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 218 */
    using BSEC_SWLOCK6_SWLOCK218 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR218 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR218 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR218 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK218_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR218 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK218_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 219 */
    using BSEC_SWLOCK6_SWLOCK219 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR219 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR219 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR219 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK219_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR219 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK219_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 220 */
    using BSEC_SWLOCK6_SWLOCK220 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR220 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR220 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR220 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK220_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR220 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK220_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 221 */
    using BSEC_SWLOCK6_SWLOCK221 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR221 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR221 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR221 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK221_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR221 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK221_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 222 */
    using BSEC_SWLOCK6_SWLOCK222 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR222 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR222 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR222 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK222_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR222 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK222_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 223 */
    using BSEC_SWLOCK6_SWLOCK223 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR223 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR223 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR223 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK223_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR223 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK6_SWLOCK223_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 7 */
    using BSEC_SWLOCK7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x85C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 224 */
    using BSEC_SWLOCK7_SWLOCK224 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR224 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR224 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR224 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK224_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR224 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK224_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 225 */
    using BSEC_SWLOCK7_SWLOCK225 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR225 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR225 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR225 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK225_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR225 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK225_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 226 */
    using BSEC_SWLOCK7_SWLOCK226 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR226 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR226 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR226 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK226_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR226 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK226_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 227 */
    using BSEC_SWLOCK7_SWLOCK227 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR227 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR227 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR227 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK227_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR227 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK227_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 228 */
    using BSEC_SWLOCK7_SWLOCK228 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR228 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR228 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR228 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK228_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR228 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK228_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 229 */
    using BSEC_SWLOCK7_SWLOCK229 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR229 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR229 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR229 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK229_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR229 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK229_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 230 */
    using BSEC_SWLOCK7_SWLOCK230 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR230 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR230 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR230 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK230_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR230 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK230_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 231 */
    using BSEC_SWLOCK7_SWLOCK231 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR231 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR231 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR231 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK231_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR231 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK231_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 232 */
    using BSEC_SWLOCK7_SWLOCK232 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR232 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR232 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR232 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK232_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR232 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK232_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 233 */
    using BSEC_SWLOCK7_SWLOCK233 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR233 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR233 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR233 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK233_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR233 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK233_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 234 */
    using BSEC_SWLOCK7_SWLOCK234 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR234 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR234 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR234 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK234_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR234 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK234_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 235 */
    using BSEC_SWLOCK7_SWLOCK235 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR235 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR235 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR235 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK235_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR235 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK235_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 236 */
    using BSEC_SWLOCK7_SWLOCK236 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR236 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR236 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR236 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK236_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR236 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK236_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 237 */
    using BSEC_SWLOCK7_SWLOCK237 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR237 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR237 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR237 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK237_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR237 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK237_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 238 */
    using BSEC_SWLOCK7_SWLOCK238 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR238 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR238 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR238 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK238_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR238 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK238_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 239 */
    using BSEC_SWLOCK7_SWLOCK239 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR239 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR239 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR239 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK239_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR239 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK239_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 240 */
    using BSEC_SWLOCK7_SWLOCK240 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR240 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR240 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR240 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK240_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR240 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK240_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 241 */
    using BSEC_SWLOCK7_SWLOCK241 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR241 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR241 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR241 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK241_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR241 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK241_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 242 */
    using BSEC_SWLOCK7_SWLOCK242 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR242 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR242 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR242 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK242_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR242 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK242_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 243 */
    using BSEC_SWLOCK7_SWLOCK243 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR243 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR243 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR243 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK243_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR243 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK243_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 244 */
    using BSEC_SWLOCK7_SWLOCK244 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR244 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR244 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR244 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK244_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR244 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK244_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 245 */
    using BSEC_SWLOCK7_SWLOCK245 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR245 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR245 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR245 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK245_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR245 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK245_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 246 */
    using BSEC_SWLOCK7_SWLOCK246 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR246 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR246 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR246 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK246_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR246 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK246_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 247 */
    using BSEC_SWLOCK7_SWLOCK247 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR247 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR247 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR247 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK247_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR247 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK247_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 248 */
    using BSEC_SWLOCK7_SWLOCK248 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR248 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR248 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR248 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK248_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR248 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK248_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 249 */
    using BSEC_SWLOCK7_SWLOCK249 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR249 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR249 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR249 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK249_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR249 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK249_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 250 */
    using BSEC_SWLOCK7_SWLOCK250 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR250 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR250 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR250 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK250_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR250 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK250_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 251 */
    using BSEC_SWLOCK7_SWLOCK251 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR251 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR251 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR251 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK251_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR251 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK251_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 252 */
    using BSEC_SWLOCK7_SWLOCK252 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR252 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR252 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR252 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK252_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR252 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK252_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 253 */
    using BSEC_SWLOCK7_SWLOCK253 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR253 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR253 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR253 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK253_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR253 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK253_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 254 */
    using BSEC_SWLOCK7_SWLOCK254 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR254 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR254 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR254 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK254_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR254 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK254_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 255 */
    using BSEC_SWLOCK7_SWLOCK255 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR255 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR255 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR255 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK255_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR255 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK7_SWLOCK255_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 8 */
    using BSEC_SWLOCK8 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x860, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 256 */
    using BSEC_SWLOCK8_SWLOCK256 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR256 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR256 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR256 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK256_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR256 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK256_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 257 */
    using BSEC_SWLOCK8_SWLOCK257 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR257 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR257 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR257 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK257_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR257 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK257_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 258 */
    using BSEC_SWLOCK8_SWLOCK258 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR258 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR258 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR258 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK258_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR258 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK258_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 259 */
    using BSEC_SWLOCK8_SWLOCK259 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR259 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR259 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR259 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK259_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR259 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK259_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 260 */
    using BSEC_SWLOCK8_SWLOCK260 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR260 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR260 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR260 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK260_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR260 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK260_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 261 */
    using BSEC_SWLOCK8_SWLOCK261 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR261 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR261 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR261 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK261_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR261 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK261_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 262 */
    using BSEC_SWLOCK8_SWLOCK262 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR262 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR262 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR262 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK262_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR262 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK262_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 263 */
    using BSEC_SWLOCK8_SWLOCK263 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR263 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR263 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR263 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK263_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR263 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK263_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 264 */
    using BSEC_SWLOCK8_SWLOCK264 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR264 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR264 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR264 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK264_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR264 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK264_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 265 */
    using BSEC_SWLOCK8_SWLOCK265 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR265 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR265 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR265 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK265_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR265 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK265_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 266 */
    using BSEC_SWLOCK8_SWLOCK266 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR266 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR266 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR266 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK266_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR266 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK266_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 267 */
    using BSEC_SWLOCK8_SWLOCK267 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR267 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR267 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR267 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK267_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR267 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK267_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 268 */
    using BSEC_SWLOCK8_SWLOCK268 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR268 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR268 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR268 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK268_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR268 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK268_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 269 */
    using BSEC_SWLOCK8_SWLOCK269 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR269 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR269 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR269 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK269_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR269 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK269_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 270 */
    using BSEC_SWLOCK8_SWLOCK270 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR270 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR270 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR270 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK270_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR270 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK270_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 271 */
    using BSEC_SWLOCK8_SWLOCK271 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR271 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR271 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR271 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK271_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR271 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK271_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 272 */
    using BSEC_SWLOCK8_SWLOCK272 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR272 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR272 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR272 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK272_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR272 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK272_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 273 */
    using BSEC_SWLOCK8_SWLOCK273 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR273 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR273 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR273 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK273_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR273 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK273_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 274 */
    using BSEC_SWLOCK8_SWLOCK274 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR274 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR274 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR274 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK274_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR274 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK274_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 275 */
    using BSEC_SWLOCK8_SWLOCK275 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR275 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR275 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR275 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK275_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR275 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK275_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 276 */
    using BSEC_SWLOCK8_SWLOCK276 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR276 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR276 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR276 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK276_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR276 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK276_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 277 */
    using BSEC_SWLOCK8_SWLOCK277 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR277 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR277 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR277 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK277_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR277 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK277_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 278 */
    using BSEC_SWLOCK8_SWLOCK278 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR278 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR278 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR278 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK278_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR278 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK278_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 279 */
    using BSEC_SWLOCK8_SWLOCK279 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR279 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR279 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR279 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK279_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR279 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK279_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 280 */
    using BSEC_SWLOCK8_SWLOCK280 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR280 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR280 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR280 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK280_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR280 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK280_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 281 */
    using BSEC_SWLOCK8_SWLOCK281 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR281 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR281 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR281 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK281_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR281 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK281_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 282 */
    using BSEC_SWLOCK8_SWLOCK282 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR282 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR282 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR282 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK282_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR282 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK282_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 283 */
    using BSEC_SWLOCK8_SWLOCK283 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR283 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR283 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR283 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK283_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR283 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK283_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 284 */
    using BSEC_SWLOCK8_SWLOCK284 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR284 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR284 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR284 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK284_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR284 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK284_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 285 */
    using BSEC_SWLOCK8_SWLOCK285 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR285 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR285 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR285 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK285_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR285 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK285_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 286 */
    using BSEC_SWLOCK8_SWLOCK286 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR286 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR286 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR286 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK286_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR286 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK286_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 287 */
    using BSEC_SWLOCK8_SWLOCK287 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR287 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR287 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR287 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK287_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR287 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK8_SWLOCK287_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 9 */
    using BSEC_SWLOCK9 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x864, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 288 */
    using BSEC_SWLOCK9_SWLOCK288 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR288 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR288 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR288 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK288_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR288 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK288_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 289 */
    using BSEC_SWLOCK9_SWLOCK289 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR289 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR289 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR289 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK289_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR289 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK289_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 290 */
    using BSEC_SWLOCK9_SWLOCK290 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR290 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR290 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR290 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK290_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR290 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK290_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 291 */
    using BSEC_SWLOCK9_SWLOCK291 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR291 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR291 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR291 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK291_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR291 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK291_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 292 */
    using BSEC_SWLOCK9_SWLOCK292 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR292 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR292 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR292 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK292_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR292 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK292_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 293 */
    using BSEC_SWLOCK9_SWLOCK293 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR293 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR293 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR293 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK293_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR293 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK293_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 294 */
    using BSEC_SWLOCK9_SWLOCK294 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR294 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR294 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR294 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK294_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR294 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK294_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 295 */
    using BSEC_SWLOCK9_SWLOCK295 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR295 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR295 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR295 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK295_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR295 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK295_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 296 */
    using BSEC_SWLOCK9_SWLOCK296 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR296 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR296 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR296 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK296_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR296 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK296_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 297 */
    using BSEC_SWLOCK9_SWLOCK297 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR297 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR297 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR297 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK297_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR297 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK297_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 298 */
    using BSEC_SWLOCK9_SWLOCK298 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR298 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR298 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR298 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK298_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR298 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK298_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 299 */
    using BSEC_SWLOCK9_SWLOCK299 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR299 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR299 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR299 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK299_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR299 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK299_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 300 */
    using BSEC_SWLOCK9_SWLOCK300 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR300 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR300 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR300 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK300_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR300 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK300_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 301 */
    using BSEC_SWLOCK9_SWLOCK301 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR301 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR301 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR301 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK301_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR301 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK301_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 302 */
    using BSEC_SWLOCK9_SWLOCK302 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR302 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR302 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR302 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK302_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR302 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK302_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 303 */
    using BSEC_SWLOCK9_SWLOCK303 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR303 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR303 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR303 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK303_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR303 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK303_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 304 */
    using BSEC_SWLOCK9_SWLOCK304 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR304 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR304 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR304 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK304_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR304 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK304_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 305 */
    using BSEC_SWLOCK9_SWLOCK305 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR305 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR305 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR305 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK305_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR305 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK305_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 306 */
    using BSEC_SWLOCK9_SWLOCK306 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR306 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR306 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR306 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK306_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR306 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK306_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 307 */
    using BSEC_SWLOCK9_SWLOCK307 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR307 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR307 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR307 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK307_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR307 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK307_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 308 */
    using BSEC_SWLOCK9_SWLOCK308 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR308 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR308 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR308 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK308_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR308 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK308_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 309 */
    using BSEC_SWLOCK9_SWLOCK309 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR309 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR309 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR309 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK309_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR309 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK309_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 310 */
    using BSEC_SWLOCK9_SWLOCK310 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR310 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR310 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR310 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK310_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR310 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK310_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 311 */
    using BSEC_SWLOCK9_SWLOCK311 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR311 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR311 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR311 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK311_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR311 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK311_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 312 */
    using BSEC_SWLOCK9_SWLOCK312 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR312 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR312 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR312 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK312_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR312 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK312_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 313 */
    using BSEC_SWLOCK9_SWLOCK313 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR313 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR313 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR313 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK313_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR313 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK313_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 314 */
    using BSEC_SWLOCK9_SWLOCK314 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR314 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR314 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR314 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK314_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR314 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK314_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 315 */
    using BSEC_SWLOCK9_SWLOCK315 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR315 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR315 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR315 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK315_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR315 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK315_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 316 */
    using BSEC_SWLOCK9_SWLOCK316 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR316 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR316 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR316 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK316_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR316 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK316_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 317 */
    using BSEC_SWLOCK9_SWLOCK317 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR317 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR317 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR317 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK317_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR317 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK317_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 318 */
    using BSEC_SWLOCK9_SWLOCK318 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR318 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR318 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR318 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK318_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR318 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK318_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 319 */
    using BSEC_SWLOCK9_SWLOCK319 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR319 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR319 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR319 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK319_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR319 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK9_SWLOCK319_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 10 */
    using BSEC_SWLOCK10 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x868, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 320 */
    using BSEC_SWLOCK10_SWLOCK320 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR320 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR320 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR320 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK320_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR320 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK320_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 321 */
    using BSEC_SWLOCK10_SWLOCK321 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR321 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR321 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR321 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK321_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR321 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK321_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 322 */
    using BSEC_SWLOCK10_SWLOCK322 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR322 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR322 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR322 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK322_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR322 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK322_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 323 */
    using BSEC_SWLOCK10_SWLOCK323 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR323 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR323 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR323 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK323_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR323 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK323_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 324 */
    using BSEC_SWLOCK10_SWLOCK324 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR324 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR324 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR324 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK324_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR324 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK324_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 325 */
    using BSEC_SWLOCK10_SWLOCK325 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR325 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR325 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR325 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK325_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR325 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK325_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 326 */
    using BSEC_SWLOCK10_SWLOCK326 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR326 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR326 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR326 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK326_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR326 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK326_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 327 */
    using BSEC_SWLOCK10_SWLOCK327 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR327 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR327 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR327 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK327_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR327 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK327_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 328 */
    using BSEC_SWLOCK10_SWLOCK328 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR328 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR328 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR328 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK328_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR328 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK328_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 329 */
    using BSEC_SWLOCK10_SWLOCK329 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR329 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR329 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR329 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK329_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR329 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK329_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 330 */
    using BSEC_SWLOCK10_SWLOCK330 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR330 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR330 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR330 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK330_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR330 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK330_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 331 */
    using BSEC_SWLOCK10_SWLOCK331 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR331 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR331 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR331 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK331_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR331 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK331_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 332 */
    using BSEC_SWLOCK10_SWLOCK332 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR332 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR332 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR332 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK332_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR332 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK332_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 333 */
    using BSEC_SWLOCK10_SWLOCK333 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR333 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR333 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR333 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK333_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR333 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK333_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 334 */
    using BSEC_SWLOCK10_SWLOCK334 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR334 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR334 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR334 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK334_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR334 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK334_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 335 */
    using BSEC_SWLOCK10_SWLOCK335 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR335 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR335 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR335 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK335_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR335 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK335_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 336 */
    using BSEC_SWLOCK10_SWLOCK336 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR336 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR336 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR336 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK336_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR336 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK336_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 337 */
    using BSEC_SWLOCK10_SWLOCK337 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR337 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR337 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR337 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK337_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR337 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK337_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 338 */
    using BSEC_SWLOCK10_SWLOCK338 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR338 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR338 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR338 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK338_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR338 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK338_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 339 */
    using BSEC_SWLOCK10_SWLOCK339 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR339 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR339 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR339 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK339_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR339 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK339_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 340 */
    using BSEC_SWLOCK10_SWLOCK340 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR340 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR340 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR340 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK340_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR340 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK340_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 341 */
    using BSEC_SWLOCK10_SWLOCK341 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR341 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR341 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR341 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK341_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR341 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK341_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 342 */
    using BSEC_SWLOCK10_SWLOCK342 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR342 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR342 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR342 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK342_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR342 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK342_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 343 */
    using BSEC_SWLOCK10_SWLOCK343 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR343 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR343 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR343 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK343_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR343 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK343_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 344 */
    using BSEC_SWLOCK10_SWLOCK344 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR344 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR344 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR344 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK344_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR344 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK344_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 345 */
    using BSEC_SWLOCK10_SWLOCK345 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR345 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR345 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR345 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK345_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR345 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK345_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 346 */
    using BSEC_SWLOCK10_SWLOCK346 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR346 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR346 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR346 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK346_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR346 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK346_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 347 */
    using BSEC_SWLOCK10_SWLOCK347 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR347 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR347 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR347 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK347_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR347 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK347_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 348 */
    using BSEC_SWLOCK10_SWLOCK348 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR348 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR348 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR348 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK348_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR348 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK348_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 349 */
    using BSEC_SWLOCK10_SWLOCK349 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR349 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR349 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR349 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK349_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR349 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK349_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 350 */
    using BSEC_SWLOCK10_SWLOCK350 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR350 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR350 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR350 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK350_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR350 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK350_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 351 */
    using BSEC_SWLOCK10_SWLOCK351 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR351 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR351 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR351 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK351_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR351 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK10_SWLOCK351_B_0x1 = 1;

    /** @brief BSEC sticky write lock register 11 */
    using BSEC_SWLOCK11 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x86C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky write lock for shadow register 352 */
    using BSEC_SWLOCK11_SWLOCK352 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR352 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR352 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR352 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK352_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR352 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK352_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 353 */
    using BSEC_SWLOCK11_SWLOCK353 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR353 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR353 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR353 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK353_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR353 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK353_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 354 */
    using BSEC_SWLOCK11_SWLOCK354 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR354 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR354 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR354 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK354_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR354 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK354_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 355 */
    using BSEC_SWLOCK11_SWLOCK355 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR355 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR355 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR355 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK355_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR355 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK355_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 356 */
    using BSEC_SWLOCK11_SWLOCK356 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR356 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR356 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR356 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK356_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR356 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK356_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 357 */
    using BSEC_SWLOCK11_SWLOCK357 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR357 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR357 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR357 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK357_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR357 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK357_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 358 */
    using BSEC_SWLOCK11_SWLOCK358 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR358 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR358 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR358 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK358_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR358 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK358_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 359 */
    using BSEC_SWLOCK11_SWLOCK359 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR359 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR359 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR359 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK359_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR359 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK359_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 360 */
    using BSEC_SWLOCK11_SWLOCK360 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR360 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR360 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR360 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK360_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR360 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK360_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 361 */
    using BSEC_SWLOCK11_SWLOCK361 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR361 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR361 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR361 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK361_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR361 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK361_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 362 */
    using BSEC_SWLOCK11_SWLOCK362 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR362 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR362 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR362 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK362_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR362 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK362_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 363 */
    using BSEC_SWLOCK11_SWLOCK363 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR363 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR363 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR363 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK363_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR363 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK363_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 364 */
    using BSEC_SWLOCK11_SWLOCK364 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR364 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR364 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR364 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK364_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR364 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK364_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 365 */
    using BSEC_SWLOCK11_SWLOCK365 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR365 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR365 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR365 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK365_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR365 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK365_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 366 */
    using BSEC_SWLOCK11_SWLOCK366 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR366 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR366 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR366 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK366_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR366 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK366_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 367 */
    using BSEC_SWLOCK11_SWLOCK367 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR367 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR367 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR367 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK367_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR367 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK367_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 368 */
    using BSEC_SWLOCK11_SWLOCK368 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR368 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR368 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR368 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK368_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR368 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK368_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 369 */
    using BSEC_SWLOCK11_SWLOCK369 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR369 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR369 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR369 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK369_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR369 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK369_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 370 */
    using BSEC_SWLOCK11_SWLOCK370 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR370 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR370 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR370 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK370_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR370 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK370_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 371 */
    using BSEC_SWLOCK11_SWLOCK371 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR371 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR371 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR371 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK371_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR371 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK371_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 372 */
    using BSEC_SWLOCK11_SWLOCK372 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR372 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR372 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR372 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK372_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR372 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK372_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 373 */
    using BSEC_SWLOCK11_SWLOCK373 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR373 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR373 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR373 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK373_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR373 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK373_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 374 */
    using BSEC_SWLOCK11_SWLOCK374 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR374 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR374 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR374 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK374_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR374 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK374_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 375 */
    using BSEC_SWLOCK11_SWLOCK375 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR375 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR375 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR375 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK375_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR375 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK375_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 376 */
    using BSEC_SWLOCK11_SWLOCK376 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR376 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR376 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR376 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK376_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR376 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK376_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 377 */
    using BSEC_SWLOCK11_SWLOCK377 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR377 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR377 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR377 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK377_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR377 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK377_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 378 */
    using BSEC_SWLOCK11_SWLOCK378 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR378 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR378 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR378 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK378_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR378 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK378_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 379 */
    using BSEC_SWLOCK11_SWLOCK379 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR379 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR379 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR379 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK379_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR379 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK379_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 380 */
    using BSEC_SWLOCK11_SWLOCK380 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR380 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR380 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR380 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK380_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR380 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK380_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 381 */
    using BSEC_SWLOCK11_SWLOCK381 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR381 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR381 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR381 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK381_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR381 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK381_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 382 */
    using BSEC_SWLOCK11_SWLOCK382 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR382 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR382 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR382 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK382_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR382 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK382_B_0x1 = 1;

    /** @brief sticky write lock for shadow register 383 */
    using BSEC_SWLOCK11_SWLOCK383 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Write to shadow register BSEC_FVR383 is allowed (value: 0)
     *          - B_0x1: Writes to shadow register BSEC_FVR383 are silently ignored (value: 1)
     */
        /** @brief Write to shadow register BSEC_FVR383 is allowed */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK383_B_0x0 = 0;
        /** @brief Writes to shadow register BSEC_FVR383 are silently ignored */
    constexpr std::uint32_t BSEC_SWLOCK11_SWLOCK383_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 0 */
    using BSEC_SRLOCK0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x880, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 0 */
    using BSEC_SRLOCK0_SRLOCK0 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 0 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 0 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 0 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK0_B_0x0 = 0;
        /** @brief Fuse word 0 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK0_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 1 */
    using BSEC_SRLOCK0_SRLOCK1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 1 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 1 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 1 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK1_B_0x0 = 0;
        /** @brief Fuse word 1 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK1_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 2 */
    using BSEC_SRLOCK0_SRLOCK2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 2 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 2 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 2 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK2_B_0x0 = 0;
        /** @brief Fuse word 2 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK2_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 3 */
    using BSEC_SRLOCK0_SRLOCK3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 3 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 3 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 3 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK3_B_0x0 = 0;
        /** @brief Fuse word 3 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK3_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 4 */
    using BSEC_SRLOCK0_SRLOCK4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 4 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 4 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 4 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK4_B_0x0 = 0;
        /** @brief Fuse word 4 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK4_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 5 */
    using BSEC_SRLOCK0_SRLOCK5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 5 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 5 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 5 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK5_B_0x0 = 0;
        /** @brief Fuse word 5 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK5_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 6 */
    using BSEC_SRLOCK0_SRLOCK6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 6 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 6 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 6 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK6_B_0x0 = 0;
        /** @brief Fuse word 6 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK6_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 7 */
    using BSEC_SRLOCK0_SRLOCK7 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 7 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 7 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 7 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK7_B_0x0 = 0;
        /** @brief Fuse word 7 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK7_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 8 */
    using BSEC_SRLOCK0_SRLOCK8 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 8 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 8 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 8 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK8_B_0x0 = 0;
        /** @brief Fuse word 8 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK8_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 9 */
    using BSEC_SRLOCK0_SRLOCK9 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 9 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 9 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 9 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK9_B_0x0 = 0;
        /** @brief Fuse word 9 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK9_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 10 */
    using BSEC_SRLOCK0_SRLOCK10 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 10 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 10 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 10 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK10_B_0x0 = 0;
        /** @brief Fuse word 10 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK10_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 11 */
    using BSEC_SRLOCK0_SRLOCK11 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 11 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 11 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 11 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK11_B_0x0 = 0;
        /** @brief Fuse word 11 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK11_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 12 */
    using BSEC_SRLOCK0_SRLOCK12 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 12 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 12 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 12 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK12_B_0x0 = 0;
        /** @brief Fuse word 12 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK12_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 13 */
    using BSEC_SRLOCK0_SRLOCK13 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 13 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 13 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 13 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK13_B_0x0 = 0;
        /** @brief Fuse word 13 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK13_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 14 */
    using BSEC_SRLOCK0_SRLOCK14 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 14 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 14 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 14 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK14_B_0x0 = 0;
        /** @brief Fuse word 14 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK14_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 15 */
    using BSEC_SRLOCK0_SRLOCK15 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 15 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 15 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 15 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK15_B_0x0 = 0;
        /** @brief Fuse word 15 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK15_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 16 */
    using BSEC_SRLOCK0_SRLOCK16 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 16 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 16 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 16 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK16_B_0x0 = 0;
        /** @brief Fuse word 16 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK16_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 17 */
    using BSEC_SRLOCK0_SRLOCK17 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 17 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 17 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 17 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK17_B_0x0 = 0;
        /** @brief Fuse word 17 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK17_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 18 */
    using BSEC_SRLOCK0_SRLOCK18 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 18 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 18 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 18 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK18_B_0x0 = 0;
        /** @brief Fuse word 18 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK18_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 19 */
    using BSEC_SRLOCK0_SRLOCK19 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 19 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 19 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 19 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK19_B_0x0 = 0;
        /** @brief Fuse word 19 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK19_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 20 */
    using BSEC_SRLOCK0_SRLOCK20 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 20 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 20 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 20 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK20_B_0x0 = 0;
        /** @brief Fuse word 20 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK20_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 21 */
    using BSEC_SRLOCK0_SRLOCK21 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 21 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 21 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 21 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK21_B_0x0 = 0;
        /** @brief Fuse word 21 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK21_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 22 */
    using BSEC_SRLOCK0_SRLOCK22 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 22 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 22 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 22 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK22_B_0x0 = 0;
        /** @brief Fuse word 22 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK22_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 23 */
    using BSEC_SRLOCK0_SRLOCK23 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 23 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 23 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 23 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK23_B_0x0 = 0;
        /** @brief Fuse word 23 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK23_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 24 */
    using BSEC_SRLOCK0_SRLOCK24 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 24 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 24 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 24 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK24_B_0x0 = 0;
        /** @brief Fuse word 24 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK24_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 25 */
    using BSEC_SRLOCK0_SRLOCK25 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 25 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 25 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 25 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK25_B_0x0 = 0;
        /** @brief Fuse word 25 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK25_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 26 */
    using BSEC_SRLOCK0_SRLOCK26 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 26 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 26 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 26 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK26_B_0x0 = 0;
        /** @brief Fuse word 26 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK26_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 27 */
    using BSEC_SRLOCK0_SRLOCK27 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 27 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 27 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 27 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK27_B_0x0 = 0;
        /** @brief Fuse word 27 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK27_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 28 */
    using BSEC_SRLOCK0_SRLOCK28 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 28 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 28 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 28 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK28_B_0x0 = 0;
        /** @brief Fuse word 28 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK28_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 29 */
    using BSEC_SRLOCK0_SRLOCK29 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 29 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 29 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 29 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK29_B_0x0 = 0;
        /** @brief Fuse word 29 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK29_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 30 */
    using BSEC_SRLOCK0_SRLOCK30 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 30 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 30 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 30 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK30_B_0x0 = 0;
        /** @brief Fuse word 30 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK30_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 31 */
    using BSEC_SRLOCK0_SRLOCK31 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 31 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 31 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 31 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK31_B_0x0 = 0;
        /** @brief Fuse word 31 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK0_SRLOCK31_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 1 */
    using BSEC_SRLOCK1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x884, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 32 */
    using BSEC_SRLOCK1_SRLOCK32 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 32 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 32 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 32 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK32_B_0x0 = 0;
        /** @brief Fuse word 32 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK32_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 33 */
    using BSEC_SRLOCK1_SRLOCK33 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 33 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 33 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 33 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK33_B_0x0 = 0;
        /** @brief Fuse word 33 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK33_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 34 */
    using BSEC_SRLOCK1_SRLOCK34 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 34 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 34 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 34 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK34_B_0x0 = 0;
        /** @brief Fuse word 34 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK34_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 35 */
    using BSEC_SRLOCK1_SRLOCK35 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 35 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 35 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 35 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK35_B_0x0 = 0;
        /** @brief Fuse word 35 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK35_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 36 */
    using BSEC_SRLOCK1_SRLOCK36 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 36 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 36 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 36 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK36_B_0x0 = 0;
        /** @brief Fuse word 36 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK36_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 37 */
    using BSEC_SRLOCK1_SRLOCK37 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 37 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 37 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 37 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK37_B_0x0 = 0;
        /** @brief Fuse word 37 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK37_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 38 */
    using BSEC_SRLOCK1_SRLOCK38 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 38 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 38 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 38 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK38_B_0x0 = 0;
        /** @brief Fuse word 38 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK38_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 39 */
    using BSEC_SRLOCK1_SRLOCK39 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 39 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 39 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 39 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK39_B_0x0 = 0;
        /** @brief Fuse word 39 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK39_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 40 */
    using BSEC_SRLOCK1_SRLOCK40 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 40 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 40 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 40 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK40_B_0x0 = 0;
        /** @brief Fuse word 40 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK40_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 41 */
    using BSEC_SRLOCK1_SRLOCK41 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 41 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 41 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 41 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK41_B_0x0 = 0;
        /** @brief Fuse word 41 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK41_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 42 */
    using BSEC_SRLOCK1_SRLOCK42 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 42 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 42 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 42 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK42_B_0x0 = 0;
        /** @brief Fuse word 42 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK42_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 43 */
    using BSEC_SRLOCK1_SRLOCK43 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 43 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 43 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 43 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK43_B_0x0 = 0;
        /** @brief Fuse word 43 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK43_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 44 */
    using BSEC_SRLOCK1_SRLOCK44 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 44 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 44 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 44 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK44_B_0x0 = 0;
        /** @brief Fuse word 44 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK44_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 45 */
    using BSEC_SRLOCK1_SRLOCK45 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 45 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 45 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 45 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK45_B_0x0 = 0;
        /** @brief Fuse word 45 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK45_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 46 */
    using BSEC_SRLOCK1_SRLOCK46 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 46 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 46 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 46 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK46_B_0x0 = 0;
        /** @brief Fuse word 46 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK46_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 47 */
    using BSEC_SRLOCK1_SRLOCK47 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 47 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 47 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 47 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK47_B_0x0 = 0;
        /** @brief Fuse word 47 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK47_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 48 */
    using BSEC_SRLOCK1_SRLOCK48 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 48 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 48 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 48 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK48_B_0x0 = 0;
        /** @brief Fuse word 48 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK48_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 49 */
    using BSEC_SRLOCK1_SRLOCK49 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 49 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 49 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 49 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK49_B_0x0 = 0;
        /** @brief Fuse word 49 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK49_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 50 */
    using BSEC_SRLOCK1_SRLOCK50 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 50 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 50 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 50 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK50_B_0x0 = 0;
        /** @brief Fuse word 50 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK50_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 51 */
    using BSEC_SRLOCK1_SRLOCK51 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 51 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 51 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 51 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK51_B_0x0 = 0;
        /** @brief Fuse word 51 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK51_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 52 */
    using BSEC_SRLOCK1_SRLOCK52 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 52 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 52 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 52 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK52_B_0x0 = 0;
        /** @brief Fuse word 52 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK52_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 53 */
    using BSEC_SRLOCK1_SRLOCK53 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 53 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 53 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 53 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK53_B_0x0 = 0;
        /** @brief Fuse word 53 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK53_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 54 */
    using BSEC_SRLOCK1_SRLOCK54 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 54 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 54 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 54 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK54_B_0x0 = 0;
        /** @brief Fuse word 54 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK54_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 55 */
    using BSEC_SRLOCK1_SRLOCK55 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 55 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 55 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 55 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK55_B_0x0 = 0;
        /** @brief Fuse word 55 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK55_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 56 */
    using BSEC_SRLOCK1_SRLOCK56 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 56 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 56 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 56 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK56_B_0x0 = 0;
        /** @brief Fuse word 56 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK56_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 57 */
    using BSEC_SRLOCK1_SRLOCK57 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 57 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 57 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 57 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK57_B_0x0 = 0;
        /** @brief Fuse word 57 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK57_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 58 */
    using BSEC_SRLOCK1_SRLOCK58 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 58 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 58 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 58 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK58_B_0x0 = 0;
        /** @brief Fuse word 58 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK58_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 59 */
    using BSEC_SRLOCK1_SRLOCK59 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 59 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 59 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 59 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK59_B_0x0 = 0;
        /** @brief Fuse word 59 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK59_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 60 */
    using BSEC_SRLOCK1_SRLOCK60 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 60 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 60 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 60 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK60_B_0x0 = 0;
        /** @brief Fuse word 60 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK60_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 61 */
    using BSEC_SRLOCK1_SRLOCK61 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 61 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 61 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 61 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK61_B_0x0 = 0;
        /** @brief Fuse word 61 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK61_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 62 */
    using BSEC_SRLOCK1_SRLOCK62 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 62 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 62 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 62 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK62_B_0x0 = 0;
        /** @brief Fuse word 62 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK62_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 63 */
    using BSEC_SRLOCK1_SRLOCK63 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 63 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 63 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 63 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK63_B_0x0 = 0;
        /** @brief Fuse word 63 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK1_SRLOCK63_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 2 */
    using BSEC_SRLOCK2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x888, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 64 */
    using BSEC_SRLOCK2_SRLOCK64 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 64 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 64 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 64 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK64_B_0x0 = 0;
        /** @brief Fuse word 64 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK64_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 65 */
    using BSEC_SRLOCK2_SRLOCK65 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 65 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 65 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 65 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK65_B_0x0 = 0;
        /** @brief Fuse word 65 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK65_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 66 */
    using BSEC_SRLOCK2_SRLOCK66 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 66 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 66 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 66 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK66_B_0x0 = 0;
        /** @brief Fuse word 66 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK66_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 67 */
    using BSEC_SRLOCK2_SRLOCK67 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 67 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 67 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 67 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK67_B_0x0 = 0;
        /** @brief Fuse word 67 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK67_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 68 */
    using BSEC_SRLOCK2_SRLOCK68 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 68 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 68 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 68 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK68_B_0x0 = 0;
        /** @brief Fuse word 68 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK68_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 69 */
    using BSEC_SRLOCK2_SRLOCK69 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 69 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 69 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 69 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK69_B_0x0 = 0;
        /** @brief Fuse word 69 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK69_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 70 */
    using BSEC_SRLOCK2_SRLOCK70 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 70 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 70 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 70 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK70_B_0x0 = 0;
        /** @brief Fuse word 70 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK70_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 71 */
    using BSEC_SRLOCK2_SRLOCK71 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 71 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 71 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 71 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK71_B_0x0 = 0;
        /** @brief Fuse word 71 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK71_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 72 */
    using BSEC_SRLOCK2_SRLOCK72 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 72 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 72 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 72 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK72_B_0x0 = 0;
        /** @brief Fuse word 72 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK72_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 73 */
    using BSEC_SRLOCK2_SRLOCK73 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 73 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 73 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 73 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK73_B_0x0 = 0;
        /** @brief Fuse word 73 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK73_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 74 */
    using BSEC_SRLOCK2_SRLOCK74 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 74 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 74 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 74 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK74_B_0x0 = 0;
        /** @brief Fuse word 74 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK74_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 75 */
    using BSEC_SRLOCK2_SRLOCK75 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 75 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 75 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 75 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK75_B_0x0 = 0;
        /** @brief Fuse word 75 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK75_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 76 */
    using BSEC_SRLOCK2_SRLOCK76 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 76 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 76 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 76 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK76_B_0x0 = 0;
        /** @brief Fuse word 76 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK76_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 77 */
    using BSEC_SRLOCK2_SRLOCK77 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 77 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 77 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 77 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK77_B_0x0 = 0;
        /** @brief Fuse word 77 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK77_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 78 */
    using BSEC_SRLOCK2_SRLOCK78 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 78 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 78 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 78 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK78_B_0x0 = 0;
        /** @brief Fuse word 78 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK78_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 79 */
    using BSEC_SRLOCK2_SRLOCK79 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 79 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 79 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 79 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK79_B_0x0 = 0;
        /** @brief Fuse word 79 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK79_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 80 */
    using BSEC_SRLOCK2_SRLOCK80 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 80 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 80 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 80 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK80_B_0x0 = 0;
        /** @brief Fuse word 80 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK80_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 81 */
    using BSEC_SRLOCK2_SRLOCK81 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 81 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 81 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 81 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK81_B_0x0 = 0;
        /** @brief Fuse word 81 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK81_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 82 */
    using BSEC_SRLOCK2_SRLOCK82 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 82 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 82 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 82 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK82_B_0x0 = 0;
        /** @brief Fuse word 82 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK82_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 83 */
    using BSEC_SRLOCK2_SRLOCK83 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 83 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 83 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 83 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK83_B_0x0 = 0;
        /** @brief Fuse word 83 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK83_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 84 */
    using BSEC_SRLOCK2_SRLOCK84 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 84 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 84 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 84 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK84_B_0x0 = 0;
        /** @brief Fuse word 84 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK84_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 85 */
    using BSEC_SRLOCK2_SRLOCK85 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 85 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 85 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 85 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK85_B_0x0 = 0;
        /** @brief Fuse word 85 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK85_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 86 */
    using BSEC_SRLOCK2_SRLOCK86 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 86 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 86 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 86 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK86_B_0x0 = 0;
        /** @brief Fuse word 86 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK86_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 87 */
    using BSEC_SRLOCK2_SRLOCK87 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 87 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 87 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 87 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK87_B_0x0 = 0;
        /** @brief Fuse word 87 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK87_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 88 */
    using BSEC_SRLOCK2_SRLOCK88 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 88 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 88 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 88 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK88_B_0x0 = 0;
        /** @brief Fuse word 88 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK88_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 89 */
    using BSEC_SRLOCK2_SRLOCK89 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 89 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 89 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 89 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK89_B_0x0 = 0;
        /** @brief Fuse word 89 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK89_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 90 */
    using BSEC_SRLOCK2_SRLOCK90 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 90 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 90 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 90 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK90_B_0x0 = 0;
        /** @brief Fuse word 90 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK90_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 91 */
    using BSEC_SRLOCK2_SRLOCK91 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 91 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 91 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 91 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK91_B_0x0 = 0;
        /** @brief Fuse word 91 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK91_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 92 */
    using BSEC_SRLOCK2_SRLOCK92 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 92 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 92 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 92 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK92_B_0x0 = 0;
        /** @brief Fuse word 92 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK92_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 93 */
    using BSEC_SRLOCK2_SRLOCK93 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 93 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 93 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 93 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK93_B_0x0 = 0;
        /** @brief Fuse word 93 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK93_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 94 */
    using BSEC_SRLOCK2_SRLOCK94 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 94 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 94 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 94 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK94_B_0x0 = 0;
        /** @brief Fuse word 94 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK94_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 95 */
    using BSEC_SRLOCK2_SRLOCK95 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 95 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 95 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 95 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK95_B_0x0 = 0;
        /** @brief Fuse word 95 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK2_SRLOCK95_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 3 */
    using BSEC_SRLOCK3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x88C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 96 */
    using BSEC_SRLOCK3_SRLOCK96 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 96 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 96 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 96 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK96_B_0x0 = 0;
        /** @brief Fuse word 96 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK96_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 97 */
    using BSEC_SRLOCK3_SRLOCK97 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 97 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 97 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 97 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK97_B_0x0 = 0;
        /** @brief Fuse word 97 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK97_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 98 */
    using BSEC_SRLOCK3_SRLOCK98 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 98 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 98 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 98 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK98_B_0x0 = 0;
        /** @brief Fuse word 98 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK98_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 99 */
    using BSEC_SRLOCK3_SRLOCK99 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 99 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 99 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 99 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK99_B_0x0 = 0;
        /** @brief Fuse word 99 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK99_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 100 */
    using BSEC_SRLOCK3_SRLOCK100 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 100 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 100 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 100 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK100_B_0x0 = 0;
        /** @brief Fuse word 100 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK100_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 101 */
    using BSEC_SRLOCK3_SRLOCK101 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 101 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 101 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 101 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK101_B_0x0 = 0;
        /** @brief Fuse word 101 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK101_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 102 */
    using BSEC_SRLOCK3_SRLOCK102 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 102 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 102 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 102 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK102_B_0x0 = 0;
        /** @brief Fuse word 102 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK102_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 103 */
    using BSEC_SRLOCK3_SRLOCK103 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 103 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 103 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 103 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK103_B_0x0 = 0;
        /** @brief Fuse word 103 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK103_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 104 */
    using BSEC_SRLOCK3_SRLOCK104 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 104 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 104 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 104 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK104_B_0x0 = 0;
        /** @brief Fuse word 104 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK104_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 105 */
    using BSEC_SRLOCK3_SRLOCK105 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 105 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 105 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 105 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK105_B_0x0 = 0;
        /** @brief Fuse word 105 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK105_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 106 */
    using BSEC_SRLOCK3_SRLOCK106 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 106 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 106 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 106 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK106_B_0x0 = 0;
        /** @brief Fuse word 106 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK106_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 107 */
    using BSEC_SRLOCK3_SRLOCK107 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 107 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 107 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 107 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK107_B_0x0 = 0;
        /** @brief Fuse word 107 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK107_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 108 */
    using BSEC_SRLOCK3_SRLOCK108 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 108 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 108 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 108 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK108_B_0x0 = 0;
        /** @brief Fuse word 108 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK108_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 109 */
    using BSEC_SRLOCK3_SRLOCK109 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 109 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 109 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 109 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK109_B_0x0 = 0;
        /** @brief Fuse word 109 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK109_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 110 */
    using BSEC_SRLOCK3_SRLOCK110 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 110 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 110 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 110 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK110_B_0x0 = 0;
        /** @brief Fuse word 110 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK110_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 111 */
    using BSEC_SRLOCK3_SRLOCK111 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 111 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 111 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 111 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK111_B_0x0 = 0;
        /** @brief Fuse word 111 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK111_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 112 */
    using BSEC_SRLOCK3_SRLOCK112 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 112 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 112 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 112 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK112_B_0x0 = 0;
        /** @brief Fuse word 112 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK112_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 113 */
    using BSEC_SRLOCK3_SRLOCK113 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 113 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 113 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 113 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK113_B_0x0 = 0;
        /** @brief Fuse word 113 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK113_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 114 */
    using BSEC_SRLOCK3_SRLOCK114 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 114 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 114 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 114 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK114_B_0x0 = 0;
        /** @brief Fuse word 114 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK114_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 115 */
    using BSEC_SRLOCK3_SRLOCK115 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 115 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 115 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 115 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK115_B_0x0 = 0;
        /** @brief Fuse word 115 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK115_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 116 */
    using BSEC_SRLOCK3_SRLOCK116 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 116 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 116 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 116 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK116_B_0x0 = 0;
        /** @brief Fuse word 116 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK116_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 117 */
    using BSEC_SRLOCK3_SRLOCK117 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 117 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 117 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 117 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK117_B_0x0 = 0;
        /** @brief Fuse word 117 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK117_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 118 */
    using BSEC_SRLOCK3_SRLOCK118 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 118 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 118 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 118 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK118_B_0x0 = 0;
        /** @brief Fuse word 118 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK118_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 119 */
    using BSEC_SRLOCK3_SRLOCK119 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 119 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 119 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 119 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK119_B_0x0 = 0;
        /** @brief Fuse word 119 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK119_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 120 */
    using BSEC_SRLOCK3_SRLOCK120 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 120 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 120 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 120 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK120_B_0x0 = 0;
        /** @brief Fuse word 120 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK120_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 121 */
    using BSEC_SRLOCK3_SRLOCK121 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 121 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 121 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 121 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK121_B_0x0 = 0;
        /** @brief Fuse word 121 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK121_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 122 */
    using BSEC_SRLOCK3_SRLOCK122 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 122 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 122 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 122 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK122_B_0x0 = 0;
        /** @brief Fuse word 122 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK122_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 123 */
    using BSEC_SRLOCK3_SRLOCK123 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 123 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 123 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 123 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK123_B_0x0 = 0;
        /** @brief Fuse word 123 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK123_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 124 */
    using BSEC_SRLOCK3_SRLOCK124 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 124 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 124 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 124 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK124_B_0x0 = 0;
        /** @brief Fuse word 124 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK124_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 125 */
    using BSEC_SRLOCK3_SRLOCK125 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 125 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 125 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 125 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK125_B_0x0 = 0;
        /** @brief Fuse word 125 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK125_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 126 */
    using BSEC_SRLOCK3_SRLOCK126 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 126 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 126 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 126 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK126_B_0x0 = 0;
        /** @brief Fuse word 126 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK126_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 127 */
    using BSEC_SRLOCK3_SRLOCK127 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 127 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 127 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 127 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK127_B_0x0 = 0;
        /** @brief Fuse word 127 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK3_SRLOCK127_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 4 */
    using BSEC_SRLOCK4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x890, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 128 */
    using BSEC_SRLOCK4_SRLOCK128 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 128 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 128 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 128 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK128_B_0x0 = 0;
        /** @brief Fuse word 128 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK128_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 129 */
    using BSEC_SRLOCK4_SRLOCK129 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 129 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 129 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 129 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK129_B_0x0 = 0;
        /** @brief Fuse word 129 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK129_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 130 */
    using BSEC_SRLOCK4_SRLOCK130 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 130 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 130 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 130 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK130_B_0x0 = 0;
        /** @brief Fuse word 130 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK130_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 131 */
    using BSEC_SRLOCK4_SRLOCK131 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 131 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 131 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 131 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK131_B_0x0 = 0;
        /** @brief Fuse word 131 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK131_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 132 */
    using BSEC_SRLOCK4_SRLOCK132 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 132 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 132 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 132 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK132_B_0x0 = 0;
        /** @brief Fuse word 132 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK132_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 133 */
    using BSEC_SRLOCK4_SRLOCK133 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 133 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 133 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 133 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK133_B_0x0 = 0;
        /** @brief Fuse word 133 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK133_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 134 */
    using BSEC_SRLOCK4_SRLOCK134 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 134 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 134 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 134 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK134_B_0x0 = 0;
        /** @brief Fuse word 134 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK134_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 135 */
    using BSEC_SRLOCK4_SRLOCK135 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 135 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 135 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 135 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK135_B_0x0 = 0;
        /** @brief Fuse word 135 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK135_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 136 */
    using BSEC_SRLOCK4_SRLOCK136 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 136 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 136 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 136 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK136_B_0x0 = 0;
        /** @brief Fuse word 136 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK136_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 137 */
    using BSEC_SRLOCK4_SRLOCK137 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 137 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 137 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 137 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK137_B_0x0 = 0;
        /** @brief Fuse word 137 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK137_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 138 */
    using BSEC_SRLOCK4_SRLOCK138 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 138 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 138 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 138 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK138_B_0x0 = 0;
        /** @brief Fuse word 138 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK138_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 139 */
    using BSEC_SRLOCK4_SRLOCK139 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 139 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 139 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 139 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK139_B_0x0 = 0;
        /** @brief Fuse word 139 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK139_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 140 */
    using BSEC_SRLOCK4_SRLOCK140 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 140 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 140 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 140 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK140_B_0x0 = 0;
        /** @brief Fuse word 140 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK140_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 141 */
    using BSEC_SRLOCK4_SRLOCK141 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 141 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 141 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 141 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK141_B_0x0 = 0;
        /** @brief Fuse word 141 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK141_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 142 */
    using BSEC_SRLOCK4_SRLOCK142 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 142 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 142 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 142 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK142_B_0x0 = 0;
        /** @brief Fuse word 142 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK142_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 143 */
    using BSEC_SRLOCK4_SRLOCK143 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 143 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 143 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 143 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK143_B_0x0 = 0;
        /** @brief Fuse word 143 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK143_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 144 */
    using BSEC_SRLOCK4_SRLOCK144 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 144 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 144 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 144 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK144_B_0x0 = 0;
        /** @brief Fuse word 144 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK144_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 145 */
    using BSEC_SRLOCK4_SRLOCK145 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 145 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 145 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 145 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK145_B_0x0 = 0;
        /** @brief Fuse word 145 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK145_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 146 */
    using BSEC_SRLOCK4_SRLOCK146 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 146 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 146 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 146 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK146_B_0x0 = 0;
        /** @brief Fuse word 146 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK146_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 147 */
    using BSEC_SRLOCK4_SRLOCK147 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 147 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 147 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 147 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK147_B_0x0 = 0;
        /** @brief Fuse word 147 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK147_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 148 */
    using BSEC_SRLOCK4_SRLOCK148 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 148 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 148 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 148 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK148_B_0x0 = 0;
        /** @brief Fuse word 148 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK148_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 149 */
    using BSEC_SRLOCK4_SRLOCK149 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 149 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 149 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 149 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK149_B_0x0 = 0;
        /** @brief Fuse word 149 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK149_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 150 */
    using BSEC_SRLOCK4_SRLOCK150 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 150 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 150 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 150 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK150_B_0x0 = 0;
        /** @brief Fuse word 150 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK150_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 151 */
    using BSEC_SRLOCK4_SRLOCK151 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 151 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 151 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 151 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK151_B_0x0 = 0;
        /** @brief Fuse word 151 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK151_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 152 */
    using BSEC_SRLOCK4_SRLOCK152 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 152 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 152 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 152 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK152_B_0x0 = 0;
        /** @brief Fuse word 152 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK152_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 153 */
    using BSEC_SRLOCK4_SRLOCK153 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 153 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 153 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 153 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK153_B_0x0 = 0;
        /** @brief Fuse word 153 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK153_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 154 */
    using BSEC_SRLOCK4_SRLOCK154 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 154 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 154 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 154 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK154_B_0x0 = 0;
        /** @brief Fuse word 154 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK154_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 155 */
    using BSEC_SRLOCK4_SRLOCK155 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 155 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 155 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 155 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK155_B_0x0 = 0;
        /** @brief Fuse word 155 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK155_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 156 */
    using BSEC_SRLOCK4_SRLOCK156 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 156 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 156 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 156 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK156_B_0x0 = 0;
        /** @brief Fuse word 156 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK156_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 157 */
    using BSEC_SRLOCK4_SRLOCK157 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 157 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 157 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 157 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK157_B_0x0 = 0;
        /** @brief Fuse word 157 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK157_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 158 */
    using BSEC_SRLOCK4_SRLOCK158 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 158 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 158 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 158 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK158_B_0x0 = 0;
        /** @brief Fuse word 158 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK158_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 159 */
    using BSEC_SRLOCK4_SRLOCK159 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 159 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 159 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 159 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK159_B_0x0 = 0;
        /** @brief Fuse word 159 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK4_SRLOCK159_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 5 */
    using BSEC_SRLOCK5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x894, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 160 */
    using BSEC_SRLOCK5_SRLOCK160 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 160 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 160 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 160 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK160_B_0x0 = 0;
        /** @brief Fuse word 160 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK160_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 161 */
    using BSEC_SRLOCK5_SRLOCK161 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 161 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 161 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 161 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK161_B_0x0 = 0;
        /** @brief Fuse word 161 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK161_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 162 */
    using BSEC_SRLOCK5_SRLOCK162 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 162 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 162 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 162 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK162_B_0x0 = 0;
        /** @brief Fuse word 162 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK162_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 163 */
    using BSEC_SRLOCK5_SRLOCK163 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 163 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 163 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 163 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK163_B_0x0 = 0;
        /** @brief Fuse word 163 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK163_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 164 */
    using BSEC_SRLOCK5_SRLOCK164 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 164 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 164 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 164 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK164_B_0x0 = 0;
        /** @brief Fuse word 164 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK164_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 165 */
    using BSEC_SRLOCK5_SRLOCK165 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 165 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 165 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 165 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK165_B_0x0 = 0;
        /** @brief Fuse word 165 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK165_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 166 */
    using BSEC_SRLOCK5_SRLOCK166 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 166 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 166 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 166 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK166_B_0x0 = 0;
        /** @brief Fuse word 166 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK166_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 167 */
    using BSEC_SRLOCK5_SRLOCK167 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 167 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 167 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 167 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK167_B_0x0 = 0;
        /** @brief Fuse word 167 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK167_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 168 */
    using BSEC_SRLOCK5_SRLOCK168 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 168 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 168 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 168 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK168_B_0x0 = 0;
        /** @brief Fuse word 168 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK168_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 169 */
    using BSEC_SRLOCK5_SRLOCK169 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 169 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 169 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 169 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK169_B_0x0 = 0;
        /** @brief Fuse word 169 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK169_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 170 */
    using BSEC_SRLOCK5_SRLOCK170 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 170 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 170 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 170 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK170_B_0x0 = 0;
        /** @brief Fuse word 170 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK170_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 171 */
    using BSEC_SRLOCK5_SRLOCK171 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 171 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 171 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 171 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK171_B_0x0 = 0;
        /** @brief Fuse word 171 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK171_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 172 */
    using BSEC_SRLOCK5_SRLOCK172 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 172 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 172 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 172 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK172_B_0x0 = 0;
        /** @brief Fuse word 172 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK172_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 173 */
    using BSEC_SRLOCK5_SRLOCK173 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 173 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 173 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 173 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK173_B_0x0 = 0;
        /** @brief Fuse word 173 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK173_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 174 */
    using BSEC_SRLOCK5_SRLOCK174 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 174 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 174 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 174 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK174_B_0x0 = 0;
        /** @brief Fuse word 174 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK174_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 175 */
    using BSEC_SRLOCK5_SRLOCK175 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 175 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 175 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 175 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK175_B_0x0 = 0;
        /** @brief Fuse word 175 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK175_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 176 */
    using BSEC_SRLOCK5_SRLOCK176 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 176 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 176 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 176 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK176_B_0x0 = 0;
        /** @brief Fuse word 176 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK176_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 177 */
    using BSEC_SRLOCK5_SRLOCK177 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 177 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 177 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 177 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK177_B_0x0 = 0;
        /** @brief Fuse word 177 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK177_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 178 */
    using BSEC_SRLOCK5_SRLOCK178 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 178 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 178 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 178 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK178_B_0x0 = 0;
        /** @brief Fuse word 178 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK178_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 179 */
    using BSEC_SRLOCK5_SRLOCK179 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 179 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 179 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 179 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK179_B_0x0 = 0;
        /** @brief Fuse word 179 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK179_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 180 */
    using BSEC_SRLOCK5_SRLOCK180 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 180 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 180 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 180 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK180_B_0x0 = 0;
        /** @brief Fuse word 180 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK180_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 181 */
    using BSEC_SRLOCK5_SRLOCK181 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 181 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 181 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 181 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK181_B_0x0 = 0;
        /** @brief Fuse word 181 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK181_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 182 */
    using BSEC_SRLOCK5_SRLOCK182 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 182 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 182 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 182 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK182_B_0x0 = 0;
        /** @brief Fuse word 182 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK182_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 183 */
    using BSEC_SRLOCK5_SRLOCK183 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 183 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 183 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 183 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK183_B_0x0 = 0;
        /** @brief Fuse word 183 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK183_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 184 */
    using BSEC_SRLOCK5_SRLOCK184 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 184 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 184 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 184 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK184_B_0x0 = 0;
        /** @brief Fuse word 184 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK184_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 185 */
    using BSEC_SRLOCK5_SRLOCK185 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 185 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 185 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 185 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK185_B_0x0 = 0;
        /** @brief Fuse word 185 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK185_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 186 */
    using BSEC_SRLOCK5_SRLOCK186 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 186 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 186 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 186 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK186_B_0x0 = 0;
        /** @brief Fuse word 186 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK186_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 187 */
    using BSEC_SRLOCK5_SRLOCK187 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 187 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 187 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 187 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK187_B_0x0 = 0;
        /** @brief Fuse word 187 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK187_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 188 */
    using BSEC_SRLOCK5_SRLOCK188 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 188 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 188 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 188 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK188_B_0x0 = 0;
        /** @brief Fuse word 188 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK188_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 189 */
    using BSEC_SRLOCK5_SRLOCK189 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 189 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 189 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 189 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK189_B_0x0 = 0;
        /** @brief Fuse word 189 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK189_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 190 */
    using BSEC_SRLOCK5_SRLOCK190 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 190 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 190 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 190 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK190_B_0x0 = 0;
        /** @brief Fuse word 190 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK190_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 191 */
    using BSEC_SRLOCK5_SRLOCK191 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 191 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 191 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 191 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK191_B_0x0 = 0;
        /** @brief Fuse word 191 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK5_SRLOCK191_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 6 */
    using BSEC_SRLOCK6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x898, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 192 */
    using BSEC_SRLOCK6_SRLOCK192 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 192 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 192 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 192 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK192_B_0x0 = 0;
        /** @brief Fuse word 192 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK192_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 193 */
    using BSEC_SRLOCK6_SRLOCK193 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 193 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 193 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 193 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK193_B_0x0 = 0;
        /** @brief Fuse word 193 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK193_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 194 */
    using BSEC_SRLOCK6_SRLOCK194 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 194 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 194 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 194 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK194_B_0x0 = 0;
        /** @brief Fuse word 194 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK194_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 195 */
    using BSEC_SRLOCK6_SRLOCK195 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 195 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 195 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 195 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK195_B_0x0 = 0;
        /** @brief Fuse word 195 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK195_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 196 */
    using BSEC_SRLOCK6_SRLOCK196 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 196 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 196 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 196 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK196_B_0x0 = 0;
        /** @brief Fuse word 196 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK196_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 197 */
    using BSEC_SRLOCK6_SRLOCK197 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 197 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 197 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 197 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK197_B_0x0 = 0;
        /** @brief Fuse word 197 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK197_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 198 */
    using BSEC_SRLOCK6_SRLOCK198 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 198 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 198 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 198 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK198_B_0x0 = 0;
        /** @brief Fuse word 198 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK198_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 199 */
    using BSEC_SRLOCK6_SRLOCK199 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 199 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 199 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 199 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK199_B_0x0 = 0;
        /** @brief Fuse word 199 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK199_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 200 */
    using BSEC_SRLOCK6_SRLOCK200 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 200 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 200 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 200 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK200_B_0x0 = 0;
        /** @brief Fuse word 200 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK200_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 201 */
    using BSEC_SRLOCK6_SRLOCK201 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 201 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 201 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 201 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK201_B_0x0 = 0;
        /** @brief Fuse word 201 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK201_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 202 */
    using BSEC_SRLOCK6_SRLOCK202 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 202 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 202 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 202 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK202_B_0x0 = 0;
        /** @brief Fuse word 202 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK202_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 203 */
    using BSEC_SRLOCK6_SRLOCK203 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 203 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 203 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 203 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK203_B_0x0 = 0;
        /** @brief Fuse word 203 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK203_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 204 */
    using BSEC_SRLOCK6_SRLOCK204 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 204 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 204 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 204 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK204_B_0x0 = 0;
        /** @brief Fuse word 204 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK204_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 205 */
    using BSEC_SRLOCK6_SRLOCK205 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 205 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 205 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 205 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK205_B_0x0 = 0;
        /** @brief Fuse word 205 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK205_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 206 */
    using BSEC_SRLOCK6_SRLOCK206 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 206 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 206 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 206 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK206_B_0x0 = 0;
        /** @brief Fuse word 206 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK206_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 207 */
    using BSEC_SRLOCK6_SRLOCK207 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 207 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 207 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 207 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK207_B_0x0 = 0;
        /** @brief Fuse word 207 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK207_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 208 */
    using BSEC_SRLOCK6_SRLOCK208 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 208 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 208 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 208 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK208_B_0x0 = 0;
        /** @brief Fuse word 208 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK208_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 209 */
    using BSEC_SRLOCK6_SRLOCK209 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 209 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 209 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 209 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK209_B_0x0 = 0;
        /** @brief Fuse word 209 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK209_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 210 */
    using BSEC_SRLOCK6_SRLOCK210 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 210 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 210 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 210 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK210_B_0x0 = 0;
        /** @brief Fuse word 210 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK210_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 211 */
    using BSEC_SRLOCK6_SRLOCK211 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 211 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 211 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 211 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK211_B_0x0 = 0;
        /** @brief Fuse word 211 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK211_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 212 */
    using BSEC_SRLOCK6_SRLOCK212 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 212 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 212 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 212 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK212_B_0x0 = 0;
        /** @brief Fuse word 212 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK212_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 213 */
    using BSEC_SRLOCK6_SRLOCK213 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 213 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 213 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 213 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK213_B_0x0 = 0;
        /** @brief Fuse word 213 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK213_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 214 */
    using BSEC_SRLOCK6_SRLOCK214 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 214 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 214 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 214 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK214_B_0x0 = 0;
        /** @brief Fuse word 214 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK214_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 215 */
    using BSEC_SRLOCK6_SRLOCK215 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 215 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 215 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 215 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK215_B_0x0 = 0;
        /** @brief Fuse word 215 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK215_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 216 */
    using BSEC_SRLOCK6_SRLOCK216 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 216 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 216 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 216 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK216_B_0x0 = 0;
        /** @brief Fuse word 216 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK216_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 217 */
    using BSEC_SRLOCK6_SRLOCK217 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 217 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 217 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 217 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK217_B_0x0 = 0;
        /** @brief Fuse word 217 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK217_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 218 */
    using BSEC_SRLOCK6_SRLOCK218 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 218 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 218 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 218 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK218_B_0x0 = 0;
        /** @brief Fuse word 218 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK218_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 219 */
    using BSEC_SRLOCK6_SRLOCK219 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 219 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 219 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 219 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK219_B_0x0 = 0;
        /** @brief Fuse word 219 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK219_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 220 */
    using BSEC_SRLOCK6_SRLOCK220 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 220 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 220 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 220 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK220_B_0x0 = 0;
        /** @brief Fuse word 220 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK220_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 221 */
    using BSEC_SRLOCK6_SRLOCK221 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 221 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 221 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 221 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK221_B_0x0 = 0;
        /** @brief Fuse word 221 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK221_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 222 */
    using BSEC_SRLOCK6_SRLOCK222 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 222 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 222 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 222 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK222_B_0x0 = 0;
        /** @brief Fuse word 222 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK222_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 223 */
    using BSEC_SRLOCK6_SRLOCK223 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 223 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 223 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 223 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK223_B_0x0 = 0;
        /** @brief Fuse word 223 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK6_SRLOCK223_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 7 */
    using BSEC_SRLOCK7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x89C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 224 */
    using BSEC_SRLOCK7_SRLOCK224 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 224 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 224 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 224 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK224_B_0x0 = 0;
        /** @brief Fuse word 224 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK224_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 225 */
    using BSEC_SRLOCK7_SRLOCK225 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 225 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 225 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 225 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK225_B_0x0 = 0;
        /** @brief Fuse word 225 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK225_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 226 */
    using BSEC_SRLOCK7_SRLOCK226 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 226 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 226 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 226 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK226_B_0x0 = 0;
        /** @brief Fuse word 226 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK226_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 227 */
    using BSEC_SRLOCK7_SRLOCK227 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 227 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 227 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 227 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK227_B_0x0 = 0;
        /** @brief Fuse word 227 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK227_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 228 */
    using BSEC_SRLOCK7_SRLOCK228 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 228 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 228 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 228 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK228_B_0x0 = 0;
        /** @brief Fuse word 228 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK228_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 229 */
    using BSEC_SRLOCK7_SRLOCK229 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 229 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 229 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 229 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK229_B_0x0 = 0;
        /** @brief Fuse word 229 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK229_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 230 */
    using BSEC_SRLOCK7_SRLOCK230 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 230 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 230 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 230 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK230_B_0x0 = 0;
        /** @brief Fuse word 230 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK230_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 231 */
    using BSEC_SRLOCK7_SRLOCK231 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 231 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 231 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 231 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK231_B_0x0 = 0;
        /** @brief Fuse word 231 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK231_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 232 */
    using BSEC_SRLOCK7_SRLOCK232 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 232 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 232 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 232 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK232_B_0x0 = 0;
        /** @brief Fuse word 232 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK232_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 233 */
    using BSEC_SRLOCK7_SRLOCK233 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 233 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 233 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 233 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK233_B_0x0 = 0;
        /** @brief Fuse word 233 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK233_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 234 */
    using BSEC_SRLOCK7_SRLOCK234 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 234 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 234 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 234 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK234_B_0x0 = 0;
        /** @brief Fuse word 234 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK234_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 235 */
    using BSEC_SRLOCK7_SRLOCK235 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 235 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 235 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 235 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK235_B_0x0 = 0;
        /** @brief Fuse word 235 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK235_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 236 */
    using BSEC_SRLOCK7_SRLOCK236 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 236 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 236 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 236 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK236_B_0x0 = 0;
        /** @brief Fuse word 236 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK236_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 237 */
    using BSEC_SRLOCK7_SRLOCK237 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 237 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 237 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 237 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK237_B_0x0 = 0;
        /** @brief Fuse word 237 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK237_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 238 */
    using BSEC_SRLOCK7_SRLOCK238 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 238 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 238 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 238 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK238_B_0x0 = 0;
        /** @brief Fuse word 238 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK238_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 239 */
    using BSEC_SRLOCK7_SRLOCK239 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 239 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 239 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 239 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK239_B_0x0 = 0;
        /** @brief Fuse word 239 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK239_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 240 */
    using BSEC_SRLOCK7_SRLOCK240 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 240 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 240 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 240 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK240_B_0x0 = 0;
        /** @brief Fuse word 240 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK240_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 241 */
    using BSEC_SRLOCK7_SRLOCK241 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 241 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 241 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 241 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK241_B_0x0 = 0;
        /** @brief Fuse word 241 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK241_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 242 */
    using BSEC_SRLOCK7_SRLOCK242 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 242 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 242 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 242 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK242_B_0x0 = 0;
        /** @brief Fuse word 242 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK242_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 243 */
    using BSEC_SRLOCK7_SRLOCK243 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 243 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 243 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 243 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK243_B_0x0 = 0;
        /** @brief Fuse word 243 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK243_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 244 */
    using BSEC_SRLOCK7_SRLOCK244 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 244 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 244 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 244 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK244_B_0x0 = 0;
        /** @brief Fuse word 244 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK244_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 245 */
    using BSEC_SRLOCK7_SRLOCK245 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 245 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 245 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 245 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK245_B_0x0 = 0;
        /** @brief Fuse word 245 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK245_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 246 */
    using BSEC_SRLOCK7_SRLOCK246 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 246 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 246 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 246 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK246_B_0x0 = 0;
        /** @brief Fuse word 246 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK246_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 247 */
    using BSEC_SRLOCK7_SRLOCK247 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 247 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 247 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 247 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK247_B_0x0 = 0;
        /** @brief Fuse word 247 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK247_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 248 */
    using BSEC_SRLOCK7_SRLOCK248 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 248 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 248 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 248 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK248_B_0x0 = 0;
        /** @brief Fuse word 248 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK248_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 249 */
    using BSEC_SRLOCK7_SRLOCK249 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 249 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 249 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 249 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK249_B_0x0 = 0;
        /** @brief Fuse word 249 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK249_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 250 */
    using BSEC_SRLOCK7_SRLOCK250 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 250 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 250 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 250 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK250_B_0x0 = 0;
        /** @brief Fuse word 250 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK250_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 251 */
    using BSEC_SRLOCK7_SRLOCK251 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 251 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 251 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 251 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK251_B_0x0 = 0;
        /** @brief Fuse word 251 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK251_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 252 */
    using BSEC_SRLOCK7_SRLOCK252 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 252 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 252 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 252 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK252_B_0x0 = 0;
        /** @brief Fuse word 252 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK252_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 253 */
    using BSEC_SRLOCK7_SRLOCK253 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 253 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 253 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 253 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK253_B_0x0 = 0;
        /** @brief Fuse word 253 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK253_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 254 */
    using BSEC_SRLOCK7_SRLOCK254 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 254 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 254 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 254 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK254_B_0x0 = 0;
        /** @brief Fuse word 254 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK254_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 255 */
    using BSEC_SRLOCK7_SRLOCK255 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 255 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 255 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 255 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK255_B_0x0 = 0;
        /** @brief Fuse word 255 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK7_SRLOCK255_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 8 */
    using BSEC_SRLOCK8 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8A0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 256 */
    using BSEC_SRLOCK8_SRLOCK256 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 256 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 256 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 256 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK256_B_0x0 = 0;
        /** @brief Fuse word 256 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK256_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 257 */
    using BSEC_SRLOCK8_SRLOCK257 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 257 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 257 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 257 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK257_B_0x0 = 0;
        /** @brief Fuse word 257 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK257_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 258 */
    using BSEC_SRLOCK8_SRLOCK258 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 258 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 258 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 258 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK258_B_0x0 = 0;
        /** @brief Fuse word 258 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK258_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 259 */
    using BSEC_SRLOCK8_SRLOCK259 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 259 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 259 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 259 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK259_B_0x0 = 0;
        /** @brief Fuse word 259 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK259_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 260 */
    using BSEC_SRLOCK8_SRLOCK260 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 260 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 260 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 260 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK260_B_0x0 = 0;
        /** @brief Fuse word 260 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK260_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 261 */
    using BSEC_SRLOCK8_SRLOCK261 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 261 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 261 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 261 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK261_B_0x0 = 0;
        /** @brief Fuse word 261 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK261_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 262 */
    using BSEC_SRLOCK8_SRLOCK262 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 262 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 262 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 262 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK262_B_0x0 = 0;
        /** @brief Fuse word 262 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK262_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 263 */
    using BSEC_SRLOCK8_SRLOCK263 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 263 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 263 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 263 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK263_B_0x0 = 0;
        /** @brief Fuse word 263 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK263_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 264 */
    using BSEC_SRLOCK8_SRLOCK264 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 264 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 264 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 264 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK264_B_0x0 = 0;
        /** @brief Fuse word 264 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK264_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 265 */
    using BSEC_SRLOCK8_SRLOCK265 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 265 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 265 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 265 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK265_B_0x0 = 0;
        /** @brief Fuse word 265 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK265_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 266 */
    using BSEC_SRLOCK8_SRLOCK266 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 266 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 266 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 266 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK266_B_0x0 = 0;
        /** @brief Fuse word 266 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK266_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 267 */
    using BSEC_SRLOCK8_SRLOCK267 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 267 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 267 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 267 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK267_B_0x0 = 0;
        /** @brief Fuse word 267 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK267_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 268 */
    using BSEC_SRLOCK8_SRLOCK268 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 268 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 268 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 268 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK268_B_0x0 = 0;
        /** @brief Fuse word 268 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK268_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 269 */
    using BSEC_SRLOCK8_SRLOCK269 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 269 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 269 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 269 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK269_B_0x0 = 0;
        /** @brief Fuse word 269 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK269_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 270 */
    using BSEC_SRLOCK8_SRLOCK270 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 270 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 270 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 270 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK270_B_0x0 = 0;
        /** @brief Fuse word 270 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK270_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 271 */
    using BSEC_SRLOCK8_SRLOCK271 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 271 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 271 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 271 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK271_B_0x0 = 0;
        /** @brief Fuse word 271 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK271_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 272 */
    using BSEC_SRLOCK8_SRLOCK272 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 272 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 272 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 272 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK272_B_0x0 = 0;
        /** @brief Fuse word 272 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK272_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 273 */
    using BSEC_SRLOCK8_SRLOCK273 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 273 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 273 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 273 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK273_B_0x0 = 0;
        /** @brief Fuse word 273 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK273_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 274 */
    using BSEC_SRLOCK8_SRLOCK274 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 274 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 274 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 274 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK274_B_0x0 = 0;
        /** @brief Fuse word 274 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK274_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 275 */
    using BSEC_SRLOCK8_SRLOCK275 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 275 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 275 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 275 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK275_B_0x0 = 0;
        /** @brief Fuse word 275 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK275_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 276 */
    using BSEC_SRLOCK8_SRLOCK276 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 276 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 276 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 276 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK276_B_0x0 = 0;
        /** @brief Fuse word 276 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK276_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 277 */
    using BSEC_SRLOCK8_SRLOCK277 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 277 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 277 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 277 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK277_B_0x0 = 0;
        /** @brief Fuse word 277 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK277_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 278 */
    using BSEC_SRLOCK8_SRLOCK278 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 278 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 278 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 278 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK278_B_0x0 = 0;
        /** @brief Fuse word 278 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK278_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 279 */
    using BSEC_SRLOCK8_SRLOCK279 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 279 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 279 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 279 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK279_B_0x0 = 0;
        /** @brief Fuse word 279 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK279_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 280 */
    using BSEC_SRLOCK8_SRLOCK280 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 280 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 280 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 280 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK280_B_0x0 = 0;
        /** @brief Fuse word 280 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK280_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 281 */
    using BSEC_SRLOCK8_SRLOCK281 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 281 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 281 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 281 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK281_B_0x0 = 0;
        /** @brief Fuse word 281 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK281_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 282 */
    using BSEC_SRLOCK8_SRLOCK282 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 282 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 282 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 282 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK282_B_0x0 = 0;
        /** @brief Fuse word 282 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK282_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 283 */
    using BSEC_SRLOCK8_SRLOCK283 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 283 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 283 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 283 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK283_B_0x0 = 0;
        /** @brief Fuse word 283 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK283_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 284 */
    using BSEC_SRLOCK8_SRLOCK284 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 284 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 284 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 284 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK284_B_0x0 = 0;
        /** @brief Fuse word 284 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK284_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 285 */
    using BSEC_SRLOCK8_SRLOCK285 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 285 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 285 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 285 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK285_B_0x0 = 0;
        /** @brief Fuse word 285 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK285_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 286 */
    using BSEC_SRLOCK8_SRLOCK286 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 286 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 286 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 286 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK286_B_0x0 = 0;
        /** @brief Fuse word 286 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK286_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 287 */
    using BSEC_SRLOCK8_SRLOCK287 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 287 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 287 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 287 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK287_B_0x0 = 0;
        /** @brief Fuse word 287 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK8_SRLOCK287_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 9 */
    using BSEC_SRLOCK9 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8A4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 288 */
    using BSEC_SRLOCK9_SRLOCK288 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 288 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 288 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 288 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK288_B_0x0 = 0;
        /** @brief Fuse word 288 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK288_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 289 */
    using BSEC_SRLOCK9_SRLOCK289 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 289 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 289 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 289 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK289_B_0x0 = 0;
        /** @brief Fuse word 289 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK289_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 290 */
    using BSEC_SRLOCK9_SRLOCK290 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 290 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 290 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 290 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK290_B_0x0 = 0;
        /** @brief Fuse word 290 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK290_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 291 */
    using BSEC_SRLOCK9_SRLOCK291 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 291 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 291 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 291 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK291_B_0x0 = 0;
        /** @brief Fuse word 291 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK291_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 292 */
    using BSEC_SRLOCK9_SRLOCK292 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 292 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 292 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 292 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK292_B_0x0 = 0;
        /** @brief Fuse word 292 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK292_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 293 */
    using BSEC_SRLOCK9_SRLOCK293 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 293 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 293 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 293 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK293_B_0x0 = 0;
        /** @brief Fuse word 293 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK293_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 294 */
    using BSEC_SRLOCK9_SRLOCK294 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 294 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 294 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 294 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK294_B_0x0 = 0;
        /** @brief Fuse word 294 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK294_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 295 */
    using BSEC_SRLOCK9_SRLOCK295 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 295 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 295 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 295 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK295_B_0x0 = 0;
        /** @brief Fuse word 295 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK295_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 296 */
    using BSEC_SRLOCK9_SRLOCK296 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 296 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 296 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 296 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK296_B_0x0 = 0;
        /** @brief Fuse word 296 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK296_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 297 */
    using BSEC_SRLOCK9_SRLOCK297 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 297 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 297 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 297 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK297_B_0x0 = 0;
        /** @brief Fuse word 297 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK297_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 298 */
    using BSEC_SRLOCK9_SRLOCK298 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 298 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 298 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 298 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK298_B_0x0 = 0;
        /** @brief Fuse word 298 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK298_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 299 */
    using BSEC_SRLOCK9_SRLOCK299 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 299 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 299 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 299 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK299_B_0x0 = 0;
        /** @brief Fuse word 299 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK299_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 300 */
    using BSEC_SRLOCK9_SRLOCK300 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 300 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 300 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 300 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK300_B_0x0 = 0;
        /** @brief Fuse word 300 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK300_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 301 */
    using BSEC_SRLOCK9_SRLOCK301 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 301 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 301 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 301 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK301_B_0x0 = 0;
        /** @brief Fuse word 301 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK301_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 302 */
    using BSEC_SRLOCK9_SRLOCK302 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 302 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 302 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 302 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK302_B_0x0 = 0;
        /** @brief Fuse word 302 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK302_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 303 */
    using BSEC_SRLOCK9_SRLOCK303 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 303 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 303 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 303 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK303_B_0x0 = 0;
        /** @brief Fuse word 303 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK303_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 304 */
    using BSEC_SRLOCK9_SRLOCK304 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 304 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 304 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 304 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK304_B_0x0 = 0;
        /** @brief Fuse word 304 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK304_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 305 */
    using BSEC_SRLOCK9_SRLOCK305 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 305 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 305 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 305 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK305_B_0x0 = 0;
        /** @brief Fuse word 305 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK305_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 306 */
    using BSEC_SRLOCK9_SRLOCK306 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 306 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 306 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 306 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK306_B_0x0 = 0;
        /** @brief Fuse word 306 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK306_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 307 */
    using BSEC_SRLOCK9_SRLOCK307 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 307 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 307 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 307 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK307_B_0x0 = 0;
        /** @brief Fuse word 307 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK307_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 308 */
    using BSEC_SRLOCK9_SRLOCK308 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 308 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 308 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 308 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK308_B_0x0 = 0;
        /** @brief Fuse word 308 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK308_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 309 */
    using BSEC_SRLOCK9_SRLOCK309 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 309 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 309 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 309 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK309_B_0x0 = 0;
        /** @brief Fuse word 309 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK309_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 310 */
    using BSEC_SRLOCK9_SRLOCK310 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 310 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 310 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 310 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK310_B_0x0 = 0;
        /** @brief Fuse word 310 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK310_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 311 */
    using BSEC_SRLOCK9_SRLOCK311 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 311 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 311 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 311 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK311_B_0x0 = 0;
        /** @brief Fuse word 311 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK311_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 312 */
    using BSEC_SRLOCK9_SRLOCK312 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 312 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 312 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 312 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK312_B_0x0 = 0;
        /** @brief Fuse word 312 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK312_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 313 */
    using BSEC_SRLOCK9_SRLOCK313 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 313 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 313 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 313 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK313_B_0x0 = 0;
        /** @brief Fuse word 313 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK313_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 314 */
    using BSEC_SRLOCK9_SRLOCK314 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 314 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 314 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 314 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK314_B_0x0 = 0;
        /** @brief Fuse word 314 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK314_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 315 */
    using BSEC_SRLOCK9_SRLOCK315 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 315 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 315 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 315 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK315_B_0x0 = 0;
        /** @brief Fuse word 315 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK315_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 316 */
    using BSEC_SRLOCK9_SRLOCK316 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 316 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 316 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 316 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK316_B_0x0 = 0;
        /** @brief Fuse word 316 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK316_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 317 */
    using BSEC_SRLOCK9_SRLOCK317 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 317 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 317 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 317 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK317_B_0x0 = 0;
        /** @brief Fuse word 317 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK317_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 318 */
    using BSEC_SRLOCK9_SRLOCK318 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 318 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 318 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 318 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK318_B_0x0 = 0;
        /** @brief Fuse word 318 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK318_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 319 */
    using BSEC_SRLOCK9_SRLOCK319 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 319 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 319 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 319 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK319_B_0x0 = 0;
        /** @brief Fuse word 319 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK9_SRLOCK319_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 10 */
    using BSEC_SRLOCK10 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8A8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 320 */
    using BSEC_SRLOCK10_SRLOCK320 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 320 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 320 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 320 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK320_B_0x0 = 0;
        /** @brief Fuse word 320 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK320_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 321 */
    using BSEC_SRLOCK10_SRLOCK321 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 321 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 321 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 321 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK321_B_0x0 = 0;
        /** @brief Fuse word 321 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK321_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 322 */
    using BSEC_SRLOCK10_SRLOCK322 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 322 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 322 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 322 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK322_B_0x0 = 0;
        /** @brief Fuse word 322 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK322_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 323 */
    using BSEC_SRLOCK10_SRLOCK323 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 323 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 323 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 323 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK323_B_0x0 = 0;
        /** @brief Fuse word 323 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK323_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 324 */
    using BSEC_SRLOCK10_SRLOCK324 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 324 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 324 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 324 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK324_B_0x0 = 0;
        /** @brief Fuse word 324 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK324_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 325 */
    using BSEC_SRLOCK10_SRLOCK325 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 325 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 325 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 325 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK325_B_0x0 = 0;
        /** @brief Fuse word 325 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK325_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 326 */
    using BSEC_SRLOCK10_SRLOCK326 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 326 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 326 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 326 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK326_B_0x0 = 0;
        /** @brief Fuse word 326 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK326_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 327 */
    using BSEC_SRLOCK10_SRLOCK327 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 327 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 327 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 327 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK327_B_0x0 = 0;
        /** @brief Fuse word 327 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK327_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 328 */
    using BSEC_SRLOCK10_SRLOCK328 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 328 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 328 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 328 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK328_B_0x0 = 0;
        /** @brief Fuse word 328 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK328_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 329 */
    using BSEC_SRLOCK10_SRLOCK329 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 329 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 329 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 329 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK329_B_0x0 = 0;
        /** @brief Fuse word 329 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK329_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 330 */
    using BSEC_SRLOCK10_SRLOCK330 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 330 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 330 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 330 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK330_B_0x0 = 0;
        /** @brief Fuse word 330 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK330_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 331 */
    using BSEC_SRLOCK10_SRLOCK331 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 331 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 331 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 331 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK331_B_0x0 = 0;
        /** @brief Fuse word 331 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK331_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 332 */
    using BSEC_SRLOCK10_SRLOCK332 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 332 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 332 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 332 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK332_B_0x0 = 0;
        /** @brief Fuse word 332 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK332_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 333 */
    using BSEC_SRLOCK10_SRLOCK333 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 333 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 333 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 333 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK333_B_0x0 = 0;
        /** @brief Fuse word 333 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK333_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 334 */
    using BSEC_SRLOCK10_SRLOCK334 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 334 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 334 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 334 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK334_B_0x0 = 0;
        /** @brief Fuse word 334 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK334_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 335 */
    using BSEC_SRLOCK10_SRLOCK335 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 335 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 335 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 335 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK335_B_0x0 = 0;
        /** @brief Fuse word 335 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK335_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 336 */
    using BSEC_SRLOCK10_SRLOCK336 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 336 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 336 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 336 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK336_B_0x0 = 0;
        /** @brief Fuse word 336 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK336_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 337 */
    using BSEC_SRLOCK10_SRLOCK337 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 337 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 337 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 337 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK337_B_0x0 = 0;
        /** @brief Fuse word 337 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK337_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 338 */
    using BSEC_SRLOCK10_SRLOCK338 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 338 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 338 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 338 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK338_B_0x0 = 0;
        /** @brief Fuse word 338 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK338_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 339 */
    using BSEC_SRLOCK10_SRLOCK339 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 339 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 339 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 339 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK339_B_0x0 = 0;
        /** @brief Fuse word 339 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK339_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 340 */
    using BSEC_SRLOCK10_SRLOCK340 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 340 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 340 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 340 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK340_B_0x0 = 0;
        /** @brief Fuse word 340 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK340_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 341 */
    using BSEC_SRLOCK10_SRLOCK341 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 341 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 341 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 341 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK341_B_0x0 = 0;
        /** @brief Fuse word 341 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK341_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 342 */
    using BSEC_SRLOCK10_SRLOCK342 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 342 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 342 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 342 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK342_B_0x0 = 0;
        /** @brief Fuse word 342 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK342_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 343 */
    using BSEC_SRLOCK10_SRLOCK343 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 343 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 343 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 343 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK343_B_0x0 = 0;
        /** @brief Fuse word 343 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK343_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 344 */
    using BSEC_SRLOCK10_SRLOCK344 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 344 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 344 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 344 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK344_B_0x0 = 0;
        /** @brief Fuse word 344 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK344_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 345 */
    using BSEC_SRLOCK10_SRLOCK345 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 345 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 345 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 345 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK345_B_0x0 = 0;
        /** @brief Fuse word 345 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK345_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 346 */
    using BSEC_SRLOCK10_SRLOCK346 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 346 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 346 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 346 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK346_B_0x0 = 0;
        /** @brief Fuse word 346 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK346_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 347 */
    using BSEC_SRLOCK10_SRLOCK347 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 347 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 347 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 347 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK347_B_0x0 = 0;
        /** @brief Fuse word 347 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK347_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 348 */
    using BSEC_SRLOCK10_SRLOCK348 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 348 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 348 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 348 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK348_B_0x0 = 0;
        /** @brief Fuse word 348 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK348_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 349 */
    using BSEC_SRLOCK10_SRLOCK349 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 349 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 349 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 349 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK349_B_0x0 = 0;
        /** @brief Fuse word 349 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK349_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 350 */
    using BSEC_SRLOCK10_SRLOCK350 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 350 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 350 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 350 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK350_B_0x0 = 0;
        /** @brief Fuse word 350 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK350_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 351 */
    using BSEC_SRLOCK10_SRLOCK351 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 351 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 351 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 351 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK351_B_0x0 = 0;
        /** @brief Fuse word 351 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK10_SRLOCK351_B_0x1 = 1;

    /** @brief BSEC sticky reload lock register 11 */
    using BSEC_SRLOCK11 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8AC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief sticky reload lock for fuse word 352 */
    using BSEC_SRLOCK11_SRLOCK352 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 352 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 352 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 352 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK352_B_0x0 = 0;
        /** @brief Fuse word 352 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK352_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 353 */
    using BSEC_SRLOCK11_SRLOCK353 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 353 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 353 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 353 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK353_B_0x0 = 0;
        /** @brief Fuse word 353 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK353_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 354 */
    using BSEC_SRLOCK11_SRLOCK354 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 354 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 354 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 354 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK354_B_0x0 = 0;
        /** @brief Fuse word 354 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK354_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 355 */
    using BSEC_SRLOCK11_SRLOCK355 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 355 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 355 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 355 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK355_B_0x0 = 0;
        /** @brief Fuse word 355 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK355_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 356 */
    using BSEC_SRLOCK11_SRLOCK356 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 356 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 356 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 356 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK356_B_0x0 = 0;
        /** @brief Fuse word 356 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK356_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 357 */
    using BSEC_SRLOCK11_SRLOCK357 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 357 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 357 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 357 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK357_B_0x0 = 0;
        /** @brief Fuse word 357 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK357_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 358 */
    using BSEC_SRLOCK11_SRLOCK358 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 358 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 358 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 358 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK358_B_0x0 = 0;
        /** @brief Fuse word 358 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK358_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 359 */
    using BSEC_SRLOCK11_SRLOCK359 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 359 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 359 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 359 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK359_B_0x0 = 0;
        /** @brief Fuse word 359 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK359_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 360 */
    using BSEC_SRLOCK11_SRLOCK360 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 360 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 360 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 360 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK360_B_0x0 = 0;
        /** @brief Fuse word 360 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK360_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 361 */
    using BSEC_SRLOCK11_SRLOCK361 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 361 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 361 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 361 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK361_B_0x0 = 0;
        /** @brief Fuse word 361 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK361_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 362 */
    using BSEC_SRLOCK11_SRLOCK362 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 362 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 362 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 362 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK362_B_0x0 = 0;
        /** @brief Fuse word 362 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK362_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 363 */
    using BSEC_SRLOCK11_SRLOCK363 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 363 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 363 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 363 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK363_B_0x0 = 0;
        /** @brief Fuse word 363 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK363_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 364 */
    using BSEC_SRLOCK11_SRLOCK364 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 364 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 364 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 364 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK364_B_0x0 = 0;
        /** @brief Fuse word 364 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK364_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 365 */
    using BSEC_SRLOCK11_SRLOCK365 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 365 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 365 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 365 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK365_B_0x0 = 0;
        /** @brief Fuse word 365 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK365_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 366 */
    using BSEC_SRLOCK11_SRLOCK366 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 366 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 366 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 366 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK366_B_0x0 = 0;
        /** @brief Fuse word 366 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK366_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 367 */
    using BSEC_SRLOCK11_SRLOCK367 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 367 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 367 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 367 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK367_B_0x0 = 0;
        /** @brief Fuse word 367 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK367_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 368 */
    using BSEC_SRLOCK11_SRLOCK368 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 368 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 368 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 368 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK368_B_0x0 = 0;
        /** @brief Fuse word 368 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK368_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 369 */
    using BSEC_SRLOCK11_SRLOCK369 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 369 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 369 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 369 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK369_B_0x0 = 0;
        /** @brief Fuse word 369 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK369_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 370 */
    using BSEC_SRLOCK11_SRLOCK370 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 370 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 370 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 370 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK370_B_0x0 = 0;
        /** @brief Fuse word 370 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK370_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 371 */
    using BSEC_SRLOCK11_SRLOCK371 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 371 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 371 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 371 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK371_B_0x0 = 0;
        /** @brief Fuse word 371 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK371_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 372 */
    using BSEC_SRLOCK11_SRLOCK372 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 372 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 372 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 372 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK372_B_0x0 = 0;
        /** @brief Fuse word 372 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK372_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 373 */
    using BSEC_SRLOCK11_SRLOCK373 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 373 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 373 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 373 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK373_B_0x0 = 0;
        /** @brief Fuse word 373 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK373_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 374 */
    using BSEC_SRLOCK11_SRLOCK374 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 374 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 374 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 374 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK374_B_0x0 = 0;
        /** @brief Fuse word 374 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK374_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 375 */
    using BSEC_SRLOCK11_SRLOCK375 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 375 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 375 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 375 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK375_B_0x0 = 0;
        /** @brief Fuse word 375 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK375_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 376 */
    using BSEC_SRLOCK11_SRLOCK376 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 376 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 376 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 376 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK376_B_0x0 = 0;
        /** @brief Fuse word 376 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK376_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 377 */
    using BSEC_SRLOCK11_SRLOCK377 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 377 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 377 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 377 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK377_B_0x0 = 0;
        /** @brief Fuse word 377 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK377_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 378 */
    using BSEC_SRLOCK11_SRLOCK378 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 378 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 378 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 378 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK378_B_0x0 = 0;
        /** @brief Fuse word 378 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK378_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 379 */
    using BSEC_SRLOCK11_SRLOCK379 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 379 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 379 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 379 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK379_B_0x0 = 0;
        /** @brief Fuse word 379 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK379_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 380 */
    using BSEC_SRLOCK11_SRLOCK380 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 380 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 380 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 380 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK380_B_0x0 = 0;
        /** @brief Fuse word 380 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK380_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 381 */
    using BSEC_SRLOCK11_SRLOCK381 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 381 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 381 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 381 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK381_B_0x0 = 0;
        /** @brief Fuse word 381 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK381_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 382 */
    using BSEC_SRLOCK11_SRLOCK382 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 382 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 382 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 382 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK382_B_0x0 = 0;
        /** @brief Fuse word 382 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK382_B_0x1 = 1;

    /** @brief sticky reload lock for fuse word 383 */
    using BSEC_SRLOCK11_SRLOCK383 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 383 loading through BSEC_OTPCR is authorized. (value: 0)
     *          - B_0x1: Fuse word 383 loading through BSEC_OTPCR is denied until next cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 383 loading through BSEC_OTPCR is authorized. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK383_B_0x0 = 0;
        /** @brief Fuse word 383 loading through BSEC_OTPCR is denied until next cold or warm reset. */
    constexpr std::uint32_t BSEC_SRLOCK11_SRLOCK383_B_0x1 = 1;

    /** @brief BSEC OTP valid register 0 */
    using BSEC_OTPVLDR0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8C0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 0 */
    using BSEC_OTPVLDR0_VLDF0 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 0 was last reloaded. The value read from BSEC_FVR0 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 0 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 0 was last reloaded. The value read from BSEC_FVR0 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF0_B_0x0 = 0;
        /** @brief Last reload of fuse word 0 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF0_B_0x1 = 1;

    /** @brief Valid flag for shadow register 1 */
    using BSEC_OTPVLDR0_VLDF1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 1 was last reloaded. The value read from BSEC_FVR1 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 1 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 1 was last reloaded. The value read from BSEC_FVR1 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF1_B_0x0 = 0;
        /** @brief Last reload of fuse word 1 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF1_B_0x1 = 1;

    /** @brief Valid flag for shadow register 2 */
    using BSEC_OTPVLDR0_VLDF2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 2 was last reloaded. The value read from BSEC_FVR2 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 2 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 2 was last reloaded. The value read from BSEC_FVR2 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF2_B_0x0 = 0;
        /** @brief Last reload of fuse word 2 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF2_B_0x1 = 1;

    /** @brief Valid flag for shadow register 3 */
    using BSEC_OTPVLDR0_VLDF3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 3 was last reloaded. The value read from BSEC_FVR3 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 3 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 3 was last reloaded. The value read from BSEC_FVR3 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF3_B_0x0 = 0;
        /** @brief Last reload of fuse word 3 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF3_B_0x1 = 1;

    /** @brief Valid flag for shadow register 4 */
    using BSEC_OTPVLDR0_VLDF4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 4 was last reloaded. The value read from BSEC_FVR4 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 4 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 4 was last reloaded. The value read from BSEC_FVR4 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF4_B_0x0 = 0;
        /** @brief Last reload of fuse word 4 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF4_B_0x1 = 1;

    /** @brief Valid flag for shadow register 5 */
    using BSEC_OTPVLDR0_VLDF5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 5 was last reloaded. The value read from BSEC_FVR5 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 5 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 5 was last reloaded. The value read from BSEC_FVR5 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF5_B_0x0 = 0;
        /** @brief Last reload of fuse word 5 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF5_B_0x1 = 1;

    /** @brief Valid flag for shadow register 6 */
    using BSEC_OTPVLDR0_VLDF6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 6 was last reloaded. The value read from BSEC_FVR6 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 6 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 6 was last reloaded. The value read from BSEC_FVR6 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF6_B_0x0 = 0;
        /** @brief Last reload of fuse word 6 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF6_B_0x1 = 1;

    /** @brief Valid flag for shadow register 7 */
    using BSEC_OTPVLDR0_VLDF7 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 7 was last reloaded. The value read from BSEC_FVR7 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 7 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 7 was last reloaded. The value read from BSEC_FVR7 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF7_B_0x0 = 0;
        /** @brief Last reload of fuse word 7 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF7_B_0x1 = 1;

    /** @brief Valid flag for shadow register 8 */
    using BSEC_OTPVLDR0_VLDF8 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 8 was last reloaded. The value read from BSEC_FVR8 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 8 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 8 was last reloaded. The value read from BSEC_FVR8 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF8_B_0x0 = 0;
        /** @brief Last reload of fuse word 8 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF8_B_0x1 = 1;

    /** @brief Valid flag for shadow register 9 */
    using BSEC_OTPVLDR0_VLDF9 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 9 was last reloaded. The value read from BSEC_FVR9 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 9 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 9 was last reloaded. The value read from BSEC_FVR9 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF9_B_0x0 = 0;
        /** @brief Last reload of fuse word 9 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF9_B_0x1 = 1;

    /** @brief Valid flag for shadow register 10 */
    using BSEC_OTPVLDR0_VLDF10 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 10 was last reloaded. The value read from BSEC_FVR10 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 10 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 10 was last reloaded. The value read from BSEC_FVR10 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF10_B_0x0 = 0;
        /** @brief Last reload of fuse word 10 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF10_B_0x1 = 1;

    /** @brief Valid flag for shadow register 11 */
    using BSEC_OTPVLDR0_VLDF11 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 11 was last reloaded. The value read from BSEC_FVR11 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 11 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 11 was last reloaded. The value read from BSEC_FVR11 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF11_B_0x0 = 0;
        /** @brief Last reload of fuse word 11 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF11_B_0x1 = 1;

    /** @brief Valid flag for shadow register 12 */
    using BSEC_OTPVLDR0_VLDF12 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 12 was last reloaded. The value read from BSEC_FVR12 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 12 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 12 was last reloaded. The value read from BSEC_FVR12 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF12_B_0x0 = 0;
        /** @brief Last reload of fuse word 12 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF12_B_0x1 = 1;

    /** @brief Valid flag for shadow register 13 */
    using BSEC_OTPVLDR0_VLDF13 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 13 was last reloaded. The value read from BSEC_FVR13 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 13 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 13 was last reloaded. The value read from BSEC_FVR13 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF13_B_0x0 = 0;
        /** @brief Last reload of fuse word 13 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF13_B_0x1 = 1;

    /** @brief Valid flag for shadow register 14 */
    using BSEC_OTPVLDR0_VLDF14 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 14 was last reloaded. The value read from BSEC_FVR14 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 14 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 14 was last reloaded. The value read from BSEC_FVR14 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF14_B_0x0 = 0;
        /** @brief Last reload of fuse word 14 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF14_B_0x1 = 1;

    /** @brief Valid flag for shadow register 15 */
    using BSEC_OTPVLDR0_VLDF15 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 15 was last reloaded. The value read from BSEC_FVR15 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 15 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 15 was last reloaded. The value read from BSEC_FVR15 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF15_B_0x0 = 0;
        /** @brief Last reload of fuse word 15 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF15_B_0x1 = 1;

    /** @brief Valid flag for shadow register 16 */
    using BSEC_OTPVLDR0_VLDF16 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 16 was last reloaded. The value read from BSEC_FVR16 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 16 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 16 was last reloaded. The value read from BSEC_FVR16 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF16_B_0x0 = 0;
        /** @brief Last reload of fuse word 16 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF16_B_0x1 = 1;

    /** @brief Valid flag for shadow register 17 */
    using BSEC_OTPVLDR0_VLDF17 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 17 was last reloaded. The value read from BSEC_FVR17 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 17 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 17 was last reloaded. The value read from BSEC_FVR17 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF17_B_0x0 = 0;
        /** @brief Last reload of fuse word 17 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF17_B_0x1 = 1;

    /** @brief Valid flag for shadow register 18 */
    using BSEC_OTPVLDR0_VLDF18 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 18 was last reloaded. The value read from BSEC_FVR18 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 18 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 18 was last reloaded. The value read from BSEC_FVR18 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF18_B_0x0 = 0;
        /** @brief Last reload of fuse word 18 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF18_B_0x1 = 1;

    /** @brief Valid flag for shadow register 19 */
    using BSEC_OTPVLDR0_VLDF19 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 19 was last reloaded. The value read from BSEC_FVR19 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 19 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 19 was last reloaded. The value read from BSEC_FVR19 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF19_B_0x0 = 0;
        /** @brief Last reload of fuse word 19 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF19_B_0x1 = 1;

    /** @brief Valid flag for shadow register 20 */
    using BSEC_OTPVLDR0_VLDF20 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 20 was last reloaded. The value read from BSEC_FVR20 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 20 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 20 was last reloaded. The value read from BSEC_FVR20 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF20_B_0x0 = 0;
        /** @brief Last reload of fuse word 20 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF20_B_0x1 = 1;

    /** @brief Valid flag for shadow register 21 */
    using BSEC_OTPVLDR0_VLDF21 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 21 was last reloaded. The value read from BSEC_FVR21 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 21 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 21 was last reloaded. The value read from BSEC_FVR21 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF21_B_0x0 = 0;
        /** @brief Last reload of fuse word 21 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF21_B_0x1 = 1;

    /** @brief Valid flag for shadow register 22 */
    using BSEC_OTPVLDR0_VLDF22 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 22 was last reloaded. The value read from BSEC_FVR22 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 22 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 22 was last reloaded. The value read from BSEC_FVR22 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF22_B_0x0 = 0;
        /** @brief Last reload of fuse word 22 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF22_B_0x1 = 1;

    /** @brief Valid flag for shadow register 23 */
    using BSEC_OTPVLDR0_VLDF23 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 23 was last reloaded. The value read from BSEC_FVR23 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 23 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 23 was last reloaded. The value read from BSEC_FVR23 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF23_B_0x0 = 0;
        /** @brief Last reload of fuse word 23 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF23_B_0x1 = 1;

    /** @brief Valid flag for shadow register 24 */
    using BSEC_OTPVLDR0_VLDF24 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 24 was last reloaded. The value read from BSEC_FVR24 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 24 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 24 was last reloaded. The value read from BSEC_FVR24 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF24_B_0x0 = 0;
        /** @brief Last reload of fuse word 24 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF24_B_0x1 = 1;

    /** @brief Valid flag for shadow register 25 */
    using BSEC_OTPVLDR0_VLDF25 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 25 was last reloaded. The value read from BSEC_FVR25 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 25 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 25 was last reloaded. The value read from BSEC_FVR25 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF25_B_0x0 = 0;
        /** @brief Last reload of fuse word 25 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF25_B_0x1 = 1;

    /** @brief Valid flag for shadow register 26 */
    using BSEC_OTPVLDR0_VLDF26 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 26 was last reloaded. The value read from BSEC_FVR26 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 26 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 26 was last reloaded. The value read from BSEC_FVR26 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF26_B_0x0 = 0;
        /** @brief Last reload of fuse word 26 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF26_B_0x1 = 1;

    /** @brief Valid flag for shadow register 27 */
    using BSEC_OTPVLDR0_VLDF27 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 27 was last reloaded. The value read from BSEC_FVR27 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 27 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 27 was last reloaded. The value read from BSEC_FVR27 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF27_B_0x0 = 0;
        /** @brief Last reload of fuse word 27 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF27_B_0x1 = 1;

    /** @brief Valid flag for shadow register 28 */
    using BSEC_OTPVLDR0_VLDF28 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 28 was last reloaded. The value read from BSEC_FVR28 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 28 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 28 was last reloaded. The value read from BSEC_FVR28 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF28_B_0x0 = 0;
        /** @brief Last reload of fuse word 28 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF28_B_0x1 = 1;

    /** @brief Valid flag for shadow register 29 */
    using BSEC_OTPVLDR0_VLDF29 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 29 was last reloaded. The value read from BSEC_FVR29 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 29 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 29 was last reloaded. The value read from BSEC_FVR29 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF29_B_0x0 = 0;
        /** @brief Last reload of fuse word 29 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF29_B_0x1 = 1;

    /** @brief Valid flag for shadow register 30 */
    using BSEC_OTPVLDR0_VLDF30 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 30 was last reloaded. The value read from BSEC_FVR30 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 30 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 30 was last reloaded. The value read from BSEC_FVR30 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF30_B_0x0 = 0;
        /** @brief Last reload of fuse word 30 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF30_B_0x1 = 1;

    /** @brief Valid flag for shadow register 31 */
    using BSEC_OTPVLDR0_VLDF31 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 31 was last reloaded. The value read from BSEC_FVR31 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 31 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 31 was last reloaded. The value read from BSEC_FVR31 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF31_B_0x0 = 0;
        /** @brief Last reload of fuse word 31 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR0_VLDF31_B_0x1 = 1;

    /** @brief BSEC OTP valid register 1 */
    using BSEC_OTPVLDR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8C4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 32 */
    using BSEC_OTPVLDR1_VLDF32 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 32 was last reloaded. The value read from BSEC_FVR32 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 32 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 32 was last reloaded. The value read from BSEC_FVR32 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF32_B_0x0 = 0;
        /** @brief Last reload of fuse word 32 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF32_B_0x1 = 1;

    /** @brief Valid flag for shadow register 33 */
    using BSEC_OTPVLDR1_VLDF33 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 33 was last reloaded. The value read from BSEC_FVR33 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 33 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 33 was last reloaded. The value read from BSEC_FVR33 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF33_B_0x0 = 0;
        /** @brief Last reload of fuse word 33 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF33_B_0x1 = 1;

    /** @brief Valid flag for shadow register 34 */
    using BSEC_OTPVLDR1_VLDF34 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 34 was last reloaded. The value read from BSEC_FVR34 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 34 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 34 was last reloaded. The value read from BSEC_FVR34 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF34_B_0x0 = 0;
        /** @brief Last reload of fuse word 34 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF34_B_0x1 = 1;

    /** @brief Valid flag for shadow register 35 */
    using BSEC_OTPVLDR1_VLDF35 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 35 was last reloaded. The value read from BSEC_FVR35 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 35 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 35 was last reloaded. The value read from BSEC_FVR35 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF35_B_0x0 = 0;
        /** @brief Last reload of fuse word 35 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF35_B_0x1 = 1;

    /** @brief Valid flag for shadow register 36 */
    using BSEC_OTPVLDR1_VLDF36 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 36 was last reloaded. The value read from BSEC_FVR36 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 36 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 36 was last reloaded. The value read from BSEC_FVR36 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF36_B_0x0 = 0;
        /** @brief Last reload of fuse word 36 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF36_B_0x1 = 1;

    /** @brief Valid flag for shadow register 37 */
    using BSEC_OTPVLDR1_VLDF37 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 37 was last reloaded. The value read from BSEC_FVR37 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 37 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 37 was last reloaded. The value read from BSEC_FVR37 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF37_B_0x0 = 0;
        /** @brief Last reload of fuse word 37 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF37_B_0x1 = 1;

    /** @brief Valid flag for shadow register 38 */
    using BSEC_OTPVLDR1_VLDF38 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 38 was last reloaded. The value read from BSEC_FVR38 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 38 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 38 was last reloaded. The value read from BSEC_FVR38 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF38_B_0x0 = 0;
        /** @brief Last reload of fuse word 38 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF38_B_0x1 = 1;

    /** @brief Valid flag for shadow register 39 */
    using BSEC_OTPVLDR1_VLDF39 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 39 was last reloaded. The value read from BSEC_FVR39 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 39 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 39 was last reloaded. The value read from BSEC_FVR39 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF39_B_0x0 = 0;
        /** @brief Last reload of fuse word 39 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF39_B_0x1 = 1;

    /** @brief Valid flag for shadow register 40 */
    using BSEC_OTPVLDR1_VLDF40 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 40 was last reloaded. The value read from BSEC_FVR40 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 40 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 40 was last reloaded. The value read from BSEC_FVR40 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF40_B_0x0 = 0;
        /** @brief Last reload of fuse word 40 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF40_B_0x1 = 1;

    /** @brief Valid flag for shadow register 41 */
    using BSEC_OTPVLDR1_VLDF41 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 41 was last reloaded. The value read from BSEC_FVR41 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 41 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 41 was last reloaded. The value read from BSEC_FVR41 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF41_B_0x0 = 0;
        /** @brief Last reload of fuse word 41 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF41_B_0x1 = 1;

    /** @brief Valid flag for shadow register 42 */
    using BSEC_OTPVLDR1_VLDF42 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 42 was last reloaded. The value read from BSEC_FVR42 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 42 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 42 was last reloaded. The value read from BSEC_FVR42 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF42_B_0x0 = 0;
        /** @brief Last reload of fuse word 42 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF42_B_0x1 = 1;

    /** @brief Valid flag for shadow register 43 */
    using BSEC_OTPVLDR1_VLDF43 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 43 was last reloaded. The value read from BSEC_FVR43 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 43 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 43 was last reloaded. The value read from BSEC_FVR43 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF43_B_0x0 = 0;
        /** @brief Last reload of fuse word 43 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF43_B_0x1 = 1;

    /** @brief Valid flag for shadow register 44 */
    using BSEC_OTPVLDR1_VLDF44 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 44 was last reloaded. The value read from BSEC_FVR44 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 44 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 44 was last reloaded. The value read from BSEC_FVR44 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF44_B_0x0 = 0;
        /** @brief Last reload of fuse word 44 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF44_B_0x1 = 1;

    /** @brief Valid flag for shadow register 45 */
    using BSEC_OTPVLDR1_VLDF45 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 45 was last reloaded. The value read from BSEC_FVR45 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 45 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 45 was last reloaded. The value read from BSEC_FVR45 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF45_B_0x0 = 0;
        /** @brief Last reload of fuse word 45 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF45_B_0x1 = 1;

    /** @brief Valid flag for shadow register 46 */
    using BSEC_OTPVLDR1_VLDF46 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 46 was last reloaded. The value read from BSEC_FVR46 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 46 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 46 was last reloaded. The value read from BSEC_FVR46 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF46_B_0x0 = 0;
        /** @brief Last reload of fuse word 46 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF46_B_0x1 = 1;

    /** @brief Valid flag for shadow register 47 */
    using BSEC_OTPVLDR1_VLDF47 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 47 was last reloaded. The value read from BSEC_FVR47 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 47 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 47 was last reloaded. The value read from BSEC_FVR47 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF47_B_0x0 = 0;
        /** @brief Last reload of fuse word 47 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF47_B_0x1 = 1;

    /** @brief Valid flag for shadow register 48 */
    using BSEC_OTPVLDR1_VLDF48 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 48 was last reloaded. The value read from BSEC_FVR48 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 48 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 48 was last reloaded. The value read from BSEC_FVR48 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF48_B_0x0 = 0;
        /** @brief Last reload of fuse word 48 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF48_B_0x1 = 1;

    /** @brief Valid flag for shadow register 49 */
    using BSEC_OTPVLDR1_VLDF49 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 49 was last reloaded. The value read from BSEC_FVR49 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 49 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 49 was last reloaded. The value read from BSEC_FVR49 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF49_B_0x0 = 0;
        /** @brief Last reload of fuse word 49 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF49_B_0x1 = 1;

    /** @brief Valid flag for shadow register 50 */
    using BSEC_OTPVLDR1_VLDF50 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 50 was last reloaded. The value read from BSEC_FVR50 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 50 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 50 was last reloaded. The value read from BSEC_FVR50 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF50_B_0x0 = 0;
        /** @brief Last reload of fuse word 50 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF50_B_0x1 = 1;

    /** @brief Valid flag for shadow register 51 */
    using BSEC_OTPVLDR1_VLDF51 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 51 was last reloaded. The value read from BSEC_FVR51 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 51 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 51 was last reloaded. The value read from BSEC_FVR51 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF51_B_0x0 = 0;
        /** @brief Last reload of fuse word 51 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF51_B_0x1 = 1;

    /** @brief Valid flag for shadow register 52 */
    using BSEC_OTPVLDR1_VLDF52 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 52 was last reloaded. The value read from BSEC_FVR52 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 52 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 52 was last reloaded. The value read from BSEC_FVR52 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF52_B_0x0 = 0;
        /** @brief Last reload of fuse word 52 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF52_B_0x1 = 1;

    /** @brief Valid flag for shadow register 53 */
    using BSEC_OTPVLDR1_VLDF53 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 53 was last reloaded. The value read from BSEC_FVR53 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 53 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 53 was last reloaded. The value read from BSEC_FVR53 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF53_B_0x0 = 0;
        /** @brief Last reload of fuse word 53 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF53_B_0x1 = 1;

    /** @brief Valid flag for shadow register 54 */
    using BSEC_OTPVLDR1_VLDF54 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 54 was last reloaded. The value read from BSEC_FVR54 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 54 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 54 was last reloaded. The value read from BSEC_FVR54 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF54_B_0x0 = 0;
        /** @brief Last reload of fuse word 54 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF54_B_0x1 = 1;

    /** @brief Valid flag for shadow register 55 */
    using BSEC_OTPVLDR1_VLDF55 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 55 was last reloaded. The value read from BSEC_FVR55 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 55 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 55 was last reloaded. The value read from BSEC_FVR55 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF55_B_0x0 = 0;
        /** @brief Last reload of fuse word 55 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF55_B_0x1 = 1;

    /** @brief Valid flag for shadow register 56 */
    using BSEC_OTPVLDR1_VLDF56 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 56 was last reloaded. The value read from BSEC_FVR56 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 56 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 56 was last reloaded. The value read from BSEC_FVR56 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF56_B_0x0 = 0;
        /** @brief Last reload of fuse word 56 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF56_B_0x1 = 1;

    /** @brief Valid flag for shadow register 57 */
    using BSEC_OTPVLDR1_VLDF57 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 57 was last reloaded. The value read from BSEC_FVR57 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 57 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 57 was last reloaded. The value read from BSEC_FVR57 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF57_B_0x0 = 0;
        /** @brief Last reload of fuse word 57 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF57_B_0x1 = 1;

    /** @brief Valid flag for shadow register 58 */
    using BSEC_OTPVLDR1_VLDF58 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 58 was last reloaded. The value read from BSEC_FVR58 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 58 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 58 was last reloaded. The value read from BSEC_FVR58 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF58_B_0x0 = 0;
        /** @brief Last reload of fuse word 58 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF58_B_0x1 = 1;

    /** @brief Valid flag for shadow register 59 */
    using BSEC_OTPVLDR1_VLDF59 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 59 was last reloaded. The value read from BSEC_FVR59 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 59 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 59 was last reloaded. The value read from BSEC_FVR59 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF59_B_0x0 = 0;
        /** @brief Last reload of fuse word 59 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF59_B_0x1 = 1;

    /** @brief Valid flag for shadow register 60 */
    using BSEC_OTPVLDR1_VLDF60 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 60 was last reloaded. The value read from BSEC_FVR60 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 60 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 60 was last reloaded. The value read from BSEC_FVR60 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF60_B_0x0 = 0;
        /** @brief Last reload of fuse word 60 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF60_B_0x1 = 1;

    /** @brief Valid flag for shadow register 61 */
    using BSEC_OTPVLDR1_VLDF61 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 61 was last reloaded. The value read from BSEC_FVR61 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 61 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 61 was last reloaded. The value read from BSEC_FVR61 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF61_B_0x0 = 0;
        /** @brief Last reload of fuse word 61 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF61_B_0x1 = 1;

    /** @brief Valid flag for shadow register 62 */
    using BSEC_OTPVLDR1_VLDF62 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 62 was last reloaded. The value read from BSEC_FVR62 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 62 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 62 was last reloaded. The value read from BSEC_FVR62 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF62_B_0x0 = 0;
        /** @brief Last reload of fuse word 62 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF62_B_0x1 = 1;

    /** @brief Valid flag for shadow register 63 */
    using BSEC_OTPVLDR1_VLDF63 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 63 was last reloaded. The value read from BSEC_FVR63 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 63 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 63 was last reloaded. The value read from BSEC_FVR63 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF63_B_0x0 = 0;
        /** @brief Last reload of fuse word 63 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR1_VLDF63_B_0x1 = 1;

    /** @brief BSEC OTP valid register 2 */
    using BSEC_OTPVLDR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8C8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 64 */
    using BSEC_OTPVLDR2_VLDF64 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 64 was last reloaded. The value read from BSEC_FVR64 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 64 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 64 was last reloaded. The value read from BSEC_FVR64 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF64_B_0x0 = 0;
        /** @brief Last reload of fuse word 64 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF64_B_0x1 = 1;

    /** @brief Valid flag for shadow register 65 */
    using BSEC_OTPVLDR2_VLDF65 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 65 was last reloaded. The value read from BSEC_FVR65 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 65 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 65 was last reloaded. The value read from BSEC_FVR65 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF65_B_0x0 = 0;
        /** @brief Last reload of fuse word 65 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF65_B_0x1 = 1;

    /** @brief Valid flag for shadow register 66 */
    using BSEC_OTPVLDR2_VLDF66 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 66 was last reloaded. The value read from BSEC_FVR66 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 66 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 66 was last reloaded. The value read from BSEC_FVR66 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF66_B_0x0 = 0;
        /** @brief Last reload of fuse word 66 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF66_B_0x1 = 1;

    /** @brief Valid flag for shadow register 67 */
    using BSEC_OTPVLDR2_VLDF67 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 67 was last reloaded. The value read from BSEC_FVR67 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 67 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 67 was last reloaded. The value read from BSEC_FVR67 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF67_B_0x0 = 0;
        /** @brief Last reload of fuse word 67 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF67_B_0x1 = 1;

    /** @brief Valid flag for shadow register 68 */
    using BSEC_OTPVLDR2_VLDF68 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 68 was last reloaded. The value read from BSEC_FVR68 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 68 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 68 was last reloaded. The value read from BSEC_FVR68 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF68_B_0x0 = 0;
        /** @brief Last reload of fuse word 68 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF68_B_0x1 = 1;

    /** @brief Valid flag for shadow register 69 */
    using BSEC_OTPVLDR2_VLDF69 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 69 was last reloaded. The value read from BSEC_FVR69 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 69 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 69 was last reloaded. The value read from BSEC_FVR69 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF69_B_0x0 = 0;
        /** @brief Last reload of fuse word 69 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF69_B_0x1 = 1;

    /** @brief Valid flag for shadow register 70 */
    using BSEC_OTPVLDR2_VLDF70 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 70 was last reloaded. The value read from BSEC_FVR70 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 70 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 70 was last reloaded. The value read from BSEC_FVR70 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF70_B_0x0 = 0;
        /** @brief Last reload of fuse word 70 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF70_B_0x1 = 1;

    /** @brief Valid flag for shadow register 71 */
    using BSEC_OTPVLDR2_VLDF71 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 71 was last reloaded. The value read from BSEC_FVR71 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 71 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 71 was last reloaded. The value read from BSEC_FVR71 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF71_B_0x0 = 0;
        /** @brief Last reload of fuse word 71 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF71_B_0x1 = 1;

    /** @brief Valid flag for shadow register 72 */
    using BSEC_OTPVLDR2_VLDF72 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 72 was last reloaded. The value read from BSEC_FVR72 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 72 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 72 was last reloaded. The value read from BSEC_FVR72 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF72_B_0x0 = 0;
        /** @brief Last reload of fuse word 72 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF72_B_0x1 = 1;

    /** @brief Valid flag for shadow register 73 */
    using BSEC_OTPVLDR2_VLDF73 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 73 was last reloaded. The value read from BSEC_FVR73 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 73 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 73 was last reloaded. The value read from BSEC_FVR73 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF73_B_0x0 = 0;
        /** @brief Last reload of fuse word 73 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF73_B_0x1 = 1;

    /** @brief Valid flag for shadow register 74 */
    using BSEC_OTPVLDR2_VLDF74 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 74 was last reloaded. The value read from BSEC_FVR74 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 74 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 74 was last reloaded. The value read from BSEC_FVR74 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF74_B_0x0 = 0;
        /** @brief Last reload of fuse word 74 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF74_B_0x1 = 1;

    /** @brief Valid flag for shadow register 75 */
    using BSEC_OTPVLDR2_VLDF75 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 75 was last reloaded. The value read from BSEC_FVR75 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 75 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 75 was last reloaded. The value read from BSEC_FVR75 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF75_B_0x0 = 0;
        /** @brief Last reload of fuse word 75 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF75_B_0x1 = 1;

    /** @brief Valid flag for shadow register 76 */
    using BSEC_OTPVLDR2_VLDF76 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 76 was last reloaded. The value read from BSEC_FVR76 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 76 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 76 was last reloaded. The value read from BSEC_FVR76 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF76_B_0x0 = 0;
        /** @brief Last reload of fuse word 76 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF76_B_0x1 = 1;

    /** @brief Valid flag for shadow register 77 */
    using BSEC_OTPVLDR2_VLDF77 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 77 was last reloaded. The value read from BSEC_FVR77 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 77 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 77 was last reloaded. The value read from BSEC_FVR77 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF77_B_0x0 = 0;
        /** @brief Last reload of fuse word 77 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF77_B_0x1 = 1;

    /** @brief Valid flag for shadow register 78 */
    using BSEC_OTPVLDR2_VLDF78 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 78 was last reloaded. The value read from BSEC_FVR78 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 78 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 78 was last reloaded. The value read from BSEC_FVR78 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF78_B_0x0 = 0;
        /** @brief Last reload of fuse word 78 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF78_B_0x1 = 1;

    /** @brief Valid flag for shadow register 79 */
    using BSEC_OTPVLDR2_VLDF79 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 79 was last reloaded. The value read from BSEC_FVR79 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 79 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 79 was last reloaded. The value read from BSEC_FVR79 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF79_B_0x0 = 0;
        /** @brief Last reload of fuse word 79 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF79_B_0x1 = 1;

    /** @brief Valid flag for shadow register 80 */
    using BSEC_OTPVLDR2_VLDF80 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 80 was last reloaded. The value read from BSEC_FVR80 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 80 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 80 was last reloaded. The value read from BSEC_FVR80 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF80_B_0x0 = 0;
        /** @brief Last reload of fuse word 80 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF80_B_0x1 = 1;

    /** @brief Valid flag for shadow register 81 */
    using BSEC_OTPVLDR2_VLDF81 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 81 was last reloaded. The value read from BSEC_FVR81 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 81 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 81 was last reloaded. The value read from BSEC_FVR81 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF81_B_0x0 = 0;
        /** @brief Last reload of fuse word 81 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF81_B_0x1 = 1;

    /** @brief Valid flag for shadow register 82 */
    using BSEC_OTPVLDR2_VLDF82 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 82 was last reloaded. The value read from BSEC_FVR82 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 82 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 82 was last reloaded. The value read from BSEC_FVR82 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF82_B_0x0 = 0;
        /** @brief Last reload of fuse word 82 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF82_B_0x1 = 1;

    /** @brief Valid flag for shadow register 83 */
    using BSEC_OTPVLDR2_VLDF83 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 83 was last reloaded. The value read from BSEC_FVR83 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 83 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 83 was last reloaded. The value read from BSEC_FVR83 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF83_B_0x0 = 0;
        /** @brief Last reload of fuse word 83 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF83_B_0x1 = 1;

    /** @brief Valid flag for shadow register 84 */
    using BSEC_OTPVLDR2_VLDF84 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 84 was last reloaded. The value read from BSEC_FVR84 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 84 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 84 was last reloaded. The value read from BSEC_FVR84 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF84_B_0x0 = 0;
        /** @brief Last reload of fuse word 84 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF84_B_0x1 = 1;

    /** @brief Valid flag for shadow register 85 */
    using BSEC_OTPVLDR2_VLDF85 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 85 was last reloaded. The value read from BSEC_FVR85 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 85 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 85 was last reloaded. The value read from BSEC_FVR85 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF85_B_0x0 = 0;
        /** @brief Last reload of fuse word 85 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF85_B_0x1 = 1;

    /** @brief Valid flag for shadow register 86 */
    using BSEC_OTPVLDR2_VLDF86 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 86 was last reloaded. The value read from BSEC_FVR86 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 86 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 86 was last reloaded. The value read from BSEC_FVR86 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF86_B_0x0 = 0;
        /** @brief Last reload of fuse word 86 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF86_B_0x1 = 1;

    /** @brief Valid flag for shadow register 87 */
    using BSEC_OTPVLDR2_VLDF87 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 87 was last reloaded. The value read from BSEC_FVR87 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 87 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 87 was last reloaded. The value read from BSEC_FVR87 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF87_B_0x0 = 0;
        /** @brief Last reload of fuse word 87 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF87_B_0x1 = 1;

    /** @brief Valid flag for shadow register 88 */
    using BSEC_OTPVLDR2_VLDF88 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 88 was last reloaded. The value read from BSEC_FVR88 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 88 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 88 was last reloaded. The value read from BSEC_FVR88 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF88_B_0x0 = 0;
        /** @brief Last reload of fuse word 88 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF88_B_0x1 = 1;

    /** @brief Valid flag for shadow register 89 */
    using BSEC_OTPVLDR2_VLDF89 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 89 was last reloaded. The value read from BSEC_FVR89 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 89 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 89 was last reloaded. The value read from BSEC_FVR89 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF89_B_0x0 = 0;
        /** @brief Last reload of fuse word 89 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF89_B_0x1 = 1;

    /** @brief Valid flag for shadow register 90 */
    using BSEC_OTPVLDR2_VLDF90 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 90 was last reloaded. The value read from BSEC_FVR90 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 90 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 90 was last reloaded. The value read from BSEC_FVR90 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF90_B_0x0 = 0;
        /** @brief Last reload of fuse word 90 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF90_B_0x1 = 1;

    /** @brief Valid flag for shadow register 91 */
    using BSEC_OTPVLDR2_VLDF91 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 91 was last reloaded. The value read from BSEC_FVR91 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 91 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 91 was last reloaded. The value read from BSEC_FVR91 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF91_B_0x0 = 0;
        /** @brief Last reload of fuse word 91 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF91_B_0x1 = 1;

    /** @brief Valid flag for shadow register 92 */
    using BSEC_OTPVLDR2_VLDF92 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 92 was last reloaded. The value read from BSEC_FVR92 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 92 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 92 was last reloaded. The value read from BSEC_FVR92 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF92_B_0x0 = 0;
        /** @brief Last reload of fuse word 92 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF92_B_0x1 = 1;

    /** @brief Valid flag for shadow register 93 */
    using BSEC_OTPVLDR2_VLDF93 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 93 was last reloaded. The value read from BSEC_FVR93 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 93 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 93 was last reloaded. The value read from BSEC_FVR93 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF93_B_0x0 = 0;
        /** @brief Last reload of fuse word 93 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF93_B_0x1 = 1;

    /** @brief Valid flag for shadow register 94 */
    using BSEC_OTPVLDR2_VLDF94 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 94 was last reloaded. The value read from BSEC_FVR94 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 94 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 94 was last reloaded. The value read from BSEC_FVR94 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF94_B_0x0 = 0;
        /** @brief Last reload of fuse word 94 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF94_B_0x1 = 1;

    /** @brief Valid flag for shadow register 95 */
    using BSEC_OTPVLDR2_VLDF95 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 95 was last reloaded. The value read from BSEC_FVR95 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 95 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 95 was last reloaded. The value read from BSEC_FVR95 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF95_B_0x0 = 0;
        /** @brief Last reload of fuse word 95 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR2_VLDF95_B_0x1 = 1;

    /** @brief BSEC OTP valid register 3 */
    using BSEC_OTPVLDR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8CC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 96 */
    using BSEC_OTPVLDR3_VLDF96 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 96 was last reloaded. The value read from BSEC_FVR96 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 96 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 96 was last reloaded. The value read from BSEC_FVR96 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF96_B_0x0 = 0;
        /** @brief Last reload of fuse word 96 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF96_B_0x1 = 1;

    /** @brief Valid flag for shadow register 97 */
    using BSEC_OTPVLDR3_VLDF97 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 97 was last reloaded. The value read from BSEC_FVR97 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 97 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 97 was last reloaded. The value read from BSEC_FVR97 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF97_B_0x0 = 0;
        /** @brief Last reload of fuse word 97 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF97_B_0x1 = 1;

    /** @brief Valid flag for shadow register 98 */
    using BSEC_OTPVLDR3_VLDF98 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 98 was last reloaded. The value read from BSEC_FVR98 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 98 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 98 was last reloaded. The value read from BSEC_FVR98 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF98_B_0x0 = 0;
        /** @brief Last reload of fuse word 98 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF98_B_0x1 = 1;

    /** @brief Valid flag for shadow register 99 */
    using BSEC_OTPVLDR3_VLDF99 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 99 was last reloaded. The value read from BSEC_FVR99 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 99 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 99 was last reloaded. The value read from BSEC_FVR99 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF99_B_0x0 = 0;
        /** @brief Last reload of fuse word 99 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF99_B_0x1 = 1;

    /** @brief Valid flag for shadow register 100 */
    using BSEC_OTPVLDR3_VLDF100 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 100 was last reloaded. The value read from BSEC_FVR100 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 100 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 100 was last reloaded. The value read from BSEC_FVR100 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF100_B_0x0 = 0;
        /** @brief Last reload of fuse word 100 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF100_B_0x1 = 1;

    /** @brief Valid flag for shadow register 101 */
    using BSEC_OTPVLDR3_VLDF101 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 101 was last reloaded. The value read from BSEC_FVR101 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 101 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 101 was last reloaded. The value read from BSEC_FVR101 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF101_B_0x0 = 0;
        /** @brief Last reload of fuse word 101 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF101_B_0x1 = 1;

    /** @brief Valid flag for shadow register 102 */
    using BSEC_OTPVLDR3_VLDF102 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 102 was last reloaded. The value read from BSEC_FVR102 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 102 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 102 was last reloaded. The value read from BSEC_FVR102 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF102_B_0x0 = 0;
        /** @brief Last reload of fuse word 102 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF102_B_0x1 = 1;

    /** @brief Valid flag for shadow register 103 */
    using BSEC_OTPVLDR3_VLDF103 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 103 was last reloaded. The value read from BSEC_FVR103 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 103 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 103 was last reloaded. The value read from BSEC_FVR103 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF103_B_0x0 = 0;
        /** @brief Last reload of fuse word 103 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF103_B_0x1 = 1;

    /** @brief Valid flag for shadow register 104 */
    using BSEC_OTPVLDR3_VLDF104 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 104 was last reloaded. The value read from BSEC_FVR104 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 104 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 104 was last reloaded. The value read from BSEC_FVR104 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF104_B_0x0 = 0;
        /** @brief Last reload of fuse word 104 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF104_B_0x1 = 1;

    /** @brief Valid flag for shadow register 105 */
    using BSEC_OTPVLDR3_VLDF105 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 105 was last reloaded. The value read from BSEC_FVR105 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 105 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 105 was last reloaded. The value read from BSEC_FVR105 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF105_B_0x0 = 0;
        /** @brief Last reload of fuse word 105 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF105_B_0x1 = 1;

    /** @brief Valid flag for shadow register 106 */
    using BSEC_OTPVLDR3_VLDF106 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 106 was last reloaded. The value read from BSEC_FVR106 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 106 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 106 was last reloaded. The value read from BSEC_FVR106 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF106_B_0x0 = 0;
        /** @brief Last reload of fuse word 106 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF106_B_0x1 = 1;

    /** @brief Valid flag for shadow register 107 */
    using BSEC_OTPVLDR3_VLDF107 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 107 was last reloaded. The value read from BSEC_FVR107 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 107 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 107 was last reloaded. The value read from BSEC_FVR107 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF107_B_0x0 = 0;
        /** @brief Last reload of fuse word 107 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF107_B_0x1 = 1;

    /** @brief Valid flag for shadow register 108 */
    using BSEC_OTPVLDR3_VLDF108 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 108 was last reloaded. The value read from BSEC_FVR108 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 108 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 108 was last reloaded. The value read from BSEC_FVR108 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF108_B_0x0 = 0;
        /** @brief Last reload of fuse word 108 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF108_B_0x1 = 1;

    /** @brief Valid flag for shadow register 109 */
    using BSEC_OTPVLDR3_VLDF109 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 109 was last reloaded. The value read from BSEC_FVR109 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 109 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 109 was last reloaded. The value read from BSEC_FVR109 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF109_B_0x0 = 0;
        /** @brief Last reload of fuse word 109 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF109_B_0x1 = 1;

    /** @brief Valid flag for shadow register 110 */
    using BSEC_OTPVLDR3_VLDF110 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 110 was last reloaded. The value read from BSEC_FVR110 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 110 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 110 was last reloaded. The value read from BSEC_FVR110 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF110_B_0x0 = 0;
        /** @brief Last reload of fuse word 110 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF110_B_0x1 = 1;

    /** @brief Valid flag for shadow register 111 */
    using BSEC_OTPVLDR3_VLDF111 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 111 was last reloaded. The value read from BSEC_FVR111 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 111 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 111 was last reloaded. The value read from BSEC_FVR111 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF111_B_0x0 = 0;
        /** @brief Last reload of fuse word 111 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF111_B_0x1 = 1;

    /** @brief Valid flag for shadow register 112 */
    using BSEC_OTPVLDR3_VLDF112 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 112 was last reloaded. The value read from BSEC_FVR112 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 112 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 112 was last reloaded. The value read from BSEC_FVR112 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF112_B_0x0 = 0;
        /** @brief Last reload of fuse word 112 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF112_B_0x1 = 1;

    /** @brief Valid flag for shadow register 113 */
    using BSEC_OTPVLDR3_VLDF113 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 113 was last reloaded. The value read from BSEC_FVR113 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 113 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 113 was last reloaded. The value read from BSEC_FVR113 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF113_B_0x0 = 0;
        /** @brief Last reload of fuse word 113 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF113_B_0x1 = 1;

    /** @brief Valid flag for shadow register 114 */
    using BSEC_OTPVLDR3_VLDF114 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 114 was last reloaded. The value read from BSEC_FVR114 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 114 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 114 was last reloaded. The value read from BSEC_FVR114 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF114_B_0x0 = 0;
        /** @brief Last reload of fuse word 114 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF114_B_0x1 = 1;

    /** @brief Valid flag for shadow register 115 */
    using BSEC_OTPVLDR3_VLDF115 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 115 was last reloaded. The value read from BSEC_FVR115 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 115 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 115 was last reloaded. The value read from BSEC_FVR115 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF115_B_0x0 = 0;
        /** @brief Last reload of fuse word 115 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF115_B_0x1 = 1;

    /** @brief Valid flag for shadow register 116 */
    using BSEC_OTPVLDR3_VLDF116 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 116 was last reloaded. The value read from BSEC_FVR116 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 116 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 116 was last reloaded. The value read from BSEC_FVR116 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF116_B_0x0 = 0;
        /** @brief Last reload of fuse word 116 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF116_B_0x1 = 1;

    /** @brief Valid flag for shadow register 117 */
    using BSEC_OTPVLDR3_VLDF117 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 117 was last reloaded. The value read from BSEC_FVR117 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 117 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 117 was last reloaded. The value read from BSEC_FVR117 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF117_B_0x0 = 0;
        /** @brief Last reload of fuse word 117 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF117_B_0x1 = 1;

    /** @brief Valid flag for shadow register 118 */
    using BSEC_OTPVLDR3_VLDF118 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 118 was last reloaded. The value read from BSEC_FVR118 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 118 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 118 was last reloaded. The value read from BSEC_FVR118 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF118_B_0x0 = 0;
        /** @brief Last reload of fuse word 118 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF118_B_0x1 = 1;

    /** @brief Valid flag for shadow register 119 */
    using BSEC_OTPVLDR3_VLDF119 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 119 was last reloaded. The value read from BSEC_FVR119 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 119 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 119 was last reloaded. The value read from BSEC_FVR119 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF119_B_0x0 = 0;
        /** @brief Last reload of fuse word 119 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF119_B_0x1 = 1;

    /** @brief Valid flag for shadow register 120 */
    using BSEC_OTPVLDR3_VLDF120 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 120 was last reloaded. The value read from BSEC_FVR120 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 120 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 120 was last reloaded. The value read from BSEC_FVR120 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF120_B_0x0 = 0;
        /** @brief Last reload of fuse word 120 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF120_B_0x1 = 1;

    /** @brief Valid flag for shadow register 121 */
    using BSEC_OTPVLDR3_VLDF121 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 121 was last reloaded. The value read from BSEC_FVR121 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 121 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 121 was last reloaded. The value read from BSEC_FVR121 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF121_B_0x0 = 0;
        /** @brief Last reload of fuse word 121 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF121_B_0x1 = 1;

    /** @brief Valid flag for shadow register 122 */
    using BSEC_OTPVLDR3_VLDF122 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 122 was last reloaded. The value read from BSEC_FVR122 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 122 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 122 was last reloaded. The value read from BSEC_FVR122 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF122_B_0x0 = 0;
        /** @brief Last reload of fuse word 122 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF122_B_0x1 = 1;

    /** @brief Valid flag for shadow register 123 */
    using BSEC_OTPVLDR3_VLDF123 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 123 was last reloaded. The value read from BSEC_FVR123 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 123 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 123 was last reloaded. The value read from BSEC_FVR123 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF123_B_0x0 = 0;
        /** @brief Last reload of fuse word 123 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF123_B_0x1 = 1;

    /** @brief Valid flag for shadow register 124 */
    using BSEC_OTPVLDR3_VLDF124 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 124 was last reloaded. The value read from BSEC_FVR124 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 124 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 124 was last reloaded. The value read from BSEC_FVR124 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF124_B_0x0 = 0;
        /** @brief Last reload of fuse word 124 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF124_B_0x1 = 1;

    /** @brief Valid flag for shadow register 125 */
    using BSEC_OTPVLDR3_VLDF125 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 125 was last reloaded. The value read from BSEC_FVR125 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 125 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 125 was last reloaded. The value read from BSEC_FVR125 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF125_B_0x0 = 0;
        /** @brief Last reload of fuse word 125 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF125_B_0x1 = 1;

    /** @brief Valid flag for shadow register 126 */
    using BSEC_OTPVLDR3_VLDF126 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 126 was last reloaded. The value read from BSEC_FVR126 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 126 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 126 was last reloaded. The value read from BSEC_FVR126 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF126_B_0x0 = 0;
        /** @brief Last reload of fuse word 126 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF126_B_0x1 = 1;

    /** @brief Valid flag for shadow register 127 */
    using BSEC_OTPVLDR3_VLDF127 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 127 was last reloaded. The value read from BSEC_FVR127 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 127 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 127 was last reloaded. The value read from BSEC_FVR127 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF127_B_0x0 = 0;
        /** @brief Last reload of fuse word 127 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR3_VLDF127_B_0x1 = 1;

    /** @brief BSEC OTP valid register 4 */
    using BSEC_OTPVLDR4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8D0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 128 */
    using BSEC_OTPVLDR4_VLDF128 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 128 was last reloaded. The value read from BSEC_FVR128 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 128 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 128 was last reloaded. The value read from BSEC_FVR128 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF128_B_0x0 = 0;
        /** @brief Last reload of fuse word 128 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF128_B_0x1 = 1;

    /** @brief Valid flag for shadow register 129 */
    using BSEC_OTPVLDR4_VLDF129 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 129 was last reloaded. The value read from BSEC_FVR129 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 129 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 129 was last reloaded. The value read from BSEC_FVR129 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF129_B_0x0 = 0;
        /** @brief Last reload of fuse word 129 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF129_B_0x1 = 1;

    /** @brief Valid flag for shadow register 130 */
    using BSEC_OTPVLDR4_VLDF130 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 130 was last reloaded. The value read from BSEC_FVR130 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 130 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 130 was last reloaded. The value read from BSEC_FVR130 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF130_B_0x0 = 0;
        /** @brief Last reload of fuse word 130 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF130_B_0x1 = 1;

    /** @brief Valid flag for shadow register 131 */
    using BSEC_OTPVLDR4_VLDF131 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 131 was last reloaded. The value read from BSEC_FVR131 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 131 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 131 was last reloaded. The value read from BSEC_FVR131 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF131_B_0x0 = 0;
        /** @brief Last reload of fuse word 131 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF131_B_0x1 = 1;

    /** @brief Valid flag for shadow register 132 */
    using BSEC_OTPVLDR4_VLDF132 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 132 was last reloaded. The value read from BSEC_FVR132 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 132 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 132 was last reloaded. The value read from BSEC_FVR132 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF132_B_0x0 = 0;
        /** @brief Last reload of fuse word 132 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF132_B_0x1 = 1;

    /** @brief Valid flag for shadow register 133 */
    using BSEC_OTPVLDR4_VLDF133 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 133 was last reloaded. The value read from BSEC_FVR133 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 133 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 133 was last reloaded. The value read from BSEC_FVR133 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF133_B_0x0 = 0;
        /** @brief Last reload of fuse word 133 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF133_B_0x1 = 1;

    /** @brief Valid flag for shadow register 134 */
    using BSEC_OTPVLDR4_VLDF134 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 134 was last reloaded. The value read from BSEC_FVR134 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 134 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 134 was last reloaded. The value read from BSEC_FVR134 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF134_B_0x0 = 0;
        /** @brief Last reload of fuse word 134 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF134_B_0x1 = 1;

    /** @brief Valid flag for shadow register 135 */
    using BSEC_OTPVLDR4_VLDF135 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 135 was last reloaded. The value read from BSEC_FVR135 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 135 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 135 was last reloaded. The value read from BSEC_FVR135 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF135_B_0x0 = 0;
        /** @brief Last reload of fuse word 135 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF135_B_0x1 = 1;

    /** @brief Valid flag for shadow register 136 */
    using BSEC_OTPVLDR4_VLDF136 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 136 was last reloaded. The value read from BSEC_FVR136 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 136 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 136 was last reloaded. The value read from BSEC_FVR136 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF136_B_0x0 = 0;
        /** @brief Last reload of fuse word 136 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF136_B_0x1 = 1;

    /** @brief Valid flag for shadow register 137 */
    using BSEC_OTPVLDR4_VLDF137 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 137 was last reloaded. The value read from BSEC_FVR137 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 137 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 137 was last reloaded. The value read from BSEC_FVR137 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF137_B_0x0 = 0;
        /** @brief Last reload of fuse word 137 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF137_B_0x1 = 1;

    /** @brief Valid flag for shadow register 138 */
    using BSEC_OTPVLDR4_VLDF138 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 138 was last reloaded. The value read from BSEC_FVR138 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 138 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 138 was last reloaded. The value read from BSEC_FVR138 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF138_B_0x0 = 0;
        /** @brief Last reload of fuse word 138 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF138_B_0x1 = 1;

    /** @brief Valid flag for shadow register 139 */
    using BSEC_OTPVLDR4_VLDF139 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 139 was last reloaded. The value read from BSEC_FVR139 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 139 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 139 was last reloaded. The value read from BSEC_FVR139 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF139_B_0x0 = 0;
        /** @brief Last reload of fuse word 139 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF139_B_0x1 = 1;

    /** @brief Valid flag for shadow register 140 */
    using BSEC_OTPVLDR4_VLDF140 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 140 was last reloaded. The value read from BSEC_FVR140 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 140 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 140 was last reloaded. The value read from BSEC_FVR140 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF140_B_0x0 = 0;
        /** @brief Last reload of fuse word 140 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF140_B_0x1 = 1;

    /** @brief Valid flag for shadow register 141 */
    using BSEC_OTPVLDR4_VLDF141 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 141 was last reloaded. The value read from BSEC_FVR141 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 141 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 141 was last reloaded. The value read from BSEC_FVR141 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF141_B_0x0 = 0;
        /** @brief Last reload of fuse word 141 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF141_B_0x1 = 1;

    /** @brief Valid flag for shadow register 142 */
    using BSEC_OTPVLDR4_VLDF142 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 142 was last reloaded. The value read from BSEC_FVR142 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 142 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 142 was last reloaded. The value read from BSEC_FVR142 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF142_B_0x0 = 0;
        /** @brief Last reload of fuse word 142 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF142_B_0x1 = 1;

    /** @brief Valid flag for shadow register 143 */
    using BSEC_OTPVLDR4_VLDF143 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 143 was last reloaded. The value read from BSEC_FVR143 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 143 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 143 was last reloaded. The value read from BSEC_FVR143 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF143_B_0x0 = 0;
        /** @brief Last reload of fuse word 143 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF143_B_0x1 = 1;

    /** @brief Valid flag for shadow register 144 */
    using BSEC_OTPVLDR4_VLDF144 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 144 was last reloaded. The value read from BSEC_FVR144 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 144 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 144 was last reloaded. The value read from BSEC_FVR144 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF144_B_0x0 = 0;
        /** @brief Last reload of fuse word 144 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF144_B_0x1 = 1;

    /** @brief Valid flag for shadow register 145 */
    using BSEC_OTPVLDR4_VLDF145 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 145 was last reloaded. The value read from BSEC_FVR145 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 145 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 145 was last reloaded. The value read from BSEC_FVR145 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF145_B_0x0 = 0;
        /** @brief Last reload of fuse word 145 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF145_B_0x1 = 1;

    /** @brief Valid flag for shadow register 146 */
    using BSEC_OTPVLDR4_VLDF146 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 146 was last reloaded. The value read from BSEC_FVR146 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 146 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 146 was last reloaded. The value read from BSEC_FVR146 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF146_B_0x0 = 0;
        /** @brief Last reload of fuse word 146 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF146_B_0x1 = 1;

    /** @brief Valid flag for shadow register 147 */
    using BSEC_OTPVLDR4_VLDF147 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 147 was last reloaded. The value read from BSEC_FVR147 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 147 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 147 was last reloaded. The value read from BSEC_FVR147 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF147_B_0x0 = 0;
        /** @brief Last reload of fuse word 147 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF147_B_0x1 = 1;

    /** @brief Valid flag for shadow register 148 */
    using BSEC_OTPVLDR4_VLDF148 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 148 was last reloaded. The value read from BSEC_FVR148 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 148 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 148 was last reloaded. The value read from BSEC_FVR148 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF148_B_0x0 = 0;
        /** @brief Last reload of fuse word 148 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF148_B_0x1 = 1;

    /** @brief Valid flag for shadow register 149 */
    using BSEC_OTPVLDR4_VLDF149 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 149 was last reloaded. The value read from BSEC_FVR149 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 149 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 149 was last reloaded. The value read from BSEC_FVR149 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF149_B_0x0 = 0;
        /** @brief Last reload of fuse word 149 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF149_B_0x1 = 1;

    /** @brief Valid flag for shadow register 150 */
    using BSEC_OTPVLDR4_VLDF150 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 150 was last reloaded. The value read from BSEC_FVR150 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 150 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 150 was last reloaded. The value read from BSEC_FVR150 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF150_B_0x0 = 0;
        /** @brief Last reload of fuse word 150 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF150_B_0x1 = 1;

    /** @brief Valid flag for shadow register 151 */
    using BSEC_OTPVLDR4_VLDF151 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 151 was last reloaded. The value read from BSEC_FVR151 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 151 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 151 was last reloaded. The value read from BSEC_FVR151 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF151_B_0x0 = 0;
        /** @brief Last reload of fuse word 151 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF151_B_0x1 = 1;

    /** @brief Valid flag for shadow register 152 */
    using BSEC_OTPVLDR4_VLDF152 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 152 was last reloaded. The value read from BSEC_FVR152 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 152 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 152 was last reloaded. The value read from BSEC_FVR152 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF152_B_0x0 = 0;
        /** @brief Last reload of fuse word 152 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF152_B_0x1 = 1;

    /** @brief Valid flag for shadow register 153 */
    using BSEC_OTPVLDR4_VLDF153 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 153 was last reloaded. The value read from BSEC_FVR153 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 153 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 153 was last reloaded. The value read from BSEC_FVR153 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF153_B_0x0 = 0;
        /** @brief Last reload of fuse word 153 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF153_B_0x1 = 1;

    /** @brief Valid flag for shadow register 154 */
    using BSEC_OTPVLDR4_VLDF154 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 154 was last reloaded. The value read from BSEC_FVR154 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 154 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 154 was last reloaded. The value read from BSEC_FVR154 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF154_B_0x0 = 0;
        /** @brief Last reload of fuse word 154 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF154_B_0x1 = 1;

    /** @brief Valid flag for shadow register 155 */
    using BSEC_OTPVLDR4_VLDF155 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 155 was last reloaded. The value read from BSEC_FVR155 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 155 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 155 was last reloaded. The value read from BSEC_FVR155 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF155_B_0x0 = 0;
        /** @brief Last reload of fuse word 155 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF155_B_0x1 = 1;

    /** @brief Valid flag for shadow register 156 */
    using BSEC_OTPVLDR4_VLDF156 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 156 was last reloaded. The value read from BSEC_FVR156 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 156 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 156 was last reloaded. The value read from BSEC_FVR156 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF156_B_0x0 = 0;
        /** @brief Last reload of fuse word 156 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF156_B_0x1 = 1;

    /** @brief Valid flag for shadow register 157 */
    using BSEC_OTPVLDR4_VLDF157 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 157 was last reloaded. The value read from BSEC_FVR157 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 157 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 157 was last reloaded. The value read from BSEC_FVR157 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF157_B_0x0 = 0;
        /** @brief Last reload of fuse word 157 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF157_B_0x1 = 1;

    /** @brief Valid flag for shadow register 158 */
    using BSEC_OTPVLDR4_VLDF158 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 158 was last reloaded. The value read from BSEC_FVR158 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 158 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 158 was last reloaded. The value read from BSEC_FVR158 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF158_B_0x0 = 0;
        /** @brief Last reload of fuse word 158 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF158_B_0x1 = 1;

    /** @brief Valid flag for shadow register 159 */
    using BSEC_OTPVLDR4_VLDF159 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 159 was last reloaded. The value read from BSEC_FVR159 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 159 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 159 was last reloaded. The value read from BSEC_FVR159 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF159_B_0x0 = 0;
        /** @brief Last reload of fuse word 159 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR4_VLDF159_B_0x1 = 1;

    /** @brief BSEC OTP valid register 5 */
    using BSEC_OTPVLDR5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8D4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 160 */
    using BSEC_OTPVLDR5_VLDF160 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 160 was last reloaded. The value read from BSEC_FVR160 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 160 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 160 was last reloaded. The value read from BSEC_FVR160 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF160_B_0x0 = 0;
        /** @brief Last reload of fuse word 160 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF160_B_0x1 = 1;

    /** @brief Valid flag for shadow register 161 */
    using BSEC_OTPVLDR5_VLDF161 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 161 was last reloaded. The value read from BSEC_FVR161 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 161 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 161 was last reloaded. The value read from BSEC_FVR161 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF161_B_0x0 = 0;
        /** @brief Last reload of fuse word 161 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF161_B_0x1 = 1;

    /** @brief Valid flag for shadow register 162 */
    using BSEC_OTPVLDR5_VLDF162 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 162 was last reloaded. The value read from BSEC_FVR162 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 162 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 162 was last reloaded. The value read from BSEC_FVR162 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF162_B_0x0 = 0;
        /** @brief Last reload of fuse word 162 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF162_B_0x1 = 1;

    /** @brief Valid flag for shadow register 163 */
    using BSEC_OTPVLDR5_VLDF163 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 163 was last reloaded. The value read from BSEC_FVR163 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 163 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 163 was last reloaded. The value read from BSEC_FVR163 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF163_B_0x0 = 0;
        /** @brief Last reload of fuse word 163 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF163_B_0x1 = 1;

    /** @brief Valid flag for shadow register 164 */
    using BSEC_OTPVLDR5_VLDF164 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 164 was last reloaded. The value read from BSEC_FVR164 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 164 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 164 was last reloaded. The value read from BSEC_FVR164 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF164_B_0x0 = 0;
        /** @brief Last reload of fuse word 164 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF164_B_0x1 = 1;

    /** @brief Valid flag for shadow register 165 */
    using BSEC_OTPVLDR5_VLDF165 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 165 was last reloaded. The value read from BSEC_FVR165 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 165 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 165 was last reloaded. The value read from BSEC_FVR165 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF165_B_0x0 = 0;
        /** @brief Last reload of fuse word 165 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF165_B_0x1 = 1;

    /** @brief Valid flag for shadow register 166 */
    using BSEC_OTPVLDR5_VLDF166 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 166 was last reloaded. The value read from BSEC_FVR166 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 166 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 166 was last reloaded. The value read from BSEC_FVR166 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF166_B_0x0 = 0;
        /** @brief Last reload of fuse word 166 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF166_B_0x1 = 1;

    /** @brief Valid flag for shadow register 167 */
    using BSEC_OTPVLDR5_VLDF167 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 167 was last reloaded. The value read from BSEC_FVR167 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 167 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 167 was last reloaded. The value read from BSEC_FVR167 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF167_B_0x0 = 0;
        /** @brief Last reload of fuse word 167 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF167_B_0x1 = 1;

    /** @brief Valid flag for shadow register 168 */
    using BSEC_OTPVLDR5_VLDF168 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 168 was last reloaded. The value read from BSEC_FVR168 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 168 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 168 was last reloaded. The value read from BSEC_FVR168 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF168_B_0x0 = 0;
        /** @brief Last reload of fuse word 168 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF168_B_0x1 = 1;

    /** @brief Valid flag for shadow register 169 */
    using BSEC_OTPVLDR5_VLDF169 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 169 was last reloaded. The value read from BSEC_FVR169 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 169 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 169 was last reloaded. The value read from BSEC_FVR169 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF169_B_0x0 = 0;
        /** @brief Last reload of fuse word 169 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF169_B_0x1 = 1;

    /** @brief Valid flag for shadow register 170 */
    using BSEC_OTPVLDR5_VLDF170 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 170 was last reloaded. The value read from BSEC_FVR170 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 170 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 170 was last reloaded. The value read from BSEC_FVR170 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF170_B_0x0 = 0;
        /** @brief Last reload of fuse word 170 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF170_B_0x1 = 1;

    /** @brief Valid flag for shadow register 171 */
    using BSEC_OTPVLDR5_VLDF171 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 171 was last reloaded. The value read from BSEC_FVR171 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 171 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 171 was last reloaded. The value read from BSEC_FVR171 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF171_B_0x0 = 0;
        /** @brief Last reload of fuse word 171 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF171_B_0x1 = 1;

    /** @brief Valid flag for shadow register 172 */
    using BSEC_OTPVLDR5_VLDF172 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 172 was last reloaded. The value read from BSEC_FVR172 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 172 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 172 was last reloaded. The value read from BSEC_FVR172 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF172_B_0x0 = 0;
        /** @brief Last reload of fuse word 172 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF172_B_0x1 = 1;

    /** @brief Valid flag for shadow register 173 */
    using BSEC_OTPVLDR5_VLDF173 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 173 was last reloaded. The value read from BSEC_FVR173 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 173 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 173 was last reloaded. The value read from BSEC_FVR173 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF173_B_0x0 = 0;
        /** @brief Last reload of fuse word 173 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF173_B_0x1 = 1;

    /** @brief Valid flag for shadow register 174 */
    using BSEC_OTPVLDR5_VLDF174 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 174 was last reloaded. The value read from BSEC_FVR174 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 174 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 174 was last reloaded. The value read from BSEC_FVR174 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF174_B_0x0 = 0;
        /** @brief Last reload of fuse word 174 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF174_B_0x1 = 1;

    /** @brief Valid flag for shadow register 175 */
    using BSEC_OTPVLDR5_VLDF175 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 175 was last reloaded. The value read from BSEC_FVR175 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 175 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 175 was last reloaded. The value read from BSEC_FVR175 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF175_B_0x0 = 0;
        /** @brief Last reload of fuse word 175 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF175_B_0x1 = 1;

    /** @brief Valid flag for shadow register 176 */
    using BSEC_OTPVLDR5_VLDF176 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 176 was last reloaded. The value read from BSEC_FVR176 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 176 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 176 was last reloaded. The value read from BSEC_FVR176 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF176_B_0x0 = 0;
        /** @brief Last reload of fuse word 176 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF176_B_0x1 = 1;

    /** @brief Valid flag for shadow register 177 */
    using BSEC_OTPVLDR5_VLDF177 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 177 was last reloaded. The value read from BSEC_FVR177 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 177 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 177 was last reloaded. The value read from BSEC_FVR177 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF177_B_0x0 = 0;
        /** @brief Last reload of fuse word 177 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF177_B_0x1 = 1;

    /** @brief Valid flag for shadow register 178 */
    using BSEC_OTPVLDR5_VLDF178 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 178 was last reloaded. The value read from BSEC_FVR178 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 178 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 178 was last reloaded. The value read from BSEC_FVR178 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF178_B_0x0 = 0;
        /** @brief Last reload of fuse word 178 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF178_B_0x1 = 1;

    /** @brief Valid flag for shadow register 179 */
    using BSEC_OTPVLDR5_VLDF179 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 179 was last reloaded. The value read from BSEC_FVR179 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 179 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 179 was last reloaded. The value read from BSEC_FVR179 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF179_B_0x0 = 0;
        /** @brief Last reload of fuse word 179 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF179_B_0x1 = 1;

    /** @brief Valid flag for shadow register 180 */
    using BSEC_OTPVLDR5_VLDF180 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 180 was last reloaded. The value read from BSEC_FVR180 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 180 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 180 was last reloaded. The value read from BSEC_FVR180 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF180_B_0x0 = 0;
        /** @brief Last reload of fuse word 180 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF180_B_0x1 = 1;

    /** @brief Valid flag for shadow register 181 */
    using BSEC_OTPVLDR5_VLDF181 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 181 was last reloaded. The value read from BSEC_FVR181 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 181 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 181 was last reloaded. The value read from BSEC_FVR181 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF181_B_0x0 = 0;
        /** @brief Last reload of fuse word 181 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF181_B_0x1 = 1;

    /** @brief Valid flag for shadow register 182 */
    using BSEC_OTPVLDR5_VLDF182 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 182 was last reloaded. The value read from BSEC_FVR182 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 182 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 182 was last reloaded. The value read from BSEC_FVR182 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF182_B_0x0 = 0;
        /** @brief Last reload of fuse word 182 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF182_B_0x1 = 1;

    /** @brief Valid flag for shadow register 183 */
    using BSEC_OTPVLDR5_VLDF183 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 183 was last reloaded. The value read from BSEC_FVR183 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 183 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 183 was last reloaded. The value read from BSEC_FVR183 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF183_B_0x0 = 0;
        /** @brief Last reload of fuse word 183 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF183_B_0x1 = 1;

    /** @brief Valid flag for shadow register 184 */
    using BSEC_OTPVLDR5_VLDF184 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 184 was last reloaded. The value read from BSEC_FVR184 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 184 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 184 was last reloaded. The value read from BSEC_FVR184 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF184_B_0x0 = 0;
        /** @brief Last reload of fuse word 184 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF184_B_0x1 = 1;

    /** @brief Valid flag for shadow register 185 */
    using BSEC_OTPVLDR5_VLDF185 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 185 was last reloaded. The value read from BSEC_FVR185 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 185 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 185 was last reloaded. The value read from BSEC_FVR185 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF185_B_0x0 = 0;
        /** @brief Last reload of fuse word 185 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF185_B_0x1 = 1;

    /** @brief Valid flag for shadow register 186 */
    using BSEC_OTPVLDR5_VLDF186 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 186 was last reloaded. The value read from BSEC_FVR186 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 186 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 186 was last reloaded. The value read from BSEC_FVR186 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF186_B_0x0 = 0;
        /** @brief Last reload of fuse word 186 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF186_B_0x1 = 1;

    /** @brief Valid flag for shadow register 187 */
    using BSEC_OTPVLDR5_VLDF187 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 187 was last reloaded. The value read from BSEC_FVR187 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 187 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 187 was last reloaded. The value read from BSEC_FVR187 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF187_B_0x0 = 0;
        /** @brief Last reload of fuse word 187 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF187_B_0x1 = 1;

    /** @brief Valid flag for shadow register 188 */
    using BSEC_OTPVLDR5_VLDF188 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 188 was last reloaded. The value read from BSEC_FVR188 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 188 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 188 was last reloaded. The value read from BSEC_FVR188 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF188_B_0x0 = 0;
        /** @brief Last reload of fuse word 188 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF188_B_0x1 = 1;

    /** @brief Valid flag for shadow register 189 */
    using BSEC_OTPVLDR5_VLDF189 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 189 was last reloaded. The value read from BSEC_FVR189 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 189 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 189 was last reloaded. The value read from BSEC_FVR189 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF189_B_0x0 = 0;
        /** @brief Last reload of fuse word 189 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF189_B_0x1 = 1;

    /** @brief Valid flag for shadow register 190 */
    using BSEC_OTPVLDR5_VLDF190 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 190 was last reloaded. The value read from BSEC_FVR190 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 190 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 190 was last reloaded. The value read from BSEC_FVR190 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF190_B_0x0 = 0;
        /** @brief Last reload of fuse word 190 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF190_B_0x1 = 1;

    /** @brief Valid flag for shadow register 191 */
    using BSEC_OTPVLDR5_VLDF191 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 191 was last reloaded. The value read from BSEC_FVR191 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 191 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 191 was last reloaded. The value read from BSEC_FVR191 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF191_B_0x0 = 0;
        /** @brief Last reload of fuse word 191 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR5_VLDF191_B_0x1 = 1;

    /** @brief BSEC OTP valid register 6 */
    using BSEC_OTPVLDR6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8D8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 192 */
    using BSEC_OTPVLDR6_VLDF192 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 192 was last reloaded. The value read from BSEC_FVR192 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 192 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 192 was last reloaded. The value read from BSEC_FVR192 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF192_B_0x0 = 0;
        /** @brief Last reload of fuse word 192 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF192_B_0x1 = 1;

    /** @brief Valid flag for shadow register 193 */
    using BSEC_OTPVLDR6_VLDF193 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 193 was last reloaded. The value read from BSEC_FVR193 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 193 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 193 was last reloaded. The value read from BSEC_FVR193 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF193_B_0x0 = 0;
        /** @brief Last reload of fuse word 193 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF193_B_0x1 = 1;

    /** @brief Valid flag for shadow register 194 */
    using BSEC_OTPVLDR6_VLDF194 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 194 was last reloaded. The value read from BSEC_FVR194 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 194 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 194 was last reloaded. The value read from BSEC_FVR194 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF194_B_0x0 = 0;
        /** @brief Last reload of fuse word 194 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF194_B_0x1 = 1;

    /** @brief Valid flag for shadow register 195 */
    using BSEC_OTPVLDR6_VLDF195 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 195 was last reloaded. The value read from BSEC_FVR195 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 195 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 195 was last reloaded. The value read from BSEC_FVR195 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF195_B_0x0 = 0;
        /** @brief Last reload of fuse word 195 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF195_B_0x1 = 1;

    /** @brief Valid flag for shadow register 196 */
    using BSEC_OTPVLDR6_VLDF196 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 196 was last reloaded. The value read from BSEC_FVR196 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 196 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 196 was last reloaded. The value read from BSEC_FVR196 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF196_B_0x0 = 0;
        /** @brief Last reload of fuse word 196 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF196_B_0x1 = 1;

    /** @brief Valid flag for shadow register 197 */
    using BSEC_OTPVLDR6_VLDF197 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 197 was last reloaded. The value read from BSEC_FVR197 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 197 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 197 was last reloaded. The value read from BSEC_FVR197 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF197_B_0x0 = 0;
        /** @brief Last reload of fuse word 197 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF197_B_0x1 = 1;

    /** @brief Valid flag for shadow register 198 */
    using BSEC_OTPVLDR6_VLDF198 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 198 was last reloaded. The value read from BSEC_FVR198 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 198 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 198 was last reloaded. The value read from BSEC_FVR198 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF198_B_0x0 = 0;
        /** @brief Last reload of fuse word 198 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF198_B_0x1 = 1;

    /** @brief Valid flag for shadow register 199 */
    using BSEC_OTPVLDR6_VLDF199 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 199 was last reloaded. The value read from BSEC_FVR199 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 199 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 199 was last reloaded. The value read from BSEC_FVR199 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF199_B_0x0 = 0;
        /** @brief Last reload of fuse word 199 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF199_B_0x1 = 1;

    /** @brief Valid flag for shadow register 200 */
    using BSEC_OTPVLDR6_VLDF200 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 200 was last reloaded. The value read from BSEC_FVR200 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 200 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 200 was last reloaded. The value read from BSEC_FVR200 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF200_B_0x0 = 0;
        /** @brief Last reload of fuse word 200 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF200_B_0x1 = 1;

    /** @brief Valid flag for shadow register 201 */
    using BSEC_OTPVLDR6_VLDF201 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 201 was last reloaded. The value read from BSEC_FVR201 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 201 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 201 was last reloaded. The value read from BSEC_FVR201 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF201_B_0x0 = 0;
        /** @brief Last reload of fuse word 201 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF201_B_0x1 = 1;

    /** @brief Valid flag for shadow register 202 */
    using BSEC_OTPVLDR6_VLDF202 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 202 was last reloaded. The value read from BSEC_FVR202 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 202 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 202 was last reloaded. The value read from BSEC_FVR202 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF202_B_0x0 = 0;
        /** @brief Last reload of fuse word 202 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF202_B_0x1 = 1;

    /** @brief Valid flag for shadow register 203 */
    using BSEC_OTPVLDR6_VLDF203 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 203 was last reloaded. The value read from BSEC_FVR203 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 203 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 203 was last reloaded. The value read from BSEC_FVR203 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF203_B_0x0 = 0;
        /** @brief Last reload of fuse word 203 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF203_B_0x1 = 1;

    /** @brief Valid flag for shadow register 204 */
    using BSEC_OTPVLDR6_VLDF204 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 204 was last reloaded. The value read from BSEC_FVR204 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 204 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 204 was last reloaded. The value read from BSEC_FVR204 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF204_B_0x0 = 0;
        /** @brief Last reload of fuse word 204 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF204_B_0x1 = 1;

    /** @brief Valid flag for shadow register 205 */
    using BSEC_OTPVLDR6_VLDF205 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 205 was last reloaded. The value read from BSEC_FVR205 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 205 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 205 was last reloaded. The value read from BSEC_FVR205 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF205_B_0x0 = 0;
        /** @brief Last reload of fuse word 205 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF205_B_0x1 = 1;

    /** @brief Valid flag for shadow register 206 */
    using BSEC_OTPVLDR6_VLDF206 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 206 was last reloaded. The value read from BSEC_FVR206 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 206 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 206 was last reloaded. The value read from BSEC_FVR206 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF206_B_0x0 = 0;
        /** @brief Last reload of fuse word 206 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF206_B_0x1 = 1;

    /** @brief Valid flag for shadow register 207 */
    using BSEC_OTPVLDR6_VLDF207 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 207 was last reloaded. The value read from BSEC_FVR207 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 207 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 207 was last reloaded. The value read from BSEC_FVR207 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF207_B_0x0 = 0;
        /** @brief Last reload of fuse word 207 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF207_B_0x1 = 1;

    /** @brief Valid flag for shadow register 208 */
    using BSEC_OTPVLDR6_VLDF208 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 208 was last reloaded. The value read from BSEC_FVR208 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 208 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 208 was last reloaded. The value read from BSEC_FVR208 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF208_B_0x0 = 0;
        /** @brief Last reload of fuse word 208 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF208_B_0x1 = 1;

    /** @brief Valid flag for shadow register 209 */
    using BSEC_OTPVLDR6_VLDF209 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 209 was last reloaded. The value read from BSEC_FVR209 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 209 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 209 was last reloaded. The value read from BSEC_FVR209 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF209_B_0x0 = 0;
        /** @brief Last reload of fuse word 209 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF209_B_0x1 = 1;

    /** @brief Valid flag for shadow register 210 */
    using BSEC_OTPVLDR6_VLDF210 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 210 was last reloaded. The value read from BSEC_FVR210 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 210 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 210 was last reloaded. The value read from BSEC_FVR210 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF210_B_0x0 = 0;
        /** @brief Last reload of fuse word 210 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF210_B_0x1 = 1;

    /** @brief Valid flag for shadow register 211 */
    using BSEC_OTPVLDR6_VLDF211 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 211 was last reloaded. The value read from BSEC_FVR211 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 211 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 211 was last reloaded. The value read from BSEC_FVR211 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF211_B_0x0 = 0;
        /** @brief Last reload of fuse word 211 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF211_B_0x1 = 1;

    /** @brief Valid flag for shadow register 212 */
    using BSEC_OTPVLDR6_VLDF212 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 212 was last reloaded. The value read from BSEC_FVR212 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 212 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 212 was last reloaded. The value read from BSEC_FVR212 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF212_B_0x0 = 0;
        /** @brief Last reload of fuse word 212 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF212_B_0x1 = 1;

    /** @brief Valid flag for shadow register 213 */
    using BSEC_OTPVLDR6_VLDF213 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 213 was last reloaded. The value read from BSEC_FVR213 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 213 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 213 was last reloaded. The value read from BSEC_FVR213 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF213_B_0x0 = 0;
        /** @brief Last reload of fuse word 213 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF213_B_0x1 = 1;

    /** @brief Valid flag for shadow register 214 */
    using BSEC_OTPVLDR6_VLDF214 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 214 was last reloaded. The value read from BSEC_FVR214 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 214 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 214 was last reloaded. The value read from BSEC_FVR214 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF214_B_0x0 = 0;
        /** @brief Last reload of fuse word 214 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF214_B_0x1 = 1;

    /** @brief Valid flag for shadow register 215 */
    using BSEC_OTPVLDR6_VLDF215 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 215 was last reloaded. The value read from BSEC_FVR215 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 215 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 215 was last reloaded. The value read from BSEC_FVR215 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF215_B_0x0 = 0;
        /** @brief Last reload of fuse word 215 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF215_B_0x1 = 1;

    /** @brief Valid flag for shadow register 216 */
    using BSEC_OTPVLDR6_VLDF216 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 216 was last reloaded. The value read from BSEC_FVR216 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 216 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 216 was last reloaded. The value read from BSEC_FVR216 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF216_B_0x0 = 0;
        /** @brief Last reload of fuse word 216 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF216_B_0x1 = 1;

    /** @brief Valid flag for shadow register 217 */
    using BSEC_OTPVLDR6_VLDF217 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 217 was last reloaded. The value read from BSEC_FVR217 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 217 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 217 was last reloaded. The value read from BSEC_FVR217 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF217_B_0x0 = 0;
        /** @brief Last reload of fuse word 217 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF217_B_0x1 = 1;

    /** @brief Valid flag for shadow register 218 */
    using BSEC_OTPVLDR6_VLDF218 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 218 was last reloaded. The value read from BSEC_FVR218 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 218 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 218 was last reloaded. The value read from BSEC_FVR218 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF218_B_0x0 = 0;
        /** @brief Last reload of fuse word 218 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF218_B_0x1 = 1;

    /** @brief Valid flag for shadow register 219 */
    using BSEC_OTPVLDR6_VLDF219 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 219 was last reloaded. The value read from BSEC_FVR219 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 219 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 219 was last reloaded. The value read from BSEC_FVR219 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF219_B_0x0 = 0;
        /** @brief Last reload of fuse word 219 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF219_B_0x1 = 1;

    /** @brief Valid flag for shadow register 220 */
    using BSEC_OTPVLDR6_VLDF220 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 220 was last reloaded. The value read from BSEC_FVR220 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 220 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 220 was last reloaded. The value read from BSEC_FVR220 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF220_B_0x0 = 0;
        /** @brief Last reload of fuse word 220 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF220_B_0x1 = 1;

    /** @brief Valid flag for shadow register 221 */
    using BSEC_OTPVLDR6_VLDF221 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 221 was last reloaded. The value read from BSEC_FVR221 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 221 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 221 was last reloaded. The value read from BSEC_FVR221 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF221_B_0x0 = 0;
        /** @brief Last reload of fuse word 221 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF221_B_0x1 = 1;

    /** @brief Valid flag for shadow register 222 */
    using BSEC_OTPVLDR6_VLDF222 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 222 was last reloaded. The value read from BSEC_FVR222 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 222 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 222 was last reloaded. The value read from BSEC_FVR222 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF222_B_0x0 = 0;
        /** @brief Last reload of fuse word 222 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF222_B_0x1 = 1;

    /** @brief Valid flag for shadow register 223 */
    using BSEC_OTPVLDR6_VLDF223 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 223 was last reloaded. The value read from BSEC_FVR223 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 223 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 223 was last reloaded. The value read from BSEC_FVR223 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF223_B_0x0 = 0;
        /** @brief Last reload of fuse word 223 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR6_VLDF223_B_0x1 = 1;

    /** @brief BSEC OTP valid register 7 */
    using BSEC_OTPVLDR7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8DC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 224 */
    using BSEC_OTPVLDR7_VLDF224 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 224 was last reloaded. The value read from BSEC_FVR224 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 224 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 224 was last reloaded. The value read from BSEC_FVR224 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF224_B_0x0 = 0;
        /** @brief Last reload of fuse word 224 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF224_B_0x1 = 1;

    /** @brief Valid flag for shadow register 225 */
    using BSEC_OTPVLDR7_VLDF225 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 225 was last reloaded. The value read from BSEC_FVR225 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 225 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 225 was last reloaded. The value read from BSEC_FVR225 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF225_B_0x0 = 0;
        /** @brief Last reload of fuse word 225 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF225_B_0x1 = 1;

    /** @brief Valid flag for shadow register 226 */
    using BSEC_OTPVLDR7_VLDF226 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 226 was last reloaded. The value read from BSEC_FVR226 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 226 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 226 was last reloaded. The value read from BSEC_FVR226 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF226_B_0x0 = 0;
        /** @brief Last reload of fuse word 226 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF226_B_0x1 = 1;

    /** @brief Valid flag for shadow register 227 */
    using BSEC_OTPVLDR7_VLDF227 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 227 was last reloaded. The value read from BSEC_FVR227 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 227 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 227 was last reloaded. The value read from BSEC_FVR227 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF227_B_0x0 = 0;
        /** @brief Last reload of fuse word 227 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF227_B_0x1 = 1;

    /** @brief Valid flag for shadow register 228 */
    using BSEC_OTPVLDR7_VLDF228 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 228 was last reloaded. The value read from BSEC_FVR228 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 228 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 228 was last reloaded. The value read from BSEC_FVR228 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF228_B_0x0 = 0;
        /** @brief Last reload of fuse word 228 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF228_B_0x1 = 1;

    /** @brief Valid flag for shadow register 229 */
    using BSEC_OTPVLDR7_VLDF229 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 229 was last reloaded. The value read from BSEC_FVR229 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 229 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 229 was last reloaded. The value read from BSEC_FVR229 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF229_B_0x0 = 0;
        /** @brief Last reload of fuse word 229 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF229_B_0x1 = 1;

    /** @brief Valid flag for shadow register 230 */
    using BSEC_OTPVLDR7_VLDF230 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 230 was last reloaded. The value read from BSEC_FVR230 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 230 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 230 was last reloaded. The value read from BSEC_FVR230 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF230_B_0x0 = 0;
        /** @brief Last reload of fuse word 230 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF230_B_0x1 = 1;

    /** @brief Valid flag for shadow register 231 */
    using BSEC_OTPVLDR7_VLDF231 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 231 was last reloaded. The value read from BSEC_FVR231 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 231 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 231 was last reloaded. The value read from BSEC_FVR231 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF231_B_0x0 = 0;
        /** @brief Last reload of fuse word 231 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF231_B_0x1 = 1;

    /** @brief Valid flag for shadow register 232 */
    using BSEC_OTPVLDR7_VLDF232 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 232 was last reloaded. The value read from BSEC_FVR232 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 232 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 232 was last reloaded. The value read from BSEC_FVR232 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF232_B_0x0 = 0;
        /** @brief Last reload of fuse word 232 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF232_B_0x1 = 1;

    /** @brief Valid flag for shadow register 233 */
    using BSEC_OTPVLDR7_VLDF233 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 233 was last reloaded. The value read from BSEC_FVR233 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 233 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 233 was last reloaded. The value read from BSEC_FVR233 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF233_B_0x0 = 0;
        /** @brief Last reload of fuse word 233 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF233_B_0x1 = 1;

    /** @brief Valid flag for shadow register 234 */
    using BSEC_OTPVLDR7_VLDF234 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 234 was last reloaded. The value read from BSEC_FVR234 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 234 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 234 was last reloaded. The value read from BSEC_FVR234 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF234_B_0x0 = 0;
        /** @brief Last reload of fuse word 234 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF234_B_0x1 = 1;

    /** @brief Valid flag for shadow register 235 */
    using BSEC_OTPVLDR7_VLDF235 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 235 was last reloaded. The value read from BSEC_FVR235 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 235 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 235 was last reloaded. The value read from BSEC_FVR235 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF235_B_0x0 = 0;
        /** @brief Last reload of fuse word 235 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF235_B_0x1 = 1;

    /** @brief Valid flag for shadow register 236 */
    using BSEC_OTPVLDR7_VLDF236 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 236 was last reloaded. The value read from BSEC_FVR236 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 236 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 236 was last reloaded. The value read from BSEC_FVR236 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF236_B_0x0 = 0;
        /** @brief Last reload of fuse word 236 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF236_B_0x1 = 1;

    /** @brief Valid flag for shadow register 237 */
    using BSEC_OTPVLDR7_VLDF237 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 237 was last reloaded. The value read from BSEC_FVR237 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 237 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 237 was last reloaded. The value read from BSEC_FVR237 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF237_B_0x0 = 0;
        /** @brief Last reload of fuse word 237 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF237_B_0x1 = 1;

    /** @brief Valid flag for shadow register 238 */
    using BSEC_OTPVLDR7_VLDF238 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 238 was last reloaded. The value read from BSEC_FVR238 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 238 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 238 was last reloaded. The value read from BSEC_FVR238 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF238_B_0x0 = 0;
        /** @brief Last reload of fuse word 238 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF238_B_0x1 = 1;

    /** @brief Valid flag for shadow register 239 */
    using BSEC_OTPVLDR7_VLDF239 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 239 was last reloaded. The value read from BSEC_FVR239 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 239 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 239 was last reloaded. The value read from BSEC_FVR239 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF239_B_0x0 = 0;
        /** @brief Last reload of fuse word 239 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF239_B_0x1 = 1;

    /** @brief Valid flag for shadow register 240 */
    using BSEC_OTPVLDR7_VLDF240 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 240 was last reloaded. The value read from BSEC_FVR240 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 240 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 240 was last reloaded. The value read from BSEC_FVR240 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF240_B_0x0 = 0;
        /** @brief Last reload of fuse word 240 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF240_B_0x1 = 1;

    /** @brief Valid flag for shadow register 241 */
    using BSEC_OTPVLDR7_VLDF241 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 241 was last reloaded. The value read from BSEC_FVR241 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 241 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 241 was last reloaded. The value read from BSEC_FVR241 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF241_B_0x0 = 0;
        /** @brief Last reload of fuse word 241 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF241_B_0x1 = 1;

    /** @brief Valid flag for shadow register 242 */
    using BSEC_OTPVLDR7_VLDF242 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 242 was last reloaded. The value read from BSEC_FVR242 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 242 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 242 was last reloaded. The value read from BSEC_FVR242 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF242_B_0x0 = 0;
        /** @brief Last reload of fuse word 242 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF242_B_0x1 = 1;

    /** @brief Valid flag for shadow register 243 */
    using BSEC_OTPVLDR7_VLDF243 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 243 was last reloaded. The value read from BSEC_FVR243 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 243 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 243 was last reloaded. The value read from BSEC_FVR243 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF243_B_0x0 = 0;
        /** @brief Last reload of fuse word 243 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF243_B_0x1 = 1;

    /** @brief Valid flag for shadow register 244 */
    using BSEC_OTPVLDR7_VLDF244 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 244 was last reloaded. The value read from BSEC_FVR244 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 244 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 244 was last reloaded. The value read from BSEC_FVR244 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF244_B_0x0 = 0;
        /** @brief Last reload of fuse word 244 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF244_B_0x1 = 1;

    /** @brief Valid flag for shadow register 245 */
    using BSEC_OTPVLDR7_VLDF245 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 245 was last reloaded. The value read from BSEC_FVR245 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 245 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 245 was last reloaded. The value read from BSEC_FVR245 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF245_B_0x0 = 0;
        /** @brief Last reload of fuse word 245 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF245_B_0x1 = 1;

    /** @brief Valid flag for shadow register 246 */
    using BSEC_OTPVLDR7_VLDF246 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 246 was last reloaded. The value read from BSEC_FVR246 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 246 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 246 was last reloaded. The value read from BSEC_FVR246 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF246_B_0x0 = 0;
        /** @brief Last reload of fuse word 246 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF246_B_0x1 = 1;

    /** @brief Valid flag for shadow register 247 */
    using BSEC_OTPVLDR7_VLDF247 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 247 was last reloaded. The value read from BSEC_FVR247 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 247 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 247 was last reloaded. The value read from BSEC_FVR247 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF247_B_0x0 = 0;
        /** @brief Last reload of fuse word 247 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF247_B_0x1 = 1;

    /** @brief Valid flag for shadow register 248 */
    using BSEC_OTPVLDR7_VLDF248 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 248 was last reloaded. The value read from BSEC_FVR248 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 248 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 248 was last reloaded. The value read from BSEC_FVR248 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF248_B_0x0 = 0;
        /** @brief Last reload of fuse word 248 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF248_B_0x1 = 1;

    /** @brief Valid flag for shadow register 249 */
    using BSEC_OTPVLDR7_VLDF249 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 249 was last reloaded. The value read from BSEC_FVR249 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 249 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 249 was last reloaded. The value read from BSEC_FVR249 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF249_B_0x0 = 0;
        /** @brief Last reload of fuse word 249 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF249_B_0x1 = 1;

    /** @brief Valid flag for shadow register 250 */
    using BSEC_OTPVLDR7_VLDF250 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 250 was last reloaded. The value read from BSEC_FVR250 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 250 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 250 was last reloaded. The value read from BSEC_FVR250 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF250_B_0x0 = 0;
        /** @brief Last reload of fuse word 250 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF250_B_0x1 = 1;

    /** @brief Valid flag for shadow register 251 */
    using BSEC_OTPVLDR7_VLDF251 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 251 was last reloaded. The value read from BSEC_FVR251 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 251 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 251 was last reloaded. The value read from BSEC_FVR251 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF251_B_0x0 = 0;
        /** @brief Last reload of fuse word 251 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF251_B_0x1 = 1;

    /** @brief Valid flag for shadow register 252 */
    using BSEC_OTPVLDR7_VLDF252 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 252 was last reloaded. The value read from BSEC_FVR252 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 252 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 252 was last reloaded. The value read from BSEC_FVR252 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF252_B_0x0 = 0;
        /** @brief Last reload of fuse word 252 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF252_B_0x1 = 1;

    /** @brief Valid flag for shadow register 253 */
    using BSEC_OTPVLDR7_VLDF253 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 253 was last reloaded. The value read from BSEC_FVR253 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 253 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 253 was last reloaded. The value read from BSEC_FVR253 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF253_B_0x0 = 0;
        /** @brief Last reload of fuse word 253 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF253_B_0x1 = 1;

    /** @brief Valid flag for shadow register 254 */
    using BSEC_OTPVLDR7_VLDF254 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 254 was last reloaded. The value read from BSEC_FVR254 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 254 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 254 was last reloaded. The value read from BSEC_FVR254 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF254_B_0x0 = 0;
        /** @brief Last reload of fuse word 254 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF254_B_0x1 = 1;

    /** @brief Valid flag for shadow register 255 */
    using BSEC_OTPVLDR7_VLDF255 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 255 was last reloaded. The value read from BSEC_FVR255 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 255 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 255 was last reloaded. The value read from BSEC_FVR255 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF255_B_0x0 = 0;
        /** @brief Last reload of fuse word 255 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR7_VLDF255_B_0x1 = 1;

    /** @brief BSEC OTP valid register 8 */
    using BSEC_OTPVLDR8 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8E0, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 256 */
    using BSEC_OTPVLDR8_VLDF256 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 256 was last reloaded. The value read from BSEC_FVR256 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 256 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 256 was last reloaded. The value read from BSEC_FVR256 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF256_B_0x0 = 0;
        /** @brief Last reload of fuse word 256 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF256_B_0x1 = 1;

    /** @brief Valid flag for shadow register 257 */
    using BSEC_OTPVLDR8_VLDF257 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 257 was last reloaded. The value read from BSEC_FVR257 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 257 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 257 was last reloaded. The value read from BSEC_FVR257 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF257_B_0x0 = 0;
        /** @brief Last reload of fuse word 257 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF257_B_0x1 = 1;

    /** @brief Valid flag for shadow register 258 */
    using BSEC_OTPVLDR8_VLDF258 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 258 was last reloaded. The value read from BSEC_FVR258 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 258 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 258 was last reloaded. The value read from BSEC_FVR258 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF258_B_0x0 = 0;
        /** @brief Last reload of fuse word 258 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF258_B_0x1 = 1;

    /** @brief Valid flag for shadow register 259 */
    using BSEC_OTPVLDR8_VLDF259 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 259 was last reloaded. The value read from BSEC_FVR259 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 259 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 259 was last reloaded. The value read from BSEC_FVR259 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF259_B_0x0 = 0;
        /** @brief Last reload of fuse word 259 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF259_B_0x1 = 1;

    /** @brief Valid flag for shadow register 260 */
    using BSEC_OTPVLDR8_VLDF260 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 260 was last reloaded. The value read from BSEC_FVR260 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 260 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 260 was last reloaded. The value read from BSEC_FVR260 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF260_B_0x0 = 0;
        /** @brief Last reload of fuse word 260 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF260_B_0x1 = 1;

    /** @brief Valid flag for shadow register 261 */
    using BSEC_OTPVLDR8_VLDF261 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 261 was last reloaded. The value read from BSEC_FVR261 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 261 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 261 was last reloaded. The value read from BSEC_FVR261 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF261_B_0x0 = 0;
        /** @brief Last reload of fuse word 261 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF261_B_0x1 = 1;

    /** @brief Valid flag for shadow register 262 */
    using BSEC_OTPVLDR8_VLDF262 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 262 was last reloaded. The value read from BSEC_FVR262 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 262 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 262 was last reloaded. The value read from BSEC_FVR262 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF262_B_0x0 = 0;
        /** @brief Last reload of fuse word 262 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF262_B_0x1 = 1;

    /** @brief Valid flag for shadow register 263 */
    using BSEC_OTPVLDR8_VLDF263 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 263 was last reloaded. The value read from BSEC_FVR263 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 263 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 263 was last reloaded. The value read from BSEC_FVR263 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF263_B_0x0 = 0;
        /** @brief Last reload of fuse word 263 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF263_B_0x1 = 1;

    /** @brief Valid flag for shadow register 264 */
    using BSEC_OTPVLDR8_VLDF264 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 264 was last reloaded. The value read from BSEC_FVR264 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 264 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 264 was last reloaded. The value read from BSEC_FVR264 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF264_B_0x0 = 0;
        /** @brief Last reload of fuse word 264 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF264_B_0x1 = 1;

    /** @brief Valid flag for shadow register 265 */
    using BSEC_OTPVLDR8_VLDF265 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 265 was last reloaded. The value read from BSEC_FVR265 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 265 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 265 was last reloaded. The value read from BSEC_FVR265 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF265_B_0x0 = 0;
        /** @brief Last reload of fuse word 265 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF265_B_0x1 = 1;

    /** @brief Valid flag for shadow register 266 */
    using BSEC_OTPVLDR8_VLDF266 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 266 was last reloaded. The value read from BSEC_FVR266 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 266 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 266 was last reloaded. The value read from BSEC_FVR266 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF266_B_0x0 = 0;
        /** @brief Last reload of fuse word 266 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF266_B_0x1 = 1;

    /** @brief Valid flag for shadow register 267 */
    using BSEC_OTPVLDR8_VLDF267 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 267 was last reloaded. The value read from BSEC_FVR267 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 267 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 267 was last reloaded. The value read from BSEC_FVR267 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF267_B_0x0 = 0;
        /** @brief Last reload of fuse word 267 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF267_B_0x1 = 1;

    /** @brief Valid flag for shadow register 268 */
    using BSEC_OTPVLDR8_VLDF268 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 268 was last reloaded. The value read from BSEC_FVR268 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 268 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 268 was last reloaded. The value read from BSEC_FVR268 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF268_B_0x0 = 0;
        /** @brief Last reload of fuse word 268 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF268_B_0x1 = 1;

    /** @brief Valid flag for shadow register 269 */
    using BSEC_OTPVLDR8_VLDF269 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 269 was last reloaded. The value read from BSEC_FVR269 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 269 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 269 was last reloaded. The value read from BSEC_FVR269 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF269_B_0x0 = 0;
        /** @brief Last reload of fuse word 269 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF269_B_0x1 = 1;

    /** @brief Valid flag for shadow register 270 */
    using BSEC_OTPVLDR8_VLDF270 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 270 was last reloaded. The value read from BSEC_FVR270 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 270 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 270 was last reloaded. The value read from BSEC_FVR270 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF270_B_0x0 = 0;
        /** @brief Last reload of fuse word 270 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF270_B_0x1 = 1;

    /** @brief Valid flag for shadow register 271 */
    using BSEC_OTPVLDR8_VLDF271 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 271 was last reloaded. The value read from BSEC_FVR271 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 271 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 271 was last reloaded. The value read from BSEC_FVR271 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF271_B_0x0 = 0;
        /** @brief Last reload of fuse word 271 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF271_B_0x1 = 1;

    /** @brief Valid flag for shadow register 272 */
    using BSEC_OTPVLDR8_VLDF272 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 272 was last reloaded. The value read from BSEC_FVR272 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 272 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 272 was last reloaded. The value read from BSEC_FVR272 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF272_B_0x0 = 0;
        /** @brief Last reload of fuse word 272 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF272_B_0x1 = 1;

    /** @brief Valid flag for shadow register 273 */
    using BSEC_OTPVLDR8_VLDF273 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 273 was last reloaded. The value read from BSEC_FVR273 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 273 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 273 was last reloaded. The value read from BSEC_FVR273 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF273_B_0x0 = 0;
        /** @brief Last reload of fuse word 273 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF273_B_0x1 = 1;

    /** @brief Valid flag for shadow register 274 */
    using BSEC_OTPVLDR8_VLDF274 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 274 was last reloaded. The value read from BSEC_FVR274 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 274 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 274 was last reloaded. The value read from BSEC_FVR274 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF274_B_0x0 = 0;
        /** @brief Last reload of fuse word 274 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF274_B_0x1 = 1;

    /** @brief Valid flag for shadow register 275 */
    using BSEC_OTPVLDR8_VLDF275 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 275 was last reloaded. The value read from BSEC_FVR275 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 275 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 275 was last reloaded. The value read from BSEC_FVR275 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF275_B_0x0 = 0;
        /** @brief Last reload of fuse word 275 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF275_B_0x1 = 1;

    /** @brief Valid flag for shadow register 276 */
    using BSEC_OTPVLDR8_VLDF276 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 276 was last reloaded. The value read from BSEC_FVR276 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 276 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 276 was last reloaded. The value read from BSEC_FVR276 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF276_B_0x0 = 0;
        /** @brief Last reload of fuse word 276 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF276_B_0x1 = 1;

    /** @brief Valid flag for shadow register 277 */
    using BSEC_OTPVLDR8_VLDF277 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 277 was last reloaded. The value read from BSEC_FVR277 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 277 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 277 was last reloaded. The value read from BSEC_FVR277 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF277_B_0x0 = 0;
        /** @brief Last reload of fuse word 277 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF277_B_0x1 = 1;

    /** @brief Valid flag for shadow register 278 */
    using BSEC_OTPVLDR8_VLDF278 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 278 was last reloaded. The value read from BSEC_FVR278 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 278 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 278 was last reloaded. The value read from BSEC_FVR278 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF278_B_0x0 = 0;
        /** @brief Last reload of fuse word 278 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF278_B_0x1 = 1;

    /** @brief Valid flag for shadow register 279 */
    using BSEC_OTPVLDR8_VLDF279 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 279 was last reloaded. The value read from BSEC_FVR279 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 279 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 279 was last reloaded. The value read from BSEC_FVR279 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF279_B_0x0 = 0;
        /** @brief Last reload of fuse word 279 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF279_B_0x1 = 1;

    /** @brief Valid flag for shadow register 280 */
    using BSEC_OTPVLDR8_VLDF280 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 280 was last reloaded. The value read from BSEC_FVR280 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 280 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 280 was last reloaded. The value read from BSEC_FVR280 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF280_B_0x0 = 0;
        /** @brief Last reload of fuse word 280 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF280_B_0x1 = 1;

    /** @brief Valid flag for shadow register 281 */
    using BSEC_OTPVLDR8_VLDF281 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 281 was last reloaded. The value read from BSEC_FVR281 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 281 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 281 was last reloaded. The value read from BSEC_FVR281 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF281_B_0x0 = 0;
        /** @brief Last reload of fuse word 281 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF281_B_0x1 = 1;

    /** @brief Valid flag for shadow register 282 */
    using BSEC_OTPVLDR8_VLDF282 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 282 was last reloaded. The value read from BSEC_FVR282 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 282 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 282 was last reloaded. The value read from BSEC_FVR282 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF282_B_0x0 = 0;
        /** @brief Last reload of fuse word 282 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF282_B_0x1 = 1;

    /** @brief Valid flag for shadow register 283 */
    using BSEC_OTPVLDR8_VLDF283 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 283 was last reloaded. The value read from BSEC_FVR283 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 283 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 283 was last reloaded. The value read from BSEC_FVR283 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF283_B_0x0 = 0;
        /** @brief Last reload of fuse word 283 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF283_B_0x1 = 1;

    /** @brief Valid flag for shadow register 284 */
    using BSEC_OTPVLDR8_VLDF284 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 284 was last reloaded. The value read from BSEC_FVR284 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 284 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 284 was last reloaded. The value read from BSEC_FVR284 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF284_B_0x0 = 0;
        /** @brief Last reload of fuse word 284 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF284_B_0x1 = 1;

    /** @brief Valid flag for shadow register 285 */
    using BSEC_OTPVLDR8_VLDF285 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 285 was last reloaded. The value read from BSEC_FVR285 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 285 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 285 was last reloaded. The value read from BSEC_FVR285 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF285_B_0x0 = 0;
        /** @brief Last reload of fuse word 285 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF285_B_0x1 = 1;

    /** @brief Valid flag for shadow register 286 */
    using BSEC_OTPVLDR8_VLDF286 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 286 was last reloaded. The value read from BSEC_FVR286 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 286 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 286 was last reloaded. The value read from BSEC_FVR286 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF286_B_0x0 = 0;
        /** @brief Last reload of fuse word 286 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF286_B_0x1 = 1;

    /** @brief Valid flag for shadow register 287 */
    using BSEC_OTPVLDR8_VLDF287 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 287 was last reloaded. The value read from BSEC_FVR287 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 287 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 287 was last reloaded. The value read from BSEC_FVR287 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF287_B_0x0 = 0;
        /** @brief Last reload of fuse word 287 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR8_VLDF287_B_0x1 = 1;

    /** @brief BSEC OTP valid register 9 */
    using BSEC_OTPVLDR9 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8E4, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 288 */
    using BSEC_OTPVLDR9_VLDF288 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 288 was last reloaded. The value read from BSEC_FVR288 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 288 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 288 was last reloaded. The value read from BSEC_FVR288 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF288_B_0x0 = 0;
        /** @brief Last reload of fuse word 288 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF288_B_0x1 = 1;

    /** @brief Valid flag for shadow register 289 */
    using BSEC_OTPVLDR9_VLDF289 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 289 was last reloaded. The value read from BSEC_FVR289 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 289 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 289 was last reloaded. The value read from BSEC_FVR289 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF289_B_0x0 = 0;
        /** @brief Last reload of fuse word 289 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF289_B_0x1 = 1;

    /** @brief Valid flag for shadow register 290 */
    using BSEC_OTPVLDR9_VLDF290 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 290 was last reloaded. The value read from BSEC_FVR290 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 290 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 290 was last reloaded. The value read from BSEC_FVR290 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF290_B_0x0 = 0;
        /** @brief Last reload of fuse word 290 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF290_B_0x1 = 1;

    /** @brief Valid flag for shadow register 291 */
    using BSEC_OTPVLDR9_VLDF291 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 291 was last reloaded. The value read from BSEC_FVR291 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 291 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 291 was last reloaded. The value read from BSEC_FVR291 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF291_B_0x0 = 0;
        /** @brief Last reload of fuse word 291 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF291_B_0x1 = 1;

    /** @brief Valid flag for shadow register 292 */
    using BSEC_OTPVLDR9_VLDF292 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 292 was last reloaded. The value read from BSEC_FVR292 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 292 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 292 was last reloaded. The value read from BSEC_FVR292 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF292_B_0x0 = 0;
        /** @brief Last reload of fuse word 292 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF292_B_0x1 = 1;

    /** @brief Valid flag for shadow register 293 */
    using BSEC_OTPVLDR9_VLDF293 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 293 was last reloaded. The value read from BSEC_FVR293 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 293 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 293 was last reloaded. The value read from BSEC_FVR293 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF293_B_0x0 = 0;
        /** @brief Last reload of fuse word 293 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF293_B_0x1 = 1;

    /** @brief Valid flag for shadow register 294 */
    using BSEC_OTPVLDR9_VLDF294 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 294 was last reloaded. The value read from BSEC_FVR294 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 294 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 294 was last reloaded. The value read from BSEC_FVR294 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF294_B_0x0 = 0;
        /** @brief Last reload of fuse word 294 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF294_B_0x1 = 1;

    /** @brief Valid flag for shadow register 295 */
    using BSEC_OTPVLDR9_VLDF295 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 295 was last reloaded. The value read from BSEC_FVR295 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 295 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 295 was last reloaded. The value read from BSEC_FVR295 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF295_B_0x0 = 0;
        /** @brief Last reload of fuse word 295 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF295_B_0x1 = 1;

    /** @brief Valid flag for shadow register 296 */
    using BSEC_OTPVLDR9_VLDF296 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 296 was last reloaded. The value read from BSEC_FVR296 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 296 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 296 was last reloaded. The value read from BSEC_FVR296 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF296_B_0x0 = 0;
        /** @brief Last reload of fuse word 296 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF296_B_0x1 = 1;

    /** @brief Valid flag for shadow register 297 */
    using BSEC_OTPVLDR9_VLDF297 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 297 was last reloaded. The value read from BSEC_FVR297 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 297 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 297 was last reloaded. The value read from BSEC_FVR297 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF297_B_0x0 = 0;
        /** @brief Last reload of fuse word 297 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF297_B_0x1 = 1;

    /** @brief Valid flag for shadow register 298 */
    using BSEC_OTPVLDR9_VLDF298 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 298 was last reloaded. The value read from BSEC_FVR298 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 298 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 298 was last reloaded. The value read from BSEC_FVR298 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF298_B_0x0 = 0;
        /** @brief Last reload of fuse word 298 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF298_B_0x1 = 1;

    /** @brief Valid flag for shadow register 299 */
    using BSEC_OTPVLDR9_VLDF299 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 299 was last reloaded. The value read from BSEC_FVR299 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 299 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 299 was last reloaded. The value read from BSEC_FVR299 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF299_B_0x0 = 0;
        /** @brief Last reload of fuse word 299 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF299_B_0x1 = 1;

    /** @brief Valid flag for shadow register 300 */
    using BSEC_OTPVLDR9_VLDF300 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 300 was last reloaded. The value read from BSEC_FVR300 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 300 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 300 was last reloaded. The value read from BSEC_FVR300 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF300_B_0x0 = 0;
        /** @brief Last reload of fuse word 300 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF300_B_0x1 = 1;

    /** @brief Valid flag for shadow register 301 */
    using BSEC_OTPVLDR9_VLDF301 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 301 was last reloaded. The value read from BSEC_FVR301 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 301 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 301 was last reloaded. The value read from BSEC_FVR301 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF301_B_0x0 = 0;
        /** @brief Last reload of fuse word 301 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF301_B_0x1 = 1;

    /** @brief Valid flag for shadow register 302 */
    using BSEC_OTPVLDR9_VLDF302 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 302 was last reloaded. The value read from BSEC_FVR302 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 302 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 302 was last reloaded. The value read from BSEC_FVR302 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF302_B_0x0 = 0;
        /** @brief Last reload of fuse word 302 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF302_B_0x1 = 1;

    /** @brief Valid flag for shadow register 303 */
    using BSEC_OTPVLDR9_VLDF303 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 303 was last reloaded. The value read from BSEC_FVR303 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 303 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 303 was last reloaded. The value read from BSEC_FVR303 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF303_B_0x0 = 0;
        /** @brief Last reload of fuse word 303 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF303_B_0x1 = 1;

    /** @brief Valid flag for shadow register 304 */
    using BSEC_OTPVLDR9_VLDF304 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 304 was last reloaded. The value read from BSEC_FVR304 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 304 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 304 was last reloaded. The value read from BSEC_FVR304 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF304_B_0x0 = 0;
        /** @brief Last reload of fuse word 304 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF304_B_0x1 = 1;

    /** @brief Valid flag for shadow register 305 */
    using BSEC_OTPVLDR9_VLDF305 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 305 was last reloaded. The value read from BSEC_FVR305 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 305 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 305 was last reloaded. The value read from BSEC_FVR305 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF305_B_0x0 = 0;
        /** @brief Last reload of fuse word 305 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF305_B_0x1 = 1;

    /** @brief Valid flag for shadow register 306 */
    using BSEC_OTPVLDR9_VLDF306 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 306 was last reloaded. The value read from BSEC_FVR306 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 306 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 306 was last reloaded. The value read from BSEC_FVR306 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF306_B_0x0 = 0;
        /** @brief Last reload of fuse word 306 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF306_B_0x1 = 1;

    /** @brief Valid flag for shadow register 307 */
    using BSEC_OTPVLDR9_VLDF307 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 307 was last reloaded. The value read from BSEC_FVR307 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 307 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 307 was last reloaded. The value read from BSEC_FVR307 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF307_B_0x0 = 0;
        /** @brief Last reload of fuse word 307 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF307_B_0x1 = 1;

    /** @brief Valid flag for shadow register 308 */
    using BSEC_OTPVLDR9_VLDF308 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 308 was last reloaded. The value read from BSEC_FVR308 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 308 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 308 was last reloaded. The value read from BSEC_FVR308 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF308_B_0x0 = 0;
        /** @brief Last reload of fuse word 308 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF308_B_0x1 = 1;

    /** @brief Valid flag for shadow register 309 */
    using BSEC_OTPVLDR9_VLDF309 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 309 was last reloaded. The value read from BSEC_FVR309 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 309 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 309 was last reloaded. The value read from BSEC_FVR309 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF309_B_0x0 = 0;
        /** @brief Last reload of fuse word 309 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF309_B_0x1 = 1;

    /** @brief Valid flag for shadow register 310 */
    using BSEC_OTPVLDR9_VLDF310 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 310 was last reloaded. The value read from BSEC_FVR310 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 310 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 310 was last reloaded. The value read from BSEC_FVR310 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF310_B_0x0 = 0;
        /** @brief Last reload of fuse word 310 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF310_B_0x1 = 1;

    /** @brief Valid flag for shadow register 311 */
    using BSEC_OTPVLDR9_VLDF311 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 311 was last reloaded. The value read from BSEC_FVR311 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 311 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 311 was last reloaded. The value read from BSEC_FVR311 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF311_B_0x0 = 0;
        /** @brief Last reload of fuse word 311 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF311_B_0x1 = 1;

    /** @brief Valid flag for shadow register 312 */
    using BSEC_OTPVLDR9_VLDF312 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 312 was last reloaded. The value read from BSEC_FVR312 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 312 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 312 was last reloaded. The value read from BSEC_FVR312 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF312_B_0x0 = 0;
        /** @brief Last reload of fuse word 312 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF312_B_0x1 = 1;

    /** @brief Valid flag for shadow register 313 */
    using BSEC_OTPVLDR9_VLDF313 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 313 was last reloaded. The value read from BSEC_FVR313 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 313 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 313 was last reloaded. The value read from BSEC_FVR313 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF313_B_0x0 = 0;
        /** @brief Last reload of fuse word 313 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF313_B_0x1 = 1;

    /** @brief Valid flag for shadow register 314 */
    using BSEC_OTPVLDR9_VLDF314 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 314 was last reloaded. The value read from BSEC_FVR314 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 314 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 314 was last reloaded. The value read from BSEC_FVR314 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF314_B_0x0 = 0;
        /** @brief Last reload of fuse word 314 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF314_B_0x1 = 1;

    /** @brief Valid flag for shadow register 315 */
    using BSEC_OTPVLDR9_VLDF315 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 315 was last reloaded. The value read from BSEC_FVR315 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 315 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 315 was last reloaded. The value read from BSEC_FVR315 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF315_B_0x0 = 0;
        /** @brief Last reload of fuse word 315 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF315_B_0x1 = 1;

    /** @brief Valid flag for shadow register 316 */
    using BSEC_OTPVLDR9_VLDF316 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 316 was last reloaded. The value read from BSEC_FVR316 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 316 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 316 was last reloaded. The value read from BSEC_FVR316 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF316_B_0x0 = 0;
        /** @brief Last reload of fuse word 316 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF316_B_0x1 = 1;

    /** @brief Valid flag for shadow register 317 */
    using BSEC_OTPVLDR9_VLDF317 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 317 was last reloaded. The value read from BSEC_FVR317 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 317 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 317 was last reloaded. The value read from BSEC_FVR317 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF317_B_0x0 = 0;
        /** @brief Last reload of fuse word 317 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF317_B_0x1 = 1;

    /** @brief Valid flag for shadow register 318 */
    using BSEC_OTPVLDR9_VLDF318 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 318 was last reloaded. The value read from BSEC_FVR318 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 318 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 318 was last reloaded. The value read from BSEC_FVR318 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF318_B_0x0 = 0;
        /** @brief Last reload of fuse word 318 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF318_B_0x1 = 1;

    /** @brief Valid flag for shadow register 319 */
    using BSEC_OTPVLDR9_VLDF319 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 319 was last reloaded. The value read from BSEC_FVR319 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 319 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 319 was last reloaded. The value read from BSEC_FVR319 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF319_B_0x0 = 0;
        /** @brief Last reload of fuse word 319 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR9_VLDF319_B_0x1 = 1;

    /** @brief BSEC OTP valid register 10 */
    using BSEC_OTPVLDR10 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8E8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 320 */
    using BSEC_OTPVLDR10_VLDF320 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 320 was last reloaded. The value read from BSEC_FVR320 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 320 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 320 was last reloaded. The value read from BSEC_FVR320 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF320_B_0x0 = 0;
        /** @brief Last reload of fuse word 320 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF320_B_0x1 = 1;

    /** @brief Valid flag for shadow register 321 */
    using BSEC_OTPVLDR10_VLDF321 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 321 was last reloaded. The value read from BSEC_FVR321 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 321 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 321 was last reloaded. The value read from BSEC_FVR321 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF321_B_0x0 = 0;
        /** @brief Last reload of fuse word 321 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF321_B_0x1 = 1;

    /** @brief Valid flag for shadow register 322 */
    using BSEC_OTPVLDR10_VLDF322 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 322 was last reloaded. The value read from BSEC_FVR322 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 322 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 322 was last reloaded. The value read from BSEC_FVR322 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF322_B_0x0 = 0;
        /** @brief Last reload of fuse word 322 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF322_B_0x1 = 1;

    /** @brief Valid flag for shadow register 323 */
    using BSEC_OTPVLDR10_VLDF323 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 323 was last reloaded. The value read from BSEC_FVR323 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 323 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 323 was last reloaded. The value read from BSEC_FVR323 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF323_B_0x0 = 0;
        /** @brief Last reload of fuse word 323 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF323_B_0x1 = 1;

    /** @brief Valid flag for shadow register 324 */
    using BSEC_OTPVLDR10_VLDF324 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 324 was last reloaded. The value read from BSEC_FVR324 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 324 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 324 was last reloaded. The value read from BSEC_FVR324 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF324_B_0x0 = 0;
        /** @brief Last reload of fuse word 324 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF324_B_0x1 = 1;

    /** @brief Valid flag for shadow register 325 */
    using BSEC_OTPVLDR10_VLDF325 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 325 was last reloaded. The value read from BSEC_FVR325 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 325 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 325 was last reloaded. The value read from BSEC_FVR325 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF325_B_0x0 = 0;
        /** @brief Last reload of fuse word 325 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF325_B_0x1 = 1;

    /** @brief Valid flag for shadow register 326 */
    using BSEC_OTPVLDR10_VLDF326 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 326 was last reloaded. The value read from BSEC_FVR326 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 326 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 326 was last reloaded. The value read from BSEC_FVR326 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF326_B_0x0 = 0;
        /** @brief Last reload of fuse word 326 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF326_B_0x1 = 1;

    /** @brief Valid flag for shadow register 327 */
    using BSEC_OTPVLDR10_VLDF327 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 327 was last reloaded. The value read from BSEC_FVR327 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 327 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 327 was last reloaded. The value read from BSEC_FVR327 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF327_B_0x0 = 0;
        /** @brief Last reload of fuse word 327 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF327_B_0x1 = 1;

    /** @brief Valid flag for shadow register 328 */
    using BSEC_OTPVLDR10_VLDF328 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 328 was last reloaded. The value read from BSEC_FVR328 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 328 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 328 was last reloaded. The value read from BSEC_FVR328 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF328_B_0x0 = 0;
        /** @brief Last reload of fuse word 328 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF328_B_0x1 = 1;

    /** @brief Valid flag for shadow register 329 */
    using BSEC_OTPVLDR10_VLDF329 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 329 was last reloaded. The value read from BSEC_FVR329 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 329 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 329 was last reloaded. The value read from BSEC_FVR329 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF329_B_0x0 = 0;
        /** @brief Last reload of fuse word 329 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF329_B_0x1 = 1;

    /** @brief Valid flag for shadow register 330 */
    using BSEC_OTPVLDR10_VLDF330 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 330 was last reloaded. The value read from BSEC_FVR330 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 330 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 330 was last reloaded. The value read from BSEC_FVR330 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF330_B_0x0 = 0;
        /** @brief Last reload of fuse word 330 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF330_B_0x1 = 1;

    /** @brief Valid flag for shadow register 331 */
    using BSEC_OTPVLDR10_VLDF331 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 331 was last reloaded. The value read from BSEC_FVR331 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 331 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 331 was last reloaded. The value read from BSEC_FVR331 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF331_B_0x0 = 0;
        /** @brief Last reload of fuse word 331 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF331_B_0x1 = 1;

    /** @brief Valid flag for shadow register 332 */
    using BSEC_OTPVLDR10_VLDF332 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 332 was last reloaded. The value read from BSEC_FVR332 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 332 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 332 was last reloaded. The value read from BSEC_FVR332 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF332_B_0x0 = 0;
        /** @brief Last reload of fuse word 332 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF332_B_0x1 = 1;

    /** @brief Valid flag for shadow register 333 */
    using BSEC_OTPVLDR10_VLDF333 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 333 was last reloaded. The value read from BSEC_FVR333 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 333 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 333 was last reloaded. The value read from BSEC_FVR333 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF333_B_0x0 = 0;
        /** @brief Last reload of fuse word 333 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF333_B_0x1 = 1;

    /** @brief Valid flag for shadow register 334 */
    using BSEC_OTPVLDR10_VLDF334 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 334 was last reloaded. The value read from BSEC_FVR334 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 334 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 334 was last reloaded. The value read from BSEC_FVR334 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF334_B_0x0 = 0;
        /** @brief Last reload of fuse word 334 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF334_B_0x1 = 1;

    /** @brief Valid flag for shadow register 335 */
    using BSEC_OTPVLDR10_VLDF335 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 335 was last reloaded. The value read from BSEC_FVR335 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 335 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 335 was last reloaded. The value read from BSEC_FVR335 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF335_B_0x0 = 0;
        /** @brief Last reload of fuse word 335 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF335_B_0x1 = 1;

    /** @brief Valid flag for shadow register 336 */
    using BSEC_OTPVLDR10_VLDF336 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 336 was last reloaded. The value read from BSEC_FVR336 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 336 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 336 was last reloaded. The value read from BSEC_FVR336 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF336_B_0x0 = 0;
        /** @brief Last reload of fuse word 336 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF336_B_0x1 = 1;

    /** @brief Valid flag for shadow register 337 */
    using BSEC_OTPVLDR10_VLDF337 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 337 was last reloaded. The value read from BSEC_FVR337 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 337 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 337 was last reloaded. The value read from BSEC_FVR337 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF337_B_0x0 = 0;
        /** @brief Last reload of fuse word 337 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF337_B_0x1 = 1;

    /** @brief Valid flag for shadow register 338 */
    using BSEC_OTPVLDR10_VLDF338 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 338 was last reloaded. The value read from BSEC_FVR338 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 338 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 338 was last reloaded. The value read from BSEC_FVR338 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF338_B_0x0 = 0;
        /** @brief Last reload of fuse word 338 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF338_B_0x1 = 1;

    /** @brief Valid flag for shadow register 339 */
    using BSEC_OTPVLDR10_VLDF339 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 339 was last reloaded. The value read from BSEC_FVR339 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 339 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 339 was last reloaded. The value read from BSEC_FVR339 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF339_B_0x0 = 0;
        /** @brief Last reload of fuse word 339 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF339_B_0x1 = 1;

    /** @brief Valid flag for shadow register 340 */
    using BSEC_OTPVLDR10_VLDF340 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 340 was last reloaded. The value read from BSEC_FVR340 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 340 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 340 was last reloaded. The value read from BSEC_FVR340 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF340_B_0x0 = 0;
        /** @brief Last reload of fuse word 340 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF340_B_0x1 = 1;

    /** @brief Valid flag for shadow register 341 */
    using BSEC_OTPVLDR10_VLDF341 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 341 was last reloaded. The value read from BSEC_FVR341 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 341 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 341 was last reloaded. The value read from BSEC_FVR341 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF341_B_0x0 = 0;
        /** @brief Last reload of fuse word 341 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF341_B_0x1 = 1;

    /** @brief Valid flag for shadow register 342 */
    using BSEC_OTPVLDR10_VLDF342 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 342 was last reloaded. The value read from BSEC_FVR342 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 342 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 342 was last reloaded. The value read from BSEC_FVR342 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF342_B_0x0 = 0;
        /** @brief Last reload of fuse word 342 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF342_B_0x1 = 1;

    /** @brief Valid flag for shadow register 343 */
    using BSEC_OTPVLDR10_VLDF343 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 343 was last reloaded. The value read from BSEC_FVR343 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 343 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 343 was last reloaded. The value read from BSEC_FVR343 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF343_B_0x0 = 0;
        /** @brief Last reload of fuse word 343 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF343_B_0x1 = 1;

    /** @brief Valid flag for shadow register 344 */
    using BSEC_OTPVLDR10_VLDF344 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 344 was last reloaded. The value read from BSEC_FVR344 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 344 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 344 was last reloaded. The value read from BSEC_FVR344 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF344_B_0x0 = 0;
        /** @brief Last reload of fuse word 344 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF344_B_0x1 = 1;

    /** @brief Valid flag for shadow register 345 */
    using BSEC_OTPVLDR10_VLDF345 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 345 was last reloaded. The value read from BSEC_FVR345 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 345 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 345 was last reloaded. The value read from BSEC_FVR345 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF345_B_0x0 = 0;
        /** @brief Last reload of fuse word 345 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF345_B_0x1 = 1;

    /** @brief Valid flag for shadow register 346 */
    using BSEC_OTPVLDR10_VLDF346 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 346 was last reloaded. The value read from BSEC_FVR346 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 346 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 346 was last reloaded. The value read from BSEC_FVR346 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF346_B_0x0 = 0;
        /** @brief Last reload of fuse word 346 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF346_B_0x1 = 1;

    /** @brief Valid flag for shadow register 347 */
    using BSEC_OTPVLDR10_VLDF347 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 347 was last reloaded. The value read from BSEC_FVR347 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 347 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 347 was last reloaded. The value read from BSEC_FVR347 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF347_B_0x0 = 0;
        /** @brief Last reload of fuse word 347 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF347_B_0x1 = 1;

    /** @brief Valid flag for shadow register 348 */
    using BSEC_OTPVLDR10_VLDF348 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 348 was last reloaded. The value read from BSEC_FVR348 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 348 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 348 was last reloaded. The value read from BSEC_FVR348 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF348_B_0x0 = 0;
        /** @brief Last reload of fuse word 348 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF348_B_0x1 = 1;

    /** @brief Valid flag for shadow register 349 */
    using BSEC_OTPVLDR10_VLDF349 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 349 was last reloaded. The value read from BSEC_FVR349 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 349 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 349 was last reloaded. The value read from BSEC_FVR349 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF349_B_0x0 = 0;
        /** @brief Last reload of fuse word 349 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF349_B_0x1 = 1;

    /** @brief Valid flag for shadow register 350 */
    using BSEC_OTPVLDR10_VLDF350 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 350 was last reloaded. The value read from BSEC_FVR350 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 350 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 350 was last reloaded. The value read from BSEC_FVR350 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF350_B_0x0 = 0;
        /** @brief Last reload of fuse word 350 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF350_B_0x1 = 1;

    /** @brief Valid flag for shadow register 351 */
    using BSEC_OTPVLDR10_VLDF351 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 351 was last reloaded. The value read from BSEC_FVR351 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 351 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 351 was last reloaded. The value read from BSEC_FVR351 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF351_B_0x0 = 0;
        /** @brief Last reload of fuse word 351 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR10_VLDF351_B_0x1 = 1;

    /** @brief BSEC OTP valid register 11 */
    using BSEC_OTPVLDR11 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x8EC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Valid flag for shadow register 352 */
    using BSEC_OTPVLDR11_VLDF352 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 352 was last reloaded. The value read from BSEC_FVR352 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 352 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 352 was last reloaded. The value read from BSEC_FVR352 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF352_B_0x0 = 0;
        /** @brief Last reload of fuse word 352 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF352_B_0x1 = 1;

    /** @brief Valid flag for shadow register 353 */
    using BSEC_OTPVLDR11_VLDF353 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 353 was last reloaded. The value read from BSEC_FVR353 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 353 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 353 was last reloaded. The value read from BSEC_FVR353 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF353_B_0x0 = 0;
        /** @brief Last reload of fuse word 353 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF353_B_0x1 = 1;

    /** @brief Valid flag for shadow register 354 */
    using BSEC_OTPVLDR11_VLDF354 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 354 was last reloaded. The value read from BSEC_FVR354 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 354 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 354 was last reloaded. The value read from BSEC_FVR354 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF354_B_0x0 = 0;
        /** @brief Last reload of fuse word 354 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF354_B_0x1 = 1;

    /** @brief Valid flag for shadow register 355 */
    using BSEC_OTPVLDR11_VLDF355 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 355 was last reloaded. The value read from BSEC_FVR355 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 355 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 355 was last reloaded. The value read from BSEC_FVR355 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF355_B_0x0 = 0;
        /** @brief Last reload of fuse word 355 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF355_B_0x1 = 1;

    /** @brief Valid flag for shadow register 356 */
    using BSEC_OTPVLDR11_VLDF356 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 356 was last reloaded. The value read from BSEC_FVR356 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 356 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 356 was last reloaded. The value read from BSEC_FVR356 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF356_B_0x0 = 0;
        /** @brief Last reload of fuse word 356 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF356_B_0x1 = 1;

    /** @brief Valid flag for shadow register 357 */
    using BSEC_OTPVLDR11_VLDF357 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 357 was last reloaded. The value read from BSEC_FVR357 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 357 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 357 was last reloaded. The value read from BSEC_FVR357 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF357_B_0x0 = 0;
        /** @brief Last reload of fuse word 357 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF357_B_0x1 = 1;

    /** @brief Valid flag for shadow register 358 */
    using BSEC_OTPVLDR11_VLDF358 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 358 was last reloaded. The value read from BSEC_FVR358 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 358 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 358 was last reloaded. The value read from BSEC_FVR358 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF358_B_0x0 = 0;
        /** @brief Last reload of fuse word 358 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF358_B_0x1 = 1;

    /** @brief Valid flag for shadow register 359 */
    using BSEC_OTPVLDR11_VLDF359 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 359 was last reloaded. The value read from BSEC_FVR359 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 359 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 359 was last reloaded. The value read from BSEC_FVR359 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF359_B_0x0 = 0;
        /** @brief Last reload of fuse word 359 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF359_B_0x1 = 1;

    /** @brief Valid flag for shadow register 360 */
    using BSEC_OTPVLDR11_VLDF360 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 360 was last reloaded. The value read from BSEC_FVR360 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 360 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 360 was last reloaded. The value read from BSEC_FVR360 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF360_B_0x0 = 0;
        /** @brief Last reload of fuse word 360 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF360_B_0x1 = 1;

    /** @brief Valid flag for shadow register 361 */
    using BSEC_OTPVLDR11_VLDF361 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 361 was last reloaded. The value read from BSEC_FVR361 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 361 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 361 was last reloaded. The value read from BSEC_FVR361 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF361_B_0x0 = 0;
        /** @brief Last reload of fuse word 361 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF361_B_0x1 = 1;

    /** @brief Valid flag for shadow register 362 */
    using BSEC_OTPVLDR11_VLDF362 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 362 was last reloaded. The value read from BSEC_FVR362 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 362 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 362 was last reloaded. The value read from BSEC_FVR362 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF362_B_0x0 = 0;
        /** @brief Last reload of fuse word 362 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF362_B_0x1 = 1;

    /** @brief Valid flag for shadow register 363 */
    using BSEC_OTPVLDR11_VLDF363 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 363 was last reloaded. The value read from BSEC_FVR363 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 363 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 363 was last reloaded. The value read from BSEC_FVR363 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF363_B_0x0 = 0;
        /** @brief Last reload of fuse word 363 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF363_B_0x1 = 1;

    /** @brief Valid flag for shadow register 364 */
    using BSEC_OTPVLDR11_VLDF364 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 364 was last reloaded. The value read from BSEC_FVR364 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 364 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 364 was last reloaded. The value read from BSEC_FVR364 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF364_B_0x0 = 0;
        /** @brief Last reload of fuse word 364 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF364_B_0x1 = 1;

    /** @brief Valid flag for shadow register 365 */
    using BSEC_OTPVLDR11_VLDF365 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 365 was last reloaded. The value read from BSEC_FVR365 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 365 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 365 was last reloaded. The value read from BSEC_FVR365 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF365_B_0x0 = 0;
        /** @brief Last reload of fuse word 365 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF365_B_0x1 = 1;

    /** @brief Valid flag for shadow register 366 */
    using BSEC_OTPVLDR11_VLDF366 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 366 was last reloaded. The value read from BSEC_FVR366 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 366 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 366 was last reloaded. The value read from BSEC_FVR366 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF366_B_0x0 = 0;
        /** @brief Last reload of fuse word 366 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF366_B_0x1 = 1;

    /** @brief Valid flag for shadow register 367 */
    using BSEC_OTPVLDR11_VLDF367 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 367 was last reloaded. The value read from BSEC_FVR367 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 367 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 367 was last reloaded. The value read from BSEC_FVR367 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF367_B_0x0 = 0;
        /** @brief Last reload of fuse word 367 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF367_B_0x1 = 1;

    /** @brief Valid flag for shadow register 368 */
    using BSEC_OTPVLDR11_VLDF368 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 368 was last reloaded. The value read from BSEC_FVR368 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 368 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 368 was last reloaded. The value read from BSEC_FVR368 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF368_B_0x0 = 0;
        /** @brief Last reload of fuse word 368 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF368_B_0x1 = 1;

    /** @brief Valid flag for shadow register 369 */
    using BSEC_OTPVLDR11_VLDF369 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 369 was last reloaded. The value read from BSEC_FVR369 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 369 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 369 was last reloaded. The value read from BSEC_FVR369 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF369_B_0x0 = 0;
        /** @brief Last reload of fuse word 369 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF369_B_0x1 = 1;

    /** @brief Valid flag for shadow register 370 */
    using BSEC_OTPVLDR11_VLDF370 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 370 was last reloaded. The value read from BSEC_FVR370 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 370 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 370 was last reloaded. The value read from BSEC_FVR370 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF370_B_0x0 = 0;
        /** @brief Last reload of fuse word 370 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF370_B_0x1 = 1;

    /** @brief Valid flag for shadow register 371 */
    using BSEC_OTPVLDR11_VLDF371 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 371 was last reloaded. The value read from BSEC_FVR371 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 371 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 371 was last reloaded. The value read from BSEC_FVR371 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF371_B_0x0 = 0;
        /** @brief Last reload of fuse word 371 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF371_B_0x1 = 1;

    /** @brief Valid flag for shadow register 372 */
    using BSEC_OTPVLDR11_VLDF372 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 372 was last reloaded. The value read from BSEC_FVR372 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 372 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 372 was last reloaded. The value read from BSEC_FVR372 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF372_B_0x0 = 0;
        /** @brief Last reload of fuse word 372 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF372_B_0x1 = 1;

    /** @brief Valid flag for shadow register 373 */
    using BSEC_OTPVLDR11_VLDF373 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 373 was last reloaded. The value read from BSEC_FVR373 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 373 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 373 was last reloaded. The value read from BSEC_FVR373 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF373_B_0x0 = 0;
        /** @brief Last reload of fuse word 373 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF373_B_0x1 = 1;

    /** @brief Valid flag for shadow register 374 */
    using BSEC_OTPVLDR11_VLDF374 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 374 was last reloaded. The value read from BSEC_FVR374 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 374 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 374 was last reloaded. The value read from BSEC_FVR374 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF374_B_0x0 = 0;
        /** @brief Last reload of fuse word 374 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF374_B_0x1 = 1;

    /** @brief Valid flag for shadow register 375 */
    using BSEC_OTPVLDR11_VLDF375 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 375 was last reloaded. The value read from BSEC_FVR375 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 375 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 375 was last reloaded. The value read from BSEC_FVR375 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF375_B_0x0 = 0;
        /** @brief Last reload of fuse word 375 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF375_B_0x1 = 1;

    /** @brief Valid flag for shadow register 376 */
    using BSEC_OTPVLDR11_VLDF376 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 376 was last reloaded. The value read from BSEC_FVR376 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 376 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 376 was last reloaded. The value read from BSEC_FVR376 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF376_B_0x0 = 0;
        /** @brief Last reload of fuse word 376 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF376_B_0x1 = 1;

    /** @brief Valid flag for shadow register 377 */
    using BSEC_OTPVLDR11_VLDF377 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 377 was last reloaded. The value read from BSEC_FVR377 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 377 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 377 was last reloaded. The value read from BSEC_FVR377 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF377_B_0x0 = 0;
        /** @brief Last reload of fuse word 377 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF377_B_0x1 = 1;

    /** @brief Valid flag for shadow register 378 */
    using BSEC_OTPVLDR11_VLDF378 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 378 was last reloaded. The value read from BSEC_FVR378 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 378 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 378 was last reloaded. The value read from BSEC_FVR378 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF378_B_0x0 = 0;
        /** @brief Last reload of fuse word 378 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF378_B_0x1 = 1;

    /** @brief Valid flag for shadow register 379 */
    using BSEC_OTPVLDR11_VLDF379 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 379 was last reloaded. The value read from BSEC_FVR379 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 379 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 379 was last reloaded. The value read from BSEC_FVR379 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF379_B_0x0 = 0;
        /** @brief Last reload of fuse word 379 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF379_B_0x1 = 1;

    /** @brief Valid flag for shadow register 380 */
    using BSEC_OTPVLDR11_VLDF380 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 380 was last reloaded. The value read from BSEC_FVR380 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 380 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 380 was last reloaded. The value read from BSEC_FVR380 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF380_B_0x0 = 0;
        /** @brief Last reload of fuse word 380 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF380_B_0x1 = 1;

    /** @brief Valid flag for shadow register 381 */
    using BSEC_OTPVLDR11_VLDF381 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 381 was last reloaded. The value read from BSEC_FVR381 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 381 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 381 was last reloaded. The value read from BSEC_FVR381 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF381_B_0x0 = 0;
        /** @brief Last reload of fuse word 381 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF381_B_0x1 = 1;

    /** @brief Valid flag for shadow register 382 */
    using BSEC_OTPVLDR11_VLDF382 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 382 was last reloaded. The value read from BSEC_FVR382 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 382 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 382 was last reloaded. The value read from BSEC_FVR382 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF382_B_0x0 = 0;
        /** @brief Last reload of fuse word 382 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF382_B_0x1 = 1;

    /** @brief Valid flag for shadow register 383 */
    using BSEC_OTPVLDR11_VLDF383 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: An error occurred while fuse word 383 was last reloaded. The value read from BSEC_FVR383 register cannot be relied on. (value: 0)
     *          - B_0x1: Last reload of fuse word 383 was done without error. (value: 1)
     */
        /** @brief An error occurred while fuse word 383 was last reloaded. The value read from BSEC_FVR383 register cannot be relied on. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF383_B_0x0 = 0;
        /** @brief Last reload of fuse word 383 was done without error. */
    constexpr std::uint32_t BSEC_OTPVLDR11_VLDF383_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 0 */
    using BSEC_SFSR0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x940, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 0 */
    using BSEC_SFSR0_SFW0 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 0 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR0 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR0 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 0 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR0 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW0_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR0 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW0_B_0x1 = 1;

    /** @brief Shadowed fuse word 1 */
    using BSEC_SFSR0_SFW1 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 1 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR1 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR1 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 1 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR1 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW1_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR1 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW1_B_0x1 = 1;

    /** @brief Shadowed fuse word 2 */
    using BSEC_SFSR0_SFW2 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 2 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR2 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR2 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 2 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR2 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW2_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR2 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW2_B_0x1 = 1;

    /** @brief Shadowed fuse word 3 */
    using BSEC_SFSR0_SFW3 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 3 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR3 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR3 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 3 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR3 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW3_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR3 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW3_B_0x1 = 1;

    /** @brief Shadowed fuse word 4 */
    using BSEC_SFSR0_SFW4 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 4 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR4 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR4 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 4 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR4 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW4_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR4 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW4_B_0x1 = 1;

    /** @brief Shadowed fuse word 5 */
    using BSEC_SFSR0_SFW5 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 5 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR5 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR5 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 5 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR5 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW5_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR5 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW5_B_0x1 = 1;

    /** @brief Shadowed fuse word 6 */
    using BSEC_SFSR0_SFW6 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 6 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR6 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR6 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 6 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR6 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW6_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR6 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW6_B_0x1 = 1;

    /** @brief Shadowed fuse word 7 */
    using BSEC_SFSR0_SFW7 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 7 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR7 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR7 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 7 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR7 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW7_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR7 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW7_B_0x1 = 1;

    /** @brief Shadowed fuse word 8 */
    using BSEC_SFSR0_SFW8 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 8 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR8 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR8 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 8 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR8 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW8_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR8 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW8_B_0x1 = 1;

    /** @brief Shadowed fuse word 9 */
    using BSEC_SFSR0_SFW9 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 9 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR9 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR9 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 9 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR9 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW9_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR9 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW9_B_0x1 = 1;

    /** @brief Shadowed fuse word 10 */
    using BSEC_SFSR0_SFW10 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 10 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR10 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR10 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 10 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR10 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW10_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR10 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW10_B_0x1 = 1;

    /** @brief Shadowed fuse word 11 */
    using BSEC_SFSR0_SFW11 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 11 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR11 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR11 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 11 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR11 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW11_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR11 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW11_B_0x1 = 1;

    /** @brief Shadowed fuse word 12 */
    using BSEC_SFSR0_SFW12 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 12 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR12 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR12 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 12 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR12 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW12_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR12 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW12_B_0x1 = 1;

    /** @brief Shadowed fuse word 13 */
    using BSEC_SFSR0_SFW13 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 13 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR13 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR13 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 13 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR13 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW13_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR13 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW13_B_0x1 = 1;

    /** @brief Shadowed fuse word 14 */
    using BSEC_SFSR0_SFW14 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 14 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR14 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR14 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 14 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR14 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW14_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR14 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW14_B_0x1 = 1;

    /** @brief Shadowed fuse word 15 */
    using BSEC_SFSR0_SFW15 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 15 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR15 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR15 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 15 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR15 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW15_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR15 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW15_B_0x1 = 1;

    /** @brief Shadowed fuse word 16 */
    using BSEC_SFSR0_SFW16 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 16 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR16 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR16 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 16 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR16 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW16_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR16 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW16_B_0x1 = 1;

    /** @brief Shadowed fuse word 17 */
    using BSEC_SFSR0_SFW17 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 17 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR17 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR17 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 17 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR17 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW17_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR17 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW17_B_0x1 = 1;

    /** @brief Shadowed fuse word 18 */
    using BSEC_SFSR0_SFW18 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 18 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR18 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR18 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 18 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR18 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW18_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR18 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW18_B_0x1 = 1;

    /** @brief Shadowed fuse word 19 */
    using BSEC_SFSR0_SFW19 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 19 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR19 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR19 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 19 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR19 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW19_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR19 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW19_B_0x1 = 1;

    /** @brief Shadowed fuse word 20 */
    using BSEC_SFSR0_SFW20 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 20 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR20 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR20 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 20 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR20 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW20_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR20 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW20_B_0x1 = 1;

    /** @brief Shadowed fuse word 21 */
    using BSEC_SFSR0_SFW21 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 21 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR21 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR21 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 21 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR21 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW21_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR21 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW21_B_0x1 = 1;

    /** @brief Shadowed fuse word 22 */
    using BSEC_SFSR0_SFW22 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 22 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR22 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR22 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 22 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR22 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW22_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR22 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW22_B_0x1 = 1;

    /** @brief Shadowed fuse word 23 */
    using BSEC_SFSR0_SFW23 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 23 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR23 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR23 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 23 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR23 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW23_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR23 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW23_B_0x1 = 1;

    /** @brief Shadowed fuse word 24 */
    using BSEC_SFSR0_SFW24 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 24 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR24 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR24 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 24 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR24 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW24_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR24 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW24_B_0x1 = 1;

    /** @brief Shadowed fuse word 25 */
    using BSEC_SFSR0_SFW25 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 25 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR25 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR25 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 25 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR25 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW25_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR25 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW25_B_0x1 = 1;

    /** @brief Shadowed fuse word 26 */
    using BSEC_SFSR0_SFW26 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 26 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR26 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR26 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 26 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR26 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW26_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR26 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW26_B_0x1 = 1;

    /** @brief Shadowed fuse word 27 */
    using BSEC_SFSR0_SFW27 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 27 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR27 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR27 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 27 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR27 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW27_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR27 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW27_B_0x1 = 1;

    /** @brief Shadowed fuse word 28 */
    using BSEC_SFSR0_SFW28 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 28 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR28 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR28 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 28 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR28 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW28_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR28 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW28_B_0x1 = 1;

    /** @brief Shadowed fuse word 29 */
    using BSEC_SFSR0_SFW29 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 29 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR29 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR29 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 29 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR29 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW29_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR29 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW29_B_0x1 = 1;

    /** @brief Shadowed fuse word 30 */
    using BSEC_SFSR0_SFW30 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 30 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR30 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR30 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 30 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR30 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW30_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR30 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW30_B_0x1 = 1;

    /** @brief Shadowed fuse word 31 */
    using BSEC_SFSR0_SFW31 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 31 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR31 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR31 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 31 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR31 register. */
    constexpr std::uint32_t BSEC_SFSR0_SFW31_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR31 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR0_SFW31_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 1 */
    using BSEC_SFSR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x944, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 32 */
    using BSEC_SFSR1_SFW32 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 32 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR32 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR32 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 32 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR32 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW32_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR32 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW32_B_0x1 = 1;

    /** @brief Shadowed fuse word 33 */
    using BSEC_SFSR1_SFW33 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 33 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR33 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR33 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 33 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR33 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW33_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR33 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW33_B_0x1 = 1;

    /** @brief Shadowed fuse word 34 */
    using BSEC_SFSR1_SFW34 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 34 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR34 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR34 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 34 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR34 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW34_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR34 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW34_B_0x1 = 1;

    /** @brief Shadowed fuse word 35 */
    using BSEC_SFSR1_SFW35 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 35 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR35 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR35 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 35 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR35 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW35_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR35 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW35_B_0x1 = 1;

    /** @brief Shadowed fuse word 36 */
    using BSEC_SFSR1_SFW36 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 36 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR36 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR36 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 36 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR36 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW36_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR36 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW36_B_0x1 = 1;

    /** @brief Shadowed fuse word 37 */
    using BSEC_SFSR1_SFW37 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 37 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR37 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR37 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 37 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR37 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW37_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR37 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW37_B_0x1 = 1;

    /** @brief Shadowed fuse word 38 */
    using BSEC_SFSR1_SFW38 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 38 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR38 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR38 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 38 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR38 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW38_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR38 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW38_B_0x1 = 1;

    /** @brief Shadowed fuse word 39 */
    using BSEC_SFSR1_SFW39 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 39 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR39 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR39 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 39 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR39 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW39_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR39 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW39_B_0x1 = 1;

    /** @brief Shadowed fuse word 40 */
    using BSEC_SFSR1_SFW40 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 40 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR40 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR40 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 40 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR40 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW40_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR40 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW40_B_0x1 = 1;

    /** @brief Shadowed fuse word 41 */
    using BSEC_SFSR1_SFW41 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 41 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR41 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR41 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 41 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR41 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW41_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR41 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW41_B_0x1 = 1;

    /** @brief Shadowed fuse word 42 */
    using BSEC_SFSR1_SFW42 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 42 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR42 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR42 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 42 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR42 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW42_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR42 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW42_B_0x1 = 1;

    /** @brief Shadowed fuse word 43 */
    using BSEC_SFSR1_SFW43 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 43 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR43 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR43 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 43 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR43 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW43_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR43 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW43_B_0x1 = 1;

    /** @brief Shadowed fuse word 44 */
    using BSEC_SFSR1_SFW44 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 44 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR44 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR44 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 44 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR44 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW44_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR44 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW44_B_0x1 = 1;

    /** @brief Shadowed fuse word 45 */
    using BSEC_SFSR1_SFW45 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 45 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR45 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR45 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 45 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR45 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW45_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR45 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW45_B_0x1 = 1;

    /** @brief Shadowed fuse word 46 */
    using BSEC_SFSR1_SFW46 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 46 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR46 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR46 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 46 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR46 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW46_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR46 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW46_B_0x1 = 1;

    /** @brief Shadowed fuse word 47 */
    using BSEC_SFSR1_SFW47 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 47 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR47 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR47 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 47 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR47 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW47_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR47 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW47_B_0x1 = 1;

    /** @brief Shadowed fuse word 48 */
    using BSEC_SFSR1_SFW48 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 48 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR48 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR48 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 48 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR48 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW48_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR48 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW48_B_0x1 = 1;

    /** @brief Shadowed fuse word 49 */
    using BSEC_SFSR1_SFW49 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 49 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR49 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR49 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 49 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR49 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW49_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR49 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW49_B_0x1 = 1;

    /** @brief Shadowed fuse word 50 */
    using BSEC_SFSR1_SFW50 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 50 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR50 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR50 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 50 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR50 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW50_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR50 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW50_B_0x1 = 1;

    /** @brief Shadowed fuse word 51 */
    using BSEC_SFSR1_SFW51 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 51 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR51 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR51 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 51 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR51 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW51_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR51 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW51_B_0x1 = 1;

    /** @brief Shadowed fuse word 52 */
    using BSEC_SFSR1_SFW52 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 52 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR52 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR52 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 52 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR52 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW52_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR52 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW52_B_0x1 = 1;

    /** @brief Shadowed fuse word 53 */
    using BSEC_SFSR1_SFW53 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 53 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR53 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR53 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 53 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR53 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW53_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR53 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW53_B_0x1 = 1;

    /** @brief Shadowed fuse word 54 */
    using BSEC_SFSR1_SFW54 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 54 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR54 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR54 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 54 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR54 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW54_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR54 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW54_B_0x1 = 1;

    /** @brief Shadowed fuse word 55 */
    using BSEC_SFSR1_SFW55 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 55 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR55 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR55 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 55 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR55 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW55_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR55 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW55_B_0x1 = 1;

    /** @brief Shadowed fuse word 56 */
    using BSEC_SFSR1_SFW56 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 56 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR56 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR56 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 56 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR56 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW56_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR56 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW56_B_0x1 = 1;

    /** @brief Shadowed fuse word 57 */
    using BSEC_SFSR1_SFW57 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 57 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR57 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR57 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 57 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR57 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW57_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR57 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW57_B_0x1 = 1;

    /** @brief Shadowed fuse word 58 */
    using BSEC_SFSR1_SFW58 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 58 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR58 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR58 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 58 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR58 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW58_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR58 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW58_B_0x1 = 1;

    /** @brief Shadowed fuse word 59 */
    using BSEC_SFSR1_SFW59 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 59 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR59 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR59 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 59 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR59 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW59_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR59 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW59_B_0x1 = 1;

    /** @brief Shadowed fuse word 60 */
    using BSEC_SFSR1_SFW60 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 60 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR60 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR60 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 60 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR60 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW60_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR60 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW60_B_0x1 = 1;

    /** @brief Shadowed fuse word 61 */
    using BSEC_SFSR1_SFW61 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 61 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR61 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR61 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 61 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR61 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW61_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR61 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW61_B_0x1 = 1;

    /** @brief Shadowed fuse word 62 */
    using BSEC_SFSR1_SFW62 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 62 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR62 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR62 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 62 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR62 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW62_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR62 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW62_B_0x1 = 1;

    /** @brief Shadowed fuse word 63 */
    using BSEC_SFSR1_SFW63 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 63 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR63 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR63 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 63 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR63 register. */
    constexpr std::uint32_t BSEC_SFSR1_SFW63_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR63 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR1_SFW63_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 2 */
    using BSEC_SFSR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x948, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 64 */
    using BSEC_SFSR2_SFW64 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 64 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR64 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR64 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 64 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR64 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW64_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR64 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW64_B_0x1 = 1;

    /** @brief Shadowed fuse word 65 */
    using BSEC_SFSR2_SFW65 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 65 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR65 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR65 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 65 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR65 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW65_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR65 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW65_B_0x1 = 1;

    /** @brief Shadowed fuse word 66 */
    using BSEC_SFSR2_SFW66 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 66 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR66 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR66 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 66 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR66 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW66_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR66 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW66_B_0x1 = 1;

    /** @brief Shadowed fuse word 67 */
    using BSEC_SFSR2_SFW67 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 67 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR67 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR67 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 67 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR67 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW67_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR67 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW67_B_0x1 = 1;

    /** @brief Shadowed fuse word 68 */
    using BSEC_SFSR2_SFW68 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 68 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR68 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR68 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 68 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR68 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW68_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR68 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW68_B_0x1 = 1;

    /** @brief Shadowed fuse word 69 */
    using BSEC_SFSR2_SFW69 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 69 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR69 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR69 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 69 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR69 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW69_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR69 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW69_B_0x1 = 1;

    /** @brief Shadowed fuse word 70 */
    using BSEC_SFSR2_SFW70 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 70 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR70 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR70 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 70 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR70 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW70_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR70 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW70_B_0x1 = 1;

    /** @brief Shadowed fuse word 71 */
    using BSEC_SFSR2_SFW71 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 71 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR71 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR71 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 71 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR71 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW71_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR71 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW71_B_0x1 = 1;

    /** @brief Shadowed fuse word 72 */
    using BSEC_SFSR2_SFW72 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 72 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR72 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR72 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 72 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR72 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW72_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR72 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW72_B_0x1 = 1;

    /** @brief Shadowed fuse word 73 */
    using BSEC_SFSR2_SFW73 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 73 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR73 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR73 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 73 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR73 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW73_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR73 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW73_B_0x1 = 1;

    /** @brief Shadowed fuse word 74 */
    using BSEC_SFSR2_SFW74 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 74 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR74 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR74 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 74 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR74 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW74_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR74 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW74_B_0x1 = 1;

    /** @brief Shadowed fuse word 75 */
    using BSEC_SFSR2_SFW75 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 75 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR75 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR75 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 75 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR75 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW75_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR75 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW75_B_0x1 = 1;

    /** @brief Shadowed fuse word 76 */
    using BSEC_SFSR2_SFW76 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 76 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR76 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR76 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 76 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR76 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW76_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR76 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW76_B_0x1 = 1;

    /** @brief Shadowed fuse word 77 */
    using BSEC_SFSR2_SFW77 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 77 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR77 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR77 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 77 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR77 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW77_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR77 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW77_B_0x1 = 1;

    /** @brief Shadowed fuse word 78 */
    using BSEC_SFSR2_SFW78 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 78 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR78 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR78 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 78 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR78 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW78_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR78 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW78_B_0x1 = 1;

    /** @brief Shadowed fuse word 79 */
    using BSEC_SFSR2_SFW79 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 79 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR79 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR79 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 79 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR79 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW79_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR79 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW79_B_0x1 = 1;

    /** @brief Shadowed fuse word 80 */
    using BSEC_SFSR2_SFW80 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 80 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR80 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR80 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 80 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR80 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW80_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR80 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW80_B_0x1 = 1;

    /** @brief Shadowed fuse word 81 */
    using BSEC_SFSR2_SFW81 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 81 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR81 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR81 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 81 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR81 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW81_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR81 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW81_B_0x1 = 1;

    /** @brief Shadowed fuse word 82 */
    using BSEC_SFSR2_SFW82 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 82 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR82 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR82 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 82 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR82 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW82_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR82 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW82_B_0x1 = 1;

    /** @brief Shadowed fuse word 83 */
    using BSEC_SFSR2_SFW83 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 83 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR83 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR83 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 83 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR83 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW83_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR83 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW83_B_0x1 = 1;

    /** @brief Shadowed fuse word 84 */
    using BSEC_SFSR2_SFW84 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 84 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR84 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR84 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 84 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR84 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW84_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR84 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW84_B_0x1 = 1;

    /** @brief Shadowed fuse word 85 */
    using BSEC_SFSR2_SFW85 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 85 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR85 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR85 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 85 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR85 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW85_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR85 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW85_B_0x1 = 1;

    /** @brief Shadowed fuse word 86 */
    using BSEC_SFSR2_SFW86 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 86 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR86 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR86 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 86 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR86 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW86_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR86 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW86_B_0x1 = 1;

    /** @brief Shadowed fuse word 87 */
    using BSEC_SFSR2_SFW87 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 87 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR87 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR87 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 87 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR87 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW87_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR87 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW87_B_0x1 = 1;

    /** @brief Shadowed fuse word 88 */
    using BSEC_SFSR2_SFW88 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 88 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR88 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR88 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 88 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR88 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW88_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR88 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW88_B_0x1 = 1;

    /** @brief Shadowed fuse word 89 */
    using BSEC_SFSR2_SFW89 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 89 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR89 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR89 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 89 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR89 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW89_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR89 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW89_B_0x1 = 1;

    /** @brief Shadowed fuse word 90 */
    using BSEC_SFSR2_SFW90 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 90 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR90 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR90 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 90 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR90 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW90_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR90 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW90_B_0x1 = 1;

    /** @brief Shadowed fuse word 91 */
    using BSEC_SFSR2_SFW91 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 91 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR91 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR91 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 91 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR91 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW91_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR91 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW91_B_0x1 = 1;

    /** @brief Shadowed fuse word 92 */
    using BSEC_SFSR2_SFW92 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 92 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR92 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR92 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 92 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR92 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW92_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR92 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW92_B_0x1 = 1;

    /** @brief Shadowed fuse word 93 */
    using BSEC_SFSR2_SFW93 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 93 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR93 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR93 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 93 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR93 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW93_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR93 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW93_B_0x1 = 1;

    /** @brief Shadowed fuse word 94 */
    using BSEC_SFSR2_SFW94 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 94 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR94 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR94 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 94 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR94 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW94_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR94 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW94_B_0x1 = 1;

    /** @brief Shadowed fuse word 95 */
    using BSEC_SFSR2_SFW95 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 95 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR95 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR95 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 95 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR95 register. */
    constexpr std::uint32_t BSEC_SFSR2_SFW95_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR95 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR2_SFW95_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 3 */
    using BSEC_SFSR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x94C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 96 */
    using BSEC_SFSR3_SFW96 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 96 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR96 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR96 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 96 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR96 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW96_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR96 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW96_B_0x1 = 1;

    /** @brief Shadowed fuse word 97 */
    using BSEC_SFSR3_SFW97 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 97 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR97 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR97 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 97 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR97 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW97_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR97 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW97_B_0x1 = 1;

    /** @brief Shadowed fuse word 98 */
    using BSEC_SFSR3_SFW98 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 98 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR98 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR98 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 98 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR98 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW98_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR98 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW98_B_0x1 = 1;

    /** @brief Shadowed fuse word 99 */
    using BSEC_SFSR3_SFW99 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 99 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR99 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR99 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 99 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR99 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW99_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR99 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW99_B_0x1 = 1;

    /** @brief Shadowed fuse word 100 */
    using BSEC_SFSR3_SFW100 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 100 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR100 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR100 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 100 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR100 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW100_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR100 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW100_B_0x1 = 1;

    /** @brief Shadowed fuse word 101 */
    using BSEC_SFSR3_SFW101 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 101 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR101 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR101 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 101 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR101 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW101_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR101 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW101_B_0x1 = 1;

    /** @brief Shadowed fuse word 102 */
    using BSEC_SFSR3_SFW102 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 102 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR102 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR102 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 102 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR102 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW102_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR102 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW102_B_0x1 = 1;

    /** @brief Shadowed fuse word 103 */
    using BSEC_SFSR3_SFW103 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 103 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR103 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR103 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 103 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR103 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW103_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR103 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW103_B_0x1 = 1;

    /** @brief Shadowed fuse word 104 */
    using BSEC_SFSR3_SFW104 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 104 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR104 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR104 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 104 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR104 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW104_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR104 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW104_B_0x1 = 1;

    /** @brief Shadowed fuse word 105 */
    using BSEC_SFSR3_SFW105 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 105 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR105 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR105 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 105 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR105 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW105_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR105 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW105_B_0x1 = 1;

    /** @brief Shadowed fuse word 106 */
    using BSEC_SFSR3_SFW106 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 106 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR106 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR106 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 106 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR106 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW106_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR106 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW106_B_0x1 = 1;

    /** @brief Shadowed fuse word 107 */
    using BSEC_SFSR3_SFW107 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 107 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR107 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR107 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 107 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR107 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW107_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR107 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW107_B_0x1 = 1;

    /** @brief Shadowed fuse word 108 */
    using BSEC_SFSR3_SFW108 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 108 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR108 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR108 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 108 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR108 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW108_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR108 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW108_B_0x1 = 1;

    /** @brief Shadowed fuse word 109 */
    using BSEC_SFSR3_SFW109 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 109 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR109 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR109 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 109 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR109 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW109_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR109 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW109_B_0x1 = 1;

    /** @brief Shadowed fuse word 110 */
    using BSEC_SFSR3_SFW110 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 110 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR110 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR110 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 110 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR110 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW110_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR110 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW110_B_0x1 = 1;

    /** @brief Shadowed fuse word 111 */
    using BSEC_SFSR3_SFW111 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 111 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR111 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR111 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 111 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR111 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW111_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR111 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW111_B_0x1 = 1;

    /** @brief Shadowed fuse word 112 */
    using BSEC_SFSR3_SFW112 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 112 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR112 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR112 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 112 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR112 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW112_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR112 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW112_B_0x1 = 1;

    /** @brief Shadowed fuse word 113 */
    using BSEC_SFSR3_SFW113 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 113 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR113 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR113 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 113 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR113 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW113_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR113 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW113_B_0x1 = 1;

    /** @brief Shadowed fuse word 114 */
    using BSEC_SFSR3_SFW114 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 114 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR114 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR114 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 114 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR114 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW114_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR114 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW114_B_0x1 = 1;

    /** @brief Shadowed fuse word 115 */
    using BSEC_SFSR3_SFW115 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 115 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR115 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR115 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 115 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR115 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW115_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR115 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW115_B_0x1 = 1;

    /** @brief Shadowed fuse word 116 */
    using BSEC_SFSR3_SFW116 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 116 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR116 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR116 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 116 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR116 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW116_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR116 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW116_B_0x1 = 1;

    /** @brief Shadowed fuse word 117 */
    using BSEC_SFSR3_SFW117 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 117 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR117 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR117 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 117 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR117 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW117_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR117 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW117_B_0x1 = 1;

    /** @brief Shadowed fuse word 118 */
    using BSEC_SFSR3_SFW118 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 118 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR118 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR118 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 118 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR118 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW118_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR118 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW118_B_0x1 = 1;

    /** @brief Shadowed fuse word 119 */
    using BSEC_SFSR3_SFW119 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 119 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR119 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR119 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 119 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR119 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW119_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR119 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW119_B_0x1 = 1;

    /** @brief Shadowed fuse word 120 */
    using BSEC_SFSR3_SFW120 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 120 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR120 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR120 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 120 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR120 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW120_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR120 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW120_B_0x1 = 1;

    /** @brief Shadowed fuse word 121 */
    using BSEC_SFSR3_SFW121 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 121 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR121 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR121 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 121 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR121 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW121_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR121 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW121_B_0x1 = 1;

    /** @brief Shadowed fuse word 122 */
    using BSEC_SFSR3_SFW122 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 122 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR122 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR122 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 122 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR122 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW122_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR122 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW122_B_0x1 = 1;

    /** @brief Shadowed fuse word 123 */
    using BSEC_SFSR3_SFW123 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 123 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR123 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR123 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 123 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR123 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW123_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR123 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW123_B_0x1 = 1;

    /** @brief Shadowed fuse word 124 */
    using BSEC_SFSR3_SFW124 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 124 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR124 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR124 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 124 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR124 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW124_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR124 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW124_B_0x1 = 1;

    /** @brief Shadowed fuse word 125 */
    using BSEC_SFSR3_SFW125 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 125 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR125 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR125 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 125 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR125 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW125_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR125 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW125_B_0x1 = 1;

    /** @brief Shadowed fuse word 126 */
    using BSEC_SFSR3_SFW126 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 126 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR126 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR126 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 126 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR126 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW126_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR126 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW126_B_0x1 = 1;

    /** @brief Shadowed fuse word 127 */
    using BSEC_SFSR3_SFW127 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 127 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR127 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR127 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 127 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR127 register. */
    constexpr std::uint32_t BSEC_SFSR3_SFW127_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR127 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR3_SFW127_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 4 */
    using BSEC_SFSR4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x950, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 128 */
    using BSEC_SFSR4_SFW128 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 128 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR128 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR128 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 128 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR128 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW128_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR128 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW128_B_0x1 = 1;

    /** @brief Shadowed fuse word 129 */
    using BSEC_SFSR4_SFW129 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 129 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR129 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR129 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 129 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR129 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW129_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR129 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW129_B_0x1 = 1;

    /** @brief Shadowed fuse word 130 */
    using BSEC_SFSR4_SFW130 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 130 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR130 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR130 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 130 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR130 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW130_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR130 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW130_B_0x1 = 1;

    /** @brief Shadowed fuse word 131 */
    using BSEC_SFSR4_SFW131 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 131 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR131 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR131 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 131 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR131 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW131_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR131 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW131_B_0x1 = 1;

    /** @brief Shadowed fuse word 132 */
    using BSEC_SFSR4_SFW132 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 132 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR132 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR132 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 132 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR132 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW132_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR132 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW132_B_0x1 = 1;

    /** @brief Shadowed fuse word 133 */
    using BSEC_SFSR4_SFW133 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 133 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR133 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR133 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 133 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR133 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW133_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR133 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW133_B_0x1 = 1;

    /** @brief Shadowed fuse word 134 */
    using BSEC_SFSR4_SFW134 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 134 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR134 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR134 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 134 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR134 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW134_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR134 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW134_B_0x1 = 1;

    /** @brief Shadowed fuse word 135 */
    using BSEC_SFSR4_SFW135 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 135 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR135 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR135 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 135 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR135 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW135_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR135 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW135_B_0x1 = 1;

    /** @brief Shadowed fuse word 136 */
    using BSEC_SFSR4_SFW136 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 136 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR136 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR136 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 136 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR136 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW136_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR136 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW136_B_0x1 = 1;

    /** @brief Shadowed fuse word 137 */
    using BSEC_SFSR4_SFW137 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 137 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR137 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR137 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 137 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR137 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW137_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR137 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW137_B_0x1 = 1;

    /** @brief Shadowed fuse word 138 */
    using BSEC_SFSR4_SFW138 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 138 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR138 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR138 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 138 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR138 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW138_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR138 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW138_B_0x1 = 1;

    /** @brief Shadowed fuse word 139 */
    using BSEC_SFSR4_SFW139 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 139 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR139 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR139 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 139 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR139 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW139_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR139 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW139_B_0x1 = 1;

    /** @brief Shadowed fuse word 140 */
    using BSEC_SFSR4_SFW140 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 140 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR140 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR140 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 140 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR140 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW140_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR140 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW140_B_0x1 = 1;

    /** @brief Shadowed fuse word 141 */
    using BSEC_SFSR4_SFW141 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 141 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR141 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR141 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 141 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR141 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW141_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR141 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW141_B_0x1 = 1;

    /** @brief Shadowed fuse word 142 */
    using BSEC_SFSR4_SFW142 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 142 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR142 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR142 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 142 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR142 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW142_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR142 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW142_B_0x1 = 1;

    /** @brief Shadowed fuse word 143 */
    using BSEC_SFSR4_SFW143 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 143 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR143 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR143 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 143 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR143 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW143_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR143 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW143_B_0x1 = 1;

    /** @brief Shadowed fuse word 144 */
    using BSEC_SFSR4_SFW144 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 144 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR144 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR144 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 144 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR144 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW144_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR144 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW144_B_0x1 = 1;

    /** @brief Shadowed fuse word 145 */
    using BSEC_SFSR4_SFW145 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 145 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR145 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR145 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 145 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR145 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW145_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR145 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW145_B_0x1 = 1;

    /** @brief Shadowed fuse word 146 */
    using BSEC_SFSR4_SFW146 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 146 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR146 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR146 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 146 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR146 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW146_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR146 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW146_B_0x1 = 1;

    /** @brief Shadowed fuse word 147 */
    using BSEC_SFSR4_SFW147 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 147 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR147 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR147 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 147 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR147 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW147_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR147 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW147_B_0x1 = 1;

    /** @brief Shadowed fuse word 148 */
    using BSEC_SFSR4_SFW148 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 148 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR148 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR148 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 148 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR148 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW148_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR148 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW148_B_0x1 = 1;

    /** @brief Shadowed fuse word 149 */
    using BSEC_SFSR4_SFW149 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 149 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR149 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR149 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 149 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR149 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW149_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR149 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW149_B_0x1 = 1;

    /** @brief Shadowed fuse word 150 */
    using BSEC_SFSR4_SFW150 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 150 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR150 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR150 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 150 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR150 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW150_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR150 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW150_B_0x1 = 1;

    /** @brief Shadowed fuse word 151 */
    using BSEC_SFSR4_SFW151 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 151 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR151 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR151 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 151 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR151 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW151_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR151 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW151_B_0x1 = 1;

    /** @brief Shadowed fuse word 152 */
    using BSEC_SFSR4_SFW152 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 152 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR152 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR152 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 152 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR152 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW152_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR152 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW152_B_0x1 = 1;

    /** @brief Shadowed fuse word 153 */
    using BSEC_SFSR4_SFW153 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 153 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR153 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR153 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 153 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR153 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW153_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR153 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW153_B_0x1 = 1;

    /** @brief Shadowed fuse word 154 */
    using BSEC_SFSR4_SFW154 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 154 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR154 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR154 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 154 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR154 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW154_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR154 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW154_B_0x1 = 1;

    /** @brief Shadowed fuse word 155 */
    using BSEC_SFSR4_SFW155 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 155 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR155 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR155 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 155 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR155 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW155_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR155 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW155_B_0x1 = 1;

    /** @brief Shadowed fuse word 156 */
    using BSEC_SFSR4_SFW156 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 156 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR156 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR156 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 156 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR156 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW156_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR156 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW156_B_0x1 = 1;

    /** @brief Shadowed fuse word 157 */
    using BSEC_SFSR4_SFW157 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 157 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR157 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR157 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 157 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR157 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW157_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR157 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW157_B_0x1 = 1;

    /** @brief Shadowed fuse word 158 */
    using BSEC_SFSR4_SFW158 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 158 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR158 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR158 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 158 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR158 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW158_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR158 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW158_B_0x1 = 1;

    /** @brief Shadowed fuse word 159 */
    using BSEC_SFSR4_SFW159 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 159 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR159 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR159 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 159 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR159 register. */
    constexpr std::uint32_t BSEC_SFSR4_SFW159_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR159 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR4_SFW159_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 5 */
    using BSEC_SFSR5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x954, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 160 */
    using BSEC_SFSR5_SFW160 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 160 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR160 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR160 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 160 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR160 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW160_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR160 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW160_B_0x1 = 1;

    /** @brief Shadowed fuse word 161 */
    using BSEC_SFSR5_SFW161 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 161 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR161 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR161 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 161 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR161 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW161_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR161 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW161_B_0x1 = 1;

    /** @brief Shadowed fuse word 162 */
    using BSEC_SFSR5_SFW162 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 162 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR162 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR162 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 162 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR162 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW162_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR162 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW162_B_0x1 = 1;

    /** @brief Shadowed fuse word 163 */
    using BSEC_SFSR5_SFW163 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 163 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR163 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR163 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 163 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR163 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW163_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR163 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW163_B_0x1 = 1;

    /** @brief Shadowed fuse word 164 */
    using BSEC_SFSR5_SFW164 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 164 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR164 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR164 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 164 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR164 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW164_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR164 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW164_B_0x1 = 1;

    /** @brief Shadowed fuse word 165 */
    using BSEC_SFSR5_SFW165 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 165 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR165 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR165 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 165 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR165 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW165_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR165 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW165_B_0x1 = 1;

    /** @brief Shadowed fuse word 166 */
    using BSEC_SFSR5_SFW166 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 166 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR166 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR166 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 166 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR166 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW166_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR166 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW166_B_0x1 = 1;

    /** @brief Shadowed fuse word 167 */
    using BSEC_SFSR5_SFW167 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 167 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR167 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR167 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 167 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR167 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW167_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR167 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW167_B_0x1 = 1;

    /** @brief Shadowed fuse word 168 */
    using BSEC_SFSR5_SFW168 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 168 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR168 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR168 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 168 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR168 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW168_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR168 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW168_B_0x1 = 1;

    /** @brief Shadowed fuse word 169 */
    using BSEC_SFSR5_SFW169 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 169 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR169 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR169 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 169 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR169 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW169_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR169 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW169_B_0x1 = 1;

    /** @brief Shadowed fuse word 170 */
    using BSEC_SFSR5_SFW170 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 170 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR170 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR170 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 170 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR170 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW170_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR170 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW170_B_0x1 = 1;

    /** @brief Shadowed fuse word 171 */
    using BSEC_SFSR5_SFW171 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 171 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR171 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR171 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 171 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR171 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW171_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR171 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW171_B_0x1 = 1;

    /** @brief Shadowed fuse word 172 */
    using BSEC_SFSR5_SFW172 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 172 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR172 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR172 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 172 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR172 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW172_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR172 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW172_B_0x1 = 1;

    /** @brief Shadowed fuse word 173 */
    using BSEC_SFSR5_SFW173 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 173 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR173 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR173 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 173 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR173 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW173_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR173 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW173_B_0x1 = 1;

    /** @brief Shadowed fuse word 174 */
    using BSEC_SFSR5_SFW174 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 174 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR174 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR174 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 174 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR174 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW174_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR174 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW174_B_0x1 = 1;

    /** @brief Shadowed fuse word 175 */
    using BSEC_SFSR5_SFW175 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 175 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR175 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR175 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 175 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR175 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW175_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR175 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW175_B_0x1 = 1;

    /** @brief Shadowed fuse word 176 */
    using BSEC_SFSR5_SFW176 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 176 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR176 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR176 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 176 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR176 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW176_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR176 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW176_B_0x1 = 1;

    /** @brief Shadowed fuse word 177 */
    using BSEC_SFSR5_SFW177 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 177 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR177 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR177 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 177 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR177 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW177_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR177 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW177_B_0x1 = 1;

    /** @brief Shadowed fuse word 178 */
    using BSEC_SFSR5_SFW178 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 178 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR178 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR178 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 178 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR178 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW178_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR178 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW178_B_0x1 = 1;

    /** @brief Shadowed fuse word 179 */
    using BSEC_SFSR5_SFW179 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 179 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR179 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR179 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 179 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR179 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW179_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR179 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW179_B_0x1 = 1;

    /** @brief Shadowed fuse word 180 */
    using BSEC_SFSR5_SFW180 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 180 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR180 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR180 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 180 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR180 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW180_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR180 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW180_B_0x1 = 1;

    /** @brief Shadowed fuse word 181 */
    using BSEC_SFSR5_SFW181 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 181 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR181 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR181 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 181 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR181 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW181_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR181 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW181_B_0x1 = 1;

    /** @brief Shadowed fuse word 182 */
    using BSEC_SFSR5_SFW182 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 182 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR182 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR182 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 182 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR182 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW182_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR182 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW182_B_0x1 = 1;

    /** @brief Shadowed fuse word 183 */
    using BSEC_SFSR5_SFW183 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 183 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR183 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR183 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 183 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR183 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW183_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR183 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW183_B_0x1 = 1;

    /** @brief Shadowed fuse word 184 */
    using BSEC_SFSR5_SFW184 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 184 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR184 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR184 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 184 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR184 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW184_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR184 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW184_B_0x1 = 1;

    /** @brief Shadowed fuse word 185 */
    using BSEC_SFSR5_SFW185 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 185 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR185 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR185 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 185 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR185 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW185_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR185 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW185_B_0x1 = 1;

    /** @brief Shadowed fuse word 186 */
    using BSEC_SFSR5_SFW186 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 186 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR186 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR186 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 186 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR186 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW186_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR186 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW186_B_0x1 = 1;

    /** @brief Shadowed fuse word 187 */
    using BSEC_SFSR5_SFW187 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 187 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR187 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR187 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 187 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR187 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW187_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR187 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW187_B_0x1 = 1;

    /** @brief Shadowed fuse word 188 */
    using BSEC_SFSR5_SFW188 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 188 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR188 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR188 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 188 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR188 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW188_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR188 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW188_B_0x1 = 1;

    /** @brief Shadowed fuse word 189 */
    using BSEC_SFSR5_SFW189 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 189 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR189 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR189 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 189 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR189 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW189_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR189 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW189_B_0x1 = 1;

    /** @brief Shadowed fuse word 190 */
    using BSEC_SFSR5_SFW190 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 190 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR190 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR190 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 190 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR190 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW190_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR190 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW190_B_0x1 = 1;

    /** @brief Shadowed fuse word 191 */
    using BSEC_SFSR5_SFW191 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 191 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR191 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR191 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 191 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR191 register. */
    constexpr std::uint32_t BSEC_SFSR5_SFW191_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR191 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR5_SFW191_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 6 */
    using BSEC_SFSR6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x958, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 192 */
    using BSEC_SFSR6_SFW192 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 192 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR192 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR192 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 192 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR192 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW192_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR192 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW192_B_0x1 = 1;

    /** @brief Shadowed fuse word 193 */
    using BSEC_SFSR6_SFW193 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 193 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR193 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR193 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 193 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR193 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW193_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR193 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW193_B_0x1 = 1;

    /** @brief Shadowed fuse word 194 */
    using BSEC_SFSR6_SFW194 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 194 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR194 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR194 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 194 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR194 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW194_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR194 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW194_B_0x1 = 1;

    /** @brief Shadowed fuse word 195 */
    using BSEC_SFSR6_SFW195 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 195 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR195 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR195 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 195 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR195 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW195_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR195 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW195_B_0x1 = 1;

    /** @brief Shadowed fuse word 196 */
    using BSEC_SFSR6_SFW196 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 196 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR196 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR196 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 196 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR196 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW196_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR196 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW196_B_0x1 = 1;

    /** @brief Shadowed fuse word 197 */
    using BSEC_SFSR6_SFW197 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 197 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR197 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR197 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 197 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR197 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW197_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR197 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW197_B_0x1 = 1;

    /** @brief Shadowed fuse word 198 */
    using BSEC_SFSR6_SFW198 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 198 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR198 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR198 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 198 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR198 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW198_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR198 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW198_B_0x1 = 1;

    /** @brief Shadowed fuse word 199 */
    using BSEC_SFSR6_SFW199 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 199 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR199 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR199 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 199 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR199 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW199_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR199 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW199_B_0x1 = 1;

    /** @brief Shadowed fuse word 200 */
    using BSEC_SFSR6_SFW200 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 200 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR200 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR200 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 200 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR200 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW200_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR200 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW200_B_0x1 = 1;

    /** @brief Shadowed fuse word 201 */
    using BSEC_SFSR6_SFW201 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 201 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR201 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR201 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 201 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR201 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW201_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR201 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW201_B_0x1 = 1;

    /** @brief Shadowed fuse word 202 */
    using BSEC_SFSR6_SFW202 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 202 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR202 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR202 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 202 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR202 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW202_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR202 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW202_B_0x1 = 1;

    /** @brief Shadowed fuse word 203 */
    using BSEC_SFSR6_SFW203 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 203 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR203 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR203 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 203 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR203 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW203_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR203 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW203_B_0x1 = 1;

    /** @brief Shadowed fuse word 204 */
    using BSEC_SFSR6_SFW204 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 204 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR204 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR204 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 204 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR204 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW204_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR204 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW204_B_0x1 = 1;

    /** @brief Shadowed fuse word 205 */
    using BSEC_SFSR6_SFW205 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 205 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR205 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR205 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 205 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR205 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW205_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR205 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW205_B_0x1 = 1;

    /** @brief Shadowed fuse word 206 */
    using BSEC_SFSR6_SFW206 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 206 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR206 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR206 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 206 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR206 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW206_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR206 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW206_B_0x1 = 1;

    /** @brief Shadowed fuse word 207 */
    using BSEC_SFSR6_SFW207 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 207 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR207 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR207 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 207 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR207 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW207_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR207 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW207_B_0x1 = 1;

    /** @brief Shadowed fuse word 208 */
    using BSEC_SFSR6_SFW208 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 208 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR208 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR208 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 208 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR208 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW208_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR208 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW208_B_0x1 = 1;

    /** @brief Shadowed fuse word 209 */
    using BSEC_SFSR6_SFW209 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 209 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR209 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR209 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 209 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR209 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW209_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR209 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW209_B_0x1 = 1;

    /** @brief Shadowed fuse word 210 */
    using BSEC_SFSR6_SFW210 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 210 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR210 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR210 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 210 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR210 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW210_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR210 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW210_B_0x1 = 1;

    /** @brief Shadowed fuse word 211 */
    using BSEC_SFSR6_SFW211 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 211 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR211 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR211 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 211 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR211 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW211_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR211 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW211_B_0x1 = 1;

    /** @brief Shadowed fuse word 212 */
    using BSEC_SFSR6_SFW212 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 212 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR212 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR212 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 212 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR212 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW212_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR212 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW212_B_0x1 = 1;

    /** @brief Shadowed fuse word 213 */
    using BSEC_SFSR6_SFW213 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 213 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR213 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR213 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 213 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR213 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW213_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR213 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW213_B_0x1 = 1;

    /** @brief Shadowed fuse word 214 */
    using BSEC_SFSR6_SFW214 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 214 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR214 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR214 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 214 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR214 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW214_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR214 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW214_B_0x1 = 1;

    /** @brief Shadowed fuse word 215 */
    using BSEC_SFSR6_SFW215 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 215 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR215 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR215 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 215 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR215 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW215_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR215 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW215_B_0x1 = 1;

    /** @brief Shadowed fuse word 216 */
    using BSEC_SFSR6_SFW216 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 216 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR216 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR216 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 216 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR216 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW216_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR216 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW216_B_0x1 = 1;

    /** @brief Shadowed fuse word 217 */
    using BSEC_SFSR6_SFW217 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 217 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR217 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR217 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 217 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR217 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW217_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR217 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW217_B_0x1 = 1;

    /** @brief Shadowed fuse word 218 */
    using BSEC_SFSR6_SFW218 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 218 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR218 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR218 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 218 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR218 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW218_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR218 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW218_B_0x1 = 1;

    /** @brief Shadowed fuse word 219 */
    using BSEC_SFSR6_SFW219 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 219 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR219 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR219 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 219 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR219 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW219_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR219 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW219_B_0x1 = 1;

    /** @brief Shadowed fuse word 220 */
    using BSEC_SFSR6_SFW220 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 220 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR220 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR220 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 220 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR220 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW220_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR220 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW220_B_0x1 = 1;

    /** @brief Shadowed fuse word 221 */
    using BSEC_SFSR6_SFW221 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 221 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR221 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR221 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 221 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR221 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW221_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR221 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW221_B_0x1 = 1;

    /** @brief Shadowed fuse word 222 */
    using BSEC_SFSR6_SFW222 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 222 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR222 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR222 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 222 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR222 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW222_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR222 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW222_B_0x1 = 1;

    /** @brief Shadowed fuse word 223 */
    using BSEC_SFSR6_SFW223 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 223 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR223 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR223 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 223 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR223 register. */
    constexpr std::uint32_t BSEC_SFSR6_SFW223_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR223 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR6_SFW223_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 7 */
    using BSEC_SFSR7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x95C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 224 */
    using BSEC_SFSR7_SFW224 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 224 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR224 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR224 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 224 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR224 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW224_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR224 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW224_B_0x1 = 1;

    /** @brief Shadowed fuse word 225 */
    using BSEC_SFSR7_SFW225 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 225 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR225 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR225 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 225 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR225 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW225_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR225 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW225_B_0x1 = 1;

    /** @brief Shadowed fuse word 226 */
    using BSEC_SFSR7_SFW226 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 226 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR226 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR226 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 226 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR226 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW226_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR226 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW226_B_0x1 = 1;

    /** @brief Shadowed fuse word 227 */
    using BSEC_SFSR7_SFW227 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 227 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR227 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR227 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 227 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR227 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW227_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR227 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW227_B_0x1 = 1;

    /** @brief Shadowed fuse word 228 */
    using BSEC_SFSR7_SFW228 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 228 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR228 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR228 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 228 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR228 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW228_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR228 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW228_B_0x1 = 1;

    /** @brief Shadowed fuse word 229 */
    using BSEC_SFSR7_SFW229 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 229 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR229 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR229 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 229 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR229 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW229_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR229 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW229_B_0x1 = 1;

    /** @brief Shadowed fuse word 230 */
    using BSEC_SFSR7_SFW230 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 230 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR230 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR230 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 230 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR230 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW230_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR230 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW230_B_0x1 = 1;

    /** @brief Shadowed fuse word 231 */
    using BSEC_SFSR7_SFW231 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 231 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR231 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR231 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 231 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR231 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW231_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR231 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW231_B_0x1 = 1;

    /** @brief Shadowed fuse word 232 */
    using BSEC_SFSR7_SFW232 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 232 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR232 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR232 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 232 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR232 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW232_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR232 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW232_B_0x1 = 1;

    /** @brief Shadowed fuse word 233 */
    using BSEC_SFSR7_SFW233 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 233 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR233 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR233 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 233 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR233 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW233_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR233 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW233_B_0x1 = 1;

    /** @brief Shadowed fuse word 234 */
    using BSEC_SFSR7_SFW234 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 234 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR234 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR234 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 234 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR234 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW234_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR234 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW234_B_0x1 = 1;

    /** @brief Shadowed fuse word 235 */
    using BSEC_SFSR7_SFW235 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 235 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR235 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR235 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 235 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR235 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW235_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR235 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW235_B_0x1 = 1;

    /** @brief Shadowed fuse word 236 */
    using BSEC_SFSR7_SFW236 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 236 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR236 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR236 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 236 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR236 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW236_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR236 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW236_B_0x1 = 1;

    /** @brief Shadowed fuse word 237 */
    using BSEC_SFSR7_SFW237 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 237 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR237 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR237 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 237 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR237 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW237_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR237 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW237_B_0x1 = 1;

    /** @brief Shadowed fuse word 238 */
    using BSEC_SFSR7_SFW238 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 238 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR238 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR238 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 238 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR238 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW238_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR238 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW238_B_0x1 = 1;

    /** @brief Shadowed fuse word 239 */
    using BSEC_SFSR7_SFW239 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 239 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR239 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR239 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 239 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR239 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW239_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR239 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW239_B_0x1 = 1;

    /** @brief Shadowed fuse word 240 */
    using BSEC_SFSR7_SFW240 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 240 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR240 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR240 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 240 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR240 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW240_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR240 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW240_B_0x1 = 1;

    /** @brief Shadowed fuse word 241 */
    using BSEC_SFSR7_SFW241 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 241 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR241 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR241 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 241 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR241 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW241_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR241 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW241_B_0x1 = 1;

    /** @brief Shadowed fuse word 242 */
    using BSEC_SFSR7_SFW242 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 242 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR242 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR242 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 242 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR242 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW242_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR242 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW242_B_0x1 = 1;

    /** @brief Shadowed fuse word 243 */
    using BSEC_SFSR7_SFW243 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 243 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR243 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR243 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 243 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR243 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW243_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR243 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW243_B_0x1 = 1;

    /** @brief Shadowed fuse word 244 */
    using BSEC_SFSR7_SFW244 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 244 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR244 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR244 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 244 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR244 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW244_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR244 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW244_B_0x1 = 1;

    /** @brief Shadowed fuse word 245 */
    using BSEC_SFSR7_SFW245 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 245 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR245 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR245 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 245 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR245 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW245_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR245 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW245_B_0x1 = 1;

    /** @brief Shadowed fuse word 246 */
    using BSEC_SFSR7_SFW246 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 246 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR246 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR246 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 246 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR246 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW246_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR246 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW246_B_0x1 = 1;

    /** @brief Shadowed fuse word 247 */
    using BSEC_SFSR7_SFW247 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 247 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR247 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR247 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 247 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR247 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW247_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR247 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW247_B_0x1 = 1;

    /** @brief Shadowed fuse word 248 */
    using BSEC_SFSR7_SFW248 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 248 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR248 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR248 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 248 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR248 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW248_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR248 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW248_B_0x1 = 1;

    /** @brief Shadowed fuse word 249 */
    using BSEC_SFSR7_SFW249 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 249 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR249 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR249 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 249 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR249 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW249_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR249 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW249_B_0x1 = 1;

    /** @brief Shadowed fuse word 250 */
    using BSEC_SFSR7_SFW250 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 250 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR250 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR250 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 250 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR250 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW250_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR250 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW250_B_0x1 = 1;

    /** @brief Shadowed fuse word 251 */
    using BSEC_SFSR7_SFW251 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 251 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR251 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR251 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 251 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR251 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW251_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR251 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW251_B_0x1 = 1;

    /** @brief Shadowed fuse word 252 */
    using BSEC_SFSR7_SFW252 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 252 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR252 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR252 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 252 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR252 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW252_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR252 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW252_B_0x1 = 1;

    /** @brief Shadowed fuse word 253 */
    using BSEC_SFSR7_SFW253 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 253 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR253 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR253 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 253 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR253 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW253_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR253 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW253_B_0x1 = 1;

    /** @brief Shadowed fuse word 254 */
    using BSEC_SFSR7_SFW254 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 254 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR254 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR254 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 254 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR254 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW254_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR254 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW254_B_0x1 = 1;

    /** @brief Shadowed fuse word 255 */
    using BSEC_SFSR7_SFW255 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 255 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR255 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR255 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 255 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR255 register. */
    constexpr std::uint32_t BSEC_SFSR7_SFW255_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR255 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR7_SFW255_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 8 */
    using BSEC_SFSR8 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x960, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 256 */
    using BSEC_SFSR8_SFW256 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 256 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR256 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR256 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 256 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR256 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW256_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR256 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW256_B_0x1 = 1;

    /** @brief Shadowed fuse word 257 */
    using BSEC_SFSR8_SFW257 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 257 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR257 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR257 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 257 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR257 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW257_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR257 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW257_B_0x1 = 1;

    /** @brief Shadowed fuse word 258 */
    using BSEC_SFSR8_SFW258 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 258 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR258 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR258 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 258 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR258 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW258_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR258 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW258_B_0x1 = 1;

    /** @brief Shadowed fuse word 259 */
    using BSEC_SFSR8_SFW259 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 259 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR259 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR259 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 259 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR259 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW259_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR259 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW259_B_0x1 = 1;

    /** @brief Shadowed fuse word 260 */
    using BSEC_SFSR8_SFW260 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 260 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR260 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR260 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 260 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR260 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW260_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR260 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW260_B_0x1 = 1;

    /** @brief Shadowed fuse word 261 */
    using BSEC_SFSR8_SFW261 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 261 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR261 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR261 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 261 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR261 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW261_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR261 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW261_B_0x1 = 1;

    /** @brief Shadowed fuse word 262 */
    using BSEC_SFSR8_SFW262 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 262 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR262 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR262 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 262 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR262 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW262_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR262 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW262_B_0x1 = 1;

    /** @brief Shadowed fuse word 263 */
    using BSEC_SFSR8_SFW263 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 263 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR263 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR263 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 263 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR263 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW263_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR263 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW263_B_0x1 = 1;

    /** @brief Shadowed fuse word 264 */
    using BSEC_SFSR8_SFW264 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 264 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR264 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR264 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 264 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR264 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW264_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR264 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW264_B_0x1 = 1;

    /** @brief Shadowed fuse word 265 */
    using BSEC_SFSR8_SFW265 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 265 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR265 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR265 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 265 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR265 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW265_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR265 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW265_B_0x1 = 1;

    /** @brief Shadowed fuse word 266 */
    using BSEC_SFSR8_SFW266 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 266 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR266 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR266 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 266 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR266 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW266_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR266 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW266_B_0x1 = 1;

    /** @brief Shadowed fuse word 267 */
    using BSEC_SFSR8_SFW267 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 267 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR267 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR267 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 267 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR267 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW267_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR267 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW267_B_0x1 = 1;

    /** @brief Shadowed fuse word 268 */
    using BSEC_SFSR8_SFW268 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 268 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR268 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR268 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 268 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR268 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW268_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR268 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW268_B_0x1 = 1;

    /** @brief Shadowed fuse word 269 */
    using BSEC_SFSR8_SFW269 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 269 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR269 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR269 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 269 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR269 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW269_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR269 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW269_B_0x1 = 1;

    /** @brief Shadowed fuse word 270 */
    using BSEC_SFSR8_SFW270 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 270 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR270 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR270 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 270 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR270 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW270_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR270 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW270_B_0x1 = 1;

    /** @brief Shadowed fuse word 271 */
    using BSEC_SFSR8_SFW271 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 271 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR271 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR271 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 271 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR271 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW271_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR271 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW271_B_0x1 = 1;

    /** @brief Shadowed fuse word 272 */
    using BSEC_SFSR8_SFW272 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 272 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR272 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR272 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 272 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR272 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW272_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR272 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW272_B_0x1 = 1;

    /** @brief Shadowed fuse word 273 */
    using BSEC_SFSR8_SFW273 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 273 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR273 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR273 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 273 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR273 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW273_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR273 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW273_B_0x1 = 1;

    /** @brief Shadowed fuse word 274 */
    using BSEC_SFSR8_SFW274 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 274 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR274 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR274 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 274 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR274 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW274_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR274 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW274_B_0x1 = 1;

    /** @brief Shadowed fuse word 275 */
    using BSEC_SFSR8_SFW275 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 275 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR275 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR275 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 275 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR275 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW275_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR275 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW275_B_0x1 = 1;

    /** @brief Shadowed fuse word 276 */
    using BSEC_SFSR8_SFW276 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 276 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR276 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR276 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 276 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR276 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW276_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR276 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW276_B_0x1 = 1;

    /** @brief Shadowed fuse word 277 */
    using BSEC_SFSR8_SFW277 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 277 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR277 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR277 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 277 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR277 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW277_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR277 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW277_B_0x1 = 1;

    /** @brief Shadowed fuse word 278 */
    using BSEC_SFSR8_SFW278 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 278 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR278 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR278 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 278 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR278 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW278_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR278 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW278_B_0x1 = 1;

    /** @brief Shadowed fuse word 279 */
    using BSEC_SFSR8_SFW279 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 279 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR279 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR279 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 279 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR279 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW279_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR279 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW279_B_0x1 = 1;

    /** @brief Shadowed fuse word 280 */
    using BSEC_SFSR8_SFW280 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 280 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR280 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR280 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 280 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR280 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW280_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR280 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW280_B_0x1 = 1;

    /** @brief Shadowed fuse word 281 */
    using BSEC_SFSR8_SFW281 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 281 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR281 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR281 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 281 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR281 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW281_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR281 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW281_B_0x1 = 1;

    /** @brief Shadowed fuse word 282 */
    using BSEC_SFSR8_SFW282 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 282 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR282 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR282 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 282 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR282 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW282_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR282 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW282_B_0x1 = 1;

    /** @brief Shadowed fuse word 283 */
    using BSEC_SFSR8_SFW283 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 283 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR283 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR283 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 283 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR283 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW283_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR283 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW283_B_0x1 = 1;

    /** @brief Shadowed fuse word 284 */
    using BSEC_SFSR8_SFW284 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 284 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR284 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR284 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 284 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR284 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW284_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR284 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW284_B_0x1 = 1;

    /** @brief Shadowed fuse word 285 */
    using BSEC_SFSR8_SFW285 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 285 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR285 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR285 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 285 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR285 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW285_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR285 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW285_B_0x1 = 1;

    /** @brief Shadowed fuse word 286 */
    using BSEC_SFSR8_SFW286 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 286 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR286 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR286 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 286 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR286 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW286_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR286 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW286_B_0x1 = 1;

    /** @brief Shadowed fuse word 287 */
    using BSEC_SFSR8_SFW287 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 287 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR287 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR287 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 287 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR287 register. */
    constexpr std::uint32_t BSEC_SFSR8_SFW287_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR287 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR8_SFW287_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 9 */
    using BSEC_SFSR9 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x964, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 288 */
    using BSEC_SFSR9_SFW288 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 288 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR288 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR288 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 288 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR288 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW288_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR288 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW288_B_0x1 = 1;

    /** @brief Shadowed fuse word 289 */
    using BSEC_SFSR9_SFW289 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 289 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR289 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR289 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 289 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR289 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW289_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR289 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW289_B_0x1 = 1;

    /** @brief Shadowed fuse word 290 */
    using BSEC_SFSR9_SFW290 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 290 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR290 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR290 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 290 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR290 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW290_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR290 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW290_B_0x1 = 1;

    /** @brief Shadowed fuse word 291 */
    using BSEC_SFSR9_SFW291 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 291 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR291 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR291 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 291 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR291 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW291_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR291 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW291_B_0x1 = 1;

    /** @brief Shadowed fuse word 292 */
    using BSEC_SFSR9_SFW292 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 292 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR292 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR292 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 292 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR292 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW292_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR292 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW292_B_0x1 = 1;

    /** @brief Shadowed fuse word 293 */
    using BSEC_SFSR9_SFW293 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 293 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR293 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR293 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 293 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR293 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW293_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR293 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW293_B_0x1 = 1;

    /** @brief Shadowed fuse word 294 */
    using BSEC_SFSR9_SFW294 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 294 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR294 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR294 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 294 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR294 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW294_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR294 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW294_B_0x1 = 1;

    /** @brief Shadowed fuse word 295 */
    using BSEC_SFSR9_SFW295 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 295 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR295 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR295 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 295 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR295 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW295_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR295 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW295_B_0x1 = 1;

    /** @brief Shadowed fuse word 296 */
    using BSEC_SFSR9_SFW296 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 296 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR296 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR296 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 296 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR296 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW296_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR296 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW296_B_0x1 = 1;

    /** @brief Shadowed fuse word 297 */
    using BSEC_SFSR9_SFW297 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 297 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR297 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR297 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 297 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR297 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW297_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR297 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW297_B_0x1 = 1;

    /** @brief Shadowed fuse word 298 */
    using BSEC_SFSR9_SFW298 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 298 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR298 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR298 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 298 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR298 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW298_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR298 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW298_B_0x1 = 1;

    /** @brief Shadowed fuse word 299 */
    using BSEC_SFSR9_SFW299 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 299 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR299 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR299 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 299 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR299 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW299_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR299 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW299_B_0x1 = 1;

    /** @brief Shadowed fuse word 300 */
    using BSEC_SFSR9_SFW300 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 300 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR300 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR300 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 300 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR300 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW300_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR300 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW300_B_0x1 = 1;

    /** @brief Shadowed fuse word 301 */
    using BSEC_SFSR9_SFW301 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 301 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR301 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR301 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 301 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR301 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW301_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR301 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW301_B_0x1 = 1;

    /** @brief Shadowed fuse word 302 */
    using BSEC_SFSR9_SFW302 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 302 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR302 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR302 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 302 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR302 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW302_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR302 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW302_B_0x1 = 1;

    /** @brief Shadowed fuse word 303 */
    using BSEC_SFSR9_SFW303 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 303 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR303 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR303 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 303 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR303 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW303_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR303 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW303_B_0x1 = 1;

    /** @brief Shadowed fuse word 304 */
    using BSEC_SFSR9_SFW304 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 304 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR304 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR304 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 304 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR304 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW304_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR304 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW304_B_0x1 = 1;

    /** @brief Shadowed fuse word 305 */
    using BSEC_SFSR9_SFW305 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 305 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR305 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR305 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 305 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR305 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW305_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR305 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW305_B_0x1 = 1;

    /** @brief Shadowed fuse word 306 */
    using BSEC_SFSR9_SFW306 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 306 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR306 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR306 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 306 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR306 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW306_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR306 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW306_B_0x1 = 1;

    /** @brief Shadowed fuse word 307 */
    using BSEC_SFSR9_SFW307 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 307 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR307 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR307 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 307 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR307 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW307_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR307 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW307_B_0x1 = 1;

    /** @brief Shadowed fuse word 308 */
    using BSEC_SFSR9_SFW308 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 308 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR308 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR308 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 308 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR308 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW308_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR308 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW308_B_0x1 = 1;

    /** @brief Shadowed fuse word 309 */
    using BSEC_SFSR9_SFW309 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 309 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR309 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR309 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 309 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR309 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW309_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR309 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW309_B_0x1 = 1;

    /** @brief Shadowed fuse word 310 */
    using BSEC_SFSR9_SFW310 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 310 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR310 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR310 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 310 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR310 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW310_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR310 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW310_B_0x1 = 1;

    /** @brief Shadowed fuse word 311 */
    using BSEC_SFSR9_SFW311 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 311 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR311 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR311 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 311 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR311 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW311_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR311 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW311_B_0x1 = 1;

    /** @brief Shadowed fuse word 312 */
    using BSEC_SFSR9_SFW312 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 312 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR312 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR312 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 312 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR312 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW312_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR312 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW312_B_0x1 = 1;

    /** @brief Shadowed fuse word 313 */
    using BSEC_SFSR9_SFW313 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 313 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR313 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR313 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 313 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR313 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW313_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR313 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW313_B_0x1 = 1;

    /** @brief Shadowed fuse word 314 */
    using BSEC_SFSR9_SFW314 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 314 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR314 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR314 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 314 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR314 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW314_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR314 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW314_B_0x1 = 1;

    /** @brief Shadowed fuse word 315 */
    using BSEC_SFSR9_SFW315 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 315 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR315 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR315 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 315 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR315 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW315_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR315 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW315_B_0x1 = 1;

    /** @brief Shadowed fuse word 316 */
    using BSEC_SFSR9_SFW316 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 316 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR316 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR316 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 316 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR316 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW316_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR316 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW316_B_0x1 = 1;

    /** @brief Shadowed fuse word 317 */
    using BSEC_SFSR9_SFW317 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 317 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR317 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR317 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 317 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR317 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW317_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR317 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW317_B_0x1 = 1;

    /** @brief Shadowed fuse word 318 */
    using BSEC_SFSR9_SFW318 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 318 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR318 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR318 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 318 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR318 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW318_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR318 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW318_B_0x1 = 1;

    /** @brief Shadowed fuse word 319 */
    using BSEC_SFSR9_SFW319 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 319 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR319 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR319 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 319 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR319 register. */
    constexpr std::uint32_t BSEC_SFSR9_SFW319_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR319 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR9_SFW319_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 10 */
    using BSEC_SFSR10 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x968, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 320 */
    using BSEC_SFSR10_SFW320 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 320 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR320 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR320 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 320 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR320 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW320_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR320 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW320_B_0x1 = 1;

    /** @brief Shadowed fuse word 321 */
    using BSEC_SFSR10_SFW321 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 321 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR321 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR321 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 321 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR321 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW321_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR321 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW321_B_0x1 = 1;

    /** @brief Shadowed fuse word 322 */
    using BSEC_SFSR10_SFW322 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 322 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR322 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR322 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 322 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR322 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW322_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR322 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW322_B_0x1 = 1;

    /** @brief Shadowed fuse word 323 */
    using BSEC_SFSR10_SFW323 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 323 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR323 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR323 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 323 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR323 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW323_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR323 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW323_B_0x1 = 1;

    /** @brief Shadowed fuse word 324 */
    using BSEC_SFSR10_SFW324 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 324 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR324 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR324 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 324 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR324 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW324_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR324 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW324_B_0x1 = 1;

    /** @brief Shadowed fuse word 325 */
    using BSEC_SFSR10_SFW325 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 325 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR325 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR325 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 325 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR325 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW325_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR325 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW325_B_0x1 = 1;

    /** @brief Shadowed fuse word 326 */
    using BSEC_SFSR10_SFW326 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 326 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR326 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR326 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 326 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR326 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW326_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR326 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW326_B_0x1 = 1;

    /** @brief Shadowed fuse word 327 */
    using BSEC_SFSR10_SFW327 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 327 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR327 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR327 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 327 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR327 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW327_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR327 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW327_B_0x1 = 1;

    /** @brief Shadowed fuse word 328 */
    using BSEC_SFSR10_SFW328 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 328 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR328 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR328 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 328 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR328 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW328_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR328 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW328_B_0x1 = 1;

    /** @brief Shadowed fuse word 329 */
    using BSEC_SFSR10_SFW329 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 329 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR329 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR329 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 329 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR329 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW329_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR329 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW329_B_0x1 = 1;

    /** @brief Shadowed fuse word 330 */
    using BSEC_SFSR10_SFW330 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 330 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR330 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR330 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 330 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR330 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW330_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR330 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW330_B_0x1 = 1;

    /** @brief Shadowed fuse word 331 */
    using BSEC_SFSR10_SFW331 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 331 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR331 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR331 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 331 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR331 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW331_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR331 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW331_B_0x1 = 1;

    /** @brief Shadowed fuse word 332 */
    using BSEC_SFSR10_SFW332 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 332 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR332 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR332 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 332 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR332 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW332_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR332 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW332_B_0x1 = 1;

    /** @brief Shadowed fuse word 333 */
    using BSEC_SFSR10_SFW333 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 333 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR333 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR333 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 333 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR333 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW333_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR333 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW333_B_0x1 = 1;

    /** @brief Shadowed fuse word 334 */
    using BSEC_SFSR10_SFW334 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 334 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR334 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR334 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 334 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR334 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW334_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR334 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW334_B_0x1 = 1;

    /** @brief Shadowed fuse word 335 */
    using BSEC_SFSR10_SFW335 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 335 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR335 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR335 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 335 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR335 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW335_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR335 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW335_B_0x1 = 1;

    /** @brief Shadowed fuse word 336 */
    using BSEC_SFSR10_SFW336 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 336 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR336 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR336 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 336 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR336 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW336_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR336 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW336_B_0x1 = 1;

    /** @brief Shadowed fuse word 337 */
    using BSEC_SFSR10_SFW337 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 337 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR337 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR337 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 337 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR337 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW337_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR337 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW337_B_0x1 = 1;

    /** @brief Shadowed fuse word 338 */
    using BSEC_SFSR10_SFW338 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 338 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR338 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR338 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 338 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR338 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW338_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR338 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW338_B_0x1 = 1;

    /** @brief Shadowed fuse word 339 */
    using BSEC_SFSR10_SFW339 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 339 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR339 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR339 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 339 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR339 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW339_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR339 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW339_B_0x1 = 1;

    /** @brief Shadowed fuse word 340 */
    using BSEC_SFSR10_SFW340 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 340 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR340 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR340 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 340 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR340 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW340_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR340 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW340_B_0x1 = 1;

    /** @brief Shadowed fuse word 341 */
    using BSEC_SFSR10_SFW341 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 341 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR341 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR341 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 341 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR341 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW341_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR341 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW341_B_0x1 = 1;

    /** @brief Shadowed fuse word 342 */
    using BSEC_SFSR10_SFW342 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 342 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR342 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR342 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 342 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR342 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW342_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR342 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW342_B_0x1 = 1;

    /** @brief Shadowed fuse word 343 */
    using BSEC_SFSR10_SFW343 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 343 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR343 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR343 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 343 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR343 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW343_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR343 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW343_B_0x1 = 1;

    /** @brief Shadowed fuse word 344 */
    using BSEC_SFSR10_SFW344 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 344 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR344 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR344 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 344 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR344 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW344_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR344 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW344_B_0x1 = 1;

    /** @brief Shadowed fuse word 345 */
    using BSEC_SFSR10_SFW345 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 345 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR345 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR345 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 345 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR345 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW345_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR345 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW345_B_0x1 = 1;

    /** @brief Shadowed fuse word 346 */
    using BSEC_SFSR10_SFW346 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 346 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR346 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR346 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 346 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR346 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW346_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR346 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW346_B_0x1 = 1;

    /** @brief Shadowed fuse word 347 */
    using BSEC_SFSR10_SFW347 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 347 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR347 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR347 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 347 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR347 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW347_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR347 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW347_B_0x1 = 1;

    /** @brief Shadowed fuse word 348 */
    using BSEC_SFSR10_SFW348 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 348 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR348 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR348 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 348 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR348 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW348_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR348 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW348_B_0x1 = 1;

    /** @brief Shadowed fuse word 349 */
    using BSEC_SFSR10_SFW349 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 349 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR349 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR349 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 349 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR349 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW349_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR349 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW349_B_0x1 = 1;

    /** @brief Shadowed fuse word 350 */
    using BSEC_SFSR10_SFW350 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 350 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR350 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR350 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 350 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR350 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW350_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR350 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW350_B_0x1 = 1;

    /** @brief Shadowed fuse word 351 */
    using BSEC_SFSR10_SFW351 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 351 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR351 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR351 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 351 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR351 register. */
    constexpr std::uint32_t BSEC_SFSR10_SFW351_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR351 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR10_SFW351_B_0x1 = 1;

    /** @brief BSEC shadowed fuses status register 11 */
    using BSEC_SFSR11 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0x96C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Shadowed fuse word 352 */
    using BSEC_SFSR11_SFW352 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 352 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR352 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR352 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 352 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR352 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW352_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR352 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW352_B_0x1 = 1;

    /** @brief Shadowed fuse word 353 */
    using BSEC_SFSR11_SFW353 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 353 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR353 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR353 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 353 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR353 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW353_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR353 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW353_B_0x1 = 1;

    /** @brief Shadowed fuse word 354 */
    using BSEC_SFSR11_SFW354 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 354 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR354 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR354 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 354 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR354 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW354_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR354 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW354_B_0x1 = 1;

    /** @brief Shadowed fuse word 355 */
    using BSEC_SFSR11_SFW355 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 3, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 355 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR355 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR355 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 355 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR355 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW355_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR355 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW355_B_0x1 = 1;

    /** @brief Shadowed fuse word 356 */
    using BSEC_SFSR11_SFW356 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 356 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR356 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR356 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 356 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR356 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW356_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR356 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW356_B_0x1 = 1;

    /** @brief Shadowed fuse word 357 */
    using BSEC_SFSR11_SFW357 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 357 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR357 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR357 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 357 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR357 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW357_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR357 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW357_B_0x1 = 1;

    /** @brief Shadowed fuse word 358 */
    using BSEC_SFSR11_SFW358 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 358 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR358 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR358 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 358 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR358 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW358_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR358 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW358_B_0x1 = 1;

    /** @brief Shadowed fuse word 359 */
    using BSEC_SFSR11_SFW359 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 7, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 359 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR359 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR359 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 359 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR359 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW359_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR359 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW359_B_0x1 = 1;

    /** @brief Shadowed fuse word 360 */
    using BSEC_SFSR11_SFW360 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 360 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR360 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR360 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 360 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR360 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW360_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR360 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW360_B_0x1 = 1;

    /** @brief Shadowed fuse word 361 */
    using BSEC_SFSR11_SFW361 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 9, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 361 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR361 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR361 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 361 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR361 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW361_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR361 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW361_B_0x1 = 1;

    /** @brief Shadowed fuse word 362 */
    using BSEC_SFSR11_SFW362 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 10, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 362 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR362 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR362 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 362 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR362 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW362_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR362 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW362_B_0x1 = 1;

    /** @brief Shadowed fuse word 363 */
    using BSEC_SFSR11_SFW363 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 11, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 363 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR363 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR363 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 363 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR363 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW363_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR363 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW363_B_0x1 = 1;

    /** @brief Shadowed fuse word 364 */
    using BSEC_SFSR11_SFW364 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 12, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 364 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR364 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR364 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 364 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR364 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW364_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR364 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW364_B_0x1 = 1;

    /** @brief Shadowed fuse word 365 */
    using BSEC_SFSR11_SFW365 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 365 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR365 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR365 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 365 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR365 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW365_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR365 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW365_B_0x1 = 1;

    /** @brief Shadowed fuse word 366 */
    using BSEC_SFSR11_SFW366 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 366 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR366 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR366 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 366 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR366 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW366_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR366 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW366_B_0x1 = 1;

    /** @brief Shadowed fuse word 367 */
    using BSEC_SFSR11_SFW367 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 15, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 367 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR367 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR367 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 367 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR367 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW367_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR367 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW367_B_0x1 = 1;

    /** @brief Shadowed fuse word 368 */
    using BSEC_SFSR11_SFW368 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 368 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR368 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR368 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 368 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR368 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW368_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR368 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW368_B_0x1 = 1;

    /** @brief Shadowed fuse word 369 */
    using BSEC_SFSR11_SFW369 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 369 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR369 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR369 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 369 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR369 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW369_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR369 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW369_B_0x1 = 1;

    /** @brief Shadowed fuse word 370 */
    using BSEC_SFSR11_SFW370 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 370 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR370 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR370 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 370 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR370 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW370_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR370 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW370_B_0x1 = 1;

    /** @brief Shadowed fuse word 371 */
    using BSEC_SFSR11_SFW371 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 371 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR371 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR371 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 371 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR371 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW371_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR371 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW371_B_0x1 = 1;

    /** @brief Shadowed fuse word 372 */
    using BSEC_SFSR11_SFW372 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 372 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR372 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR372 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 372 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR372 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW372_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR372 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW372_B_0x1 = 1;

    /** @brief Shadowed fuse word 373 */
    using BSEC_SFSR11_SFW373 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 373 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR373 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR373 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 373 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR373 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW373_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR373 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW373_B_0x1 = 1;

    /** @brief Shadowed fuse word 374 */
    using BSEC_SFSR11_SFW374 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 374 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR374 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR374 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 374 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR374 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW374_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR374 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW374_B_0x1 = 1;

    /** @brief Shadowed fuse word 375 */
    using BSEC_SFSR11_SFW375 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 23, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 375 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR375 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR375 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 375 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR375 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW375_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR375 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW375_B_0x1 = 1;

    /** @brief Shadowed fuse word 376 */
    using BSEC_SFSR11_SFW376 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 376 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR376 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR376 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 376 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR376 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW376_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR376 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW376_B_0x1 = 1;

    /** @brief Shadowed fuse word 377 */
    using BSEC_SFSR11_SFW377 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 25, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 377 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR377 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR377 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 377 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR377 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW377_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR377 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW377_B_0x1 = 1;

    /** @brief Shadowed fuse word 378 */
    using BSEC_SFSR11_SFW378 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 378 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR378 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR378 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 378 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR378 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW378_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR378 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW378_B_0x1 = 1;

    /** @brief Shadowed fuse word 379 */
    using BSEC_SFSR11_SFW379 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 27, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 379 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR379 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR379 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 379 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR379 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW379_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR379 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW379_B_0x1 = 1;

    /** @brief Shadowed fuse word 380 */
    using BSEC_SFSR11_SFW380 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 28, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 380 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR380 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR380 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 380 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR380 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW380_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR380 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW380_B_0x1 = 1;

    /** @brief Shadowed fuse word 381 */
    using BSEC_SFSR11_SFW381 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 29, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 381 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR381 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR381 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 381 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR381 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW381_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR381 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW381_B_0x1 = 1;

    /** @brief Shadowed fuse word 382 */
    using BSEC_SFSR11_SFW382 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 30, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 382 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR382 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR382 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 382 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR382 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW382_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR382 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW382_B_0x1 = 1;

    /** @brief Shadowed fuse word 383 */
    using BSEC_SFSR11_SFW383 = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 31, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word 383 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR383 register. (value: 0)
     *          - B_0x1: Fuse word is shadowed in BSEC_FVR383 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. (value: 1)
     */
        /** @brief Fuse word 383 is not shadowed. Fuse value must be reloaded using BSEC_OTPCR before reading BSEC_FVR383 register. */
    constexpr std::uint32_t BSEC_SFSR11_SFW383_B_0x0 = 0;
        /** @brief Fuse word is shadowed in BSEC_FVR383 register. Reloading the fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC cold or warm reset. */
    constexpr std::uint32_t BSEC_SFSR11_SFW383_B_0x1 = 1;

    /** @brief BSEC OTP control register */
    using BSEC_OTPCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Fuse word address */
    using BSEC_OTPCR_ADDR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 9, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Fuse word programming */
    using BSEC_OTPCR_PROG = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 13, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word read operation is required (value: 0)
     *          - B_0x1: Fuse word programming operation is required (value: 1)
     */
        /** @brief Fuse word read operation is required */
    constexpr std::uint32_t BSEC_OTPCR_PROG_B_0x0 = 0;
        /** @brief Fuse word programming operation is required */
    constexpr std::uint32_t BSEC_OTPCR_PROG_B_0x1 = 1;

    /** @brief Permanent programming lock */
    using BSEC_OTPCR_PPLOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 14, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Fuse word at address ADDR[8:0] is programmed normally. (value: 0)
     *          - B_0x1: Fuse word at address ADDR[8:0] is locked, preventing further modifications. (value: 1)
     */
        /** @brief Fuse word at address ADDR[8:0] is programmed normally. */
    constexpr std::uint32_t BSEC_OTPCR_PPLOCK_B_0x0 = 0;
        /** @brief Fuse word at address ADDR[8:0] is locked, preventing further modifications. */
    constexpr std::uint32_t BSEC_OTPCR_PPLOCK_B_0x1 = 1;

    /** @brief Last CID */
    using BSEC_OTPCR_LASTCID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 3, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write data register */
    using BSEC_WDR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xC08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OTP write data */
    using BSEC_WDR_WRDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC scratch register 0 */
    using BSEC_SCRATCHR0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE00, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Scratch data */
    using BSEC_SCRATCHR0_SDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC scratch register 1 */
    using BSEC_SCRATCHR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE04, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Scratch data */
    using BSEC_SCRATCHR1_SDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC scratch register 2 */
    using BSEC_SCRATCHR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE08, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Scratch data */
    using BSEC_SCRATCHR2_SDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC scratch register 3 */
    using BSEC_SCRATCHR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE0C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Scratch data */
    using BSEC_SCRATCHR3_SDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC lock register */
    using BSEC_LOCKR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE10, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Global write lock */
    using BSEC_LOCKR_GWLOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Writes to BSEC registers are allowed (value: 0)
     *          - B_0x1: Writes to BSEC registers are ignored (fuse programming and fuse reload disabled) (value: 1)
     */
        /** @brief Writes to BSEC registers are allowed */
    constexpr std::uint32_t BSEC_LOCKR_GWLOCK_B_0x0 = 0;
        /** @brief Writes to BSEC registers are ignored (fuse programming and fuse reload disabled) */
    constexpr std::uint32_t BSEC_LOCKR_GWLOCK_B_0x1 = 1;

    /** @brief Hardware key lock */
    using BSEC_LOCKR_HKLOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Derived hardware unique key (DHUK) in SAES peripheral is usable if HVALID is set in BSEC_SR (value: 0)
     *          - B_0x1: Derived hardware unique key (DHUK) in SAES peripheral is not usable. (value: 1)
     */
        /** @brief Derived hardware unique key (DHUK) in SAES peripheral is usable if HVALID is set in BSEC_SR */
    constexpr std::uint32_t BSEC_LOCKR_HKLOCK_B_0x0 = 0;
        /** @brief Derived hardware unique key (DHUK) in SAES peripheral is not usable. */
    constexpr std::uint32_t BSEC_LOCKR_HKLOCK_B_0x1 = 1;

    /** @brief BSEC JTAG input register */
    using BSEC_JTAGINR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE14, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief JTAG input data */
    using BSEC_JTAGINR_JDATAIN = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC JTAG output register */
    using BSEC_JTAGOUTR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE18, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief JTAG output data */
    using BSEC_JTAGOUTR_JDATAOUT = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC unmap register */
    using BSEC_UNMAPR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE24, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Unmap key */
    using BSEC_UNMAPR_UNMAP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC status register */
    using BSEC_SR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Hardware key valid */
    using BSEC_SR_HVALID = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Derived hardware unique key (DHUK) feature cannot be used in SAES peripheral (value: 0)
     *          - B_0x1: Derived hardware unique key (DHUK) feature can be used in SAES peripheral (value: 1)
     */
        /** @brief Derived hardware unique key (DHUK) feature cannot be used in SAES peripheral */
    constexpr std::uint32_t BSEC_SR_HVALID_B_0x0 = 0;
        /** @brief Derived hardware unique key (DHUK) feature can be used in SAES peripheral */
    constexpr std::uint32_t BSEC_SR_HVALID_B_0x1 = 1;

    /** @brief debug request */
    using BSEC_SR_DBGREQ = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: Host debugger is not requesting debug (value: 0)
     *          - B_0x1: Host debugger is requesting debug (value: 1)
     */
        /** @brief Host debugger is not requesting debug */
    constexpr std::uint32_t BSEC_SR_DBGREQ_B_0x0 = 0;
        /** @brief Host debugger is requesting debug */
    constexpr std::uint32_t BSEC_SR_DBGREQ_B_0x1 = 1;

    /** @brief Non-volatile state */
    using BSEC_SR_NVSTATE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 26, 6, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x16: BSEC is in open state (value: 22)
     *          - B_0x0D: BSEC is in closed state (value: 13)
     *          - B_0x7: BSEC is in invalid state. (value: 7)
     *          - B_0x23: BSEC is in invalid state, with an active confirmed tamper triggered in the device. (value: 35)
     */
        /** @brief BSEC is in open state */
    constexpr std::uint32_t BSEC_SR_NVSTATE_B_0x16 = 22;
        /** @brief BSEC is in closed state */
    constexpr std::uint32_t BSEC_SR_NVSTATE_B_0x0D = 13;
        /** @brief BSEC is in invalid state. */
    constexpr std::uint32_t BSEC_SR_NVSTATE_B_0x7 = 7;
        /** @brief BSEC is in invalid state, with an active confirmed tamper triggered in the device. */
    constexpr std::uint32_t BSEC_SR_NVSTATE_B_0x23 = 35;

    /** @brief BSEC OTP status register */
    using BSEC_OTPSR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Busy flag */
    using BSEC_OTPSR_BUSY = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: BSEC is idle (value: 0)
     *          - B_0x1: BSEC is busy (value: 1)
     */
        /** @brief BSEC is idle */
    constexpr std::uint32_t BSEC_OTPSR_BUSY_B_0x0 = 0;
        /** @brief BSEC is busy */
    constexpr std::uint32_t BSEC_OTPSR_BUSY_B_0x1 = 1;

    /** @brief Initialization done */
    using BSEC_OTPSR_INIT_DONE = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 1, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Hide upper fuse words */
    using BSEC_OTPSR_HIDEUP = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 2, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OTP not virgin */
    using BSEC_OTPSR_OTPNVIR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 4, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OTP with error */
    using BSEC_OTPSR_OTPERR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 5, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief OTP with single error correction */
    using BSEC_OTPSR_OTPSEC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 6, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Programming failed */
    using BSEC_OTPSR_PROGFAIL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Disturb flag */
    using BSEC_OTPSR_DISTURBF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 17, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Double error detection flag */
    using BSEC_OTPSR_DEDF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 18, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Single error correction flag */
    using BSEC_OTPSR_SECF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 19, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Permanent programming lock flag */
    using BSEC_OTPSR_PPLF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 20, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Permanent programming lock mismatch flag */
    using BSEC_OTPSR_PPLMF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 21, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Addresses mismatch error flag */
    using BSEC_OTPSR_AMEF = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 22, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC epoch register */
    using BSEC_EPOCHR0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE80, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief epoch */
    using BSEC_EPOCHR0_EPOCH = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC epoch register */
    using BSEC_EPOCHR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE84, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief epoch */
    using BSEC_EPOCHR1_EPOCH = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC epoch select register */
    using BSEC_EPOCH_SELR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE88, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Epoch selection. This value is wired out to the SAES peripheral. */
    using BSEC_EPOCH_SELR_EPSEL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 1, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0x0: SAES peripheral uses BSEC_EPOCHR0 as EPOCH value. (value: 0)
     *          - B_0x1: SAES peripheral uses BSEC_EPOCHR1 as EPOCH value. (value: 1)
     */
        /** @brief SAES peripheral uses BSEC_EPOCHR0 as EPOCH value. */
    constexpr std::uint32_t BSEC_EPOCH_SELR_EPSEL_B_0x0 = 0;
        /** @brief SAES peripheral uses BSEC_EPOCHR1 as EPOCH value. */
    constexpr std::uint32_t BSEC_EPOCH_SELR_EPSEL_B_0x1 = 1;

    /** @brief BSEC Debug */
    using BSEC_DBGCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE8C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief any other value: debug not authorized (provided BSEC state is not OPEN) */
    using BSEC_DBGCR_UNLOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 8, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0xB4: non-secure debug authorized when the level indicated in BSEC_HDPLSR is greater than or equal to the level given by AUTH_HDPL (value: 180)
     */
        /** @brief non-secure debug authorized when the level indicated in BSEC_HDPLSR is greater than or equal to the level given by AUTH_HDPL */
    constexpr std::uint32_t BSEC_DBGCR_UNLOCK_B_0xB4 = 180;

    /** @brief level at which debug may be opened. */
    using BSEC_DBGCR_AUTH_HDPL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 16, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0xB4: Level 0 (value: 180)
     *          - B_0x51: Level 1 (value: 81)
     *          - B_0x8A: Level 2 (value: 138)
     *          - B_0x6F: Level 3 (value: 111)
     */
        /** @brief Level 0 */
    constexpr std::uint32_t BSEC_DBGCR_AUTH_HDPL_B_0xB4 = 180;
        /** @brief Level 1 */
    constexpr std::uint32_t BSEC_DBGCR_AUTH_HDPL_B_0x51 = 81;
        /** @brief Level 2 */
    constexpr std::uint32_t BSEC_DBGCR_AUTH_HDPL_B_0x8A = 138;
        /** @brief Level 3 */
    constexpr std::uint32_t BSEC_DBGCR_AUTH_HDPL_B_0x6F = 111;

    /** @brief any other value: secure debug not authorized (provided BSEC state is not OPEN) */
    using BSEC_DBGCR_AUTH_SEC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 24, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0xB4: secure debug authorized when UNLOCK = 0xB4 and the level indicated in BSEC_HDPLSR is greater than or equal to the level indicated by AUTH_HDPL (value: 180)
     */
        /** @brief secure debug authorized when UNLOCK = 0xB4 and the level indicated in BSEC_HDPLSR is greater than or equal to the level indicated by AUTH_HDPL */
    constexpr std::uint32_t BSEC_DBGCR_AUTH_SEC_B_0xB4 = 180;

    /** @brief BSEC AP Unlock */
    using BSEC_AP_UNLOCK = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE90, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief any other value: do not unlock */
    using BSEC_AP_UNLOCK_UNLOCK = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0xB4: unlock the DBG_MCU AP interface. (value: 180)
     */
        /** @brief unlock the DBG_MCU AP interface. */
    constexpr std::uint32_t BSEC_AP_UNLOCK_UNLOCK_B_0xB4 = 180;

    /** @brief BSEC HDPL */
    using BSEC_HDPLSR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE94, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief current HDPL */
    using BSEC_HDPLSR_HDPL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @details Possible values:
     *          - B_0xB4: Level 0 (value: 180)
     *          - B_0x51: Level 1 (value: 81)
     *          - B_0x8A: Level 2 (value: 138)
     *          - B_0x6F: Level 3 (value: 111)
     */
        /** @brief Level 0 */
    constexpr std::uint32_t BSEC_HDPLSR_HDPL_B_0xB4 = 180;
        /** @brief Level 1 */
    constexpr std::uint32_t BSEC_HDPLSR_HDPL_B_0x51 = 81;
        /** @brief Level 2 */
    constexpr std::uint32_t BSEC_HDPLSR_HDPL_B_0x8A = 138;
        /** @brief Level 3 */
    constexpr std::uint32_t BSEC_HDPLSR_HDPL_B_0x6F = 111;

    /** @brief BSEC HDPL control */
    using BSEC_HDPLCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE98, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Increment HDPL */
    using BSEC_HDPLCR_INCR_HDPL = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC Next HDPL */
    using BSEC_NEXTLR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xE9C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Increment */
    using BSEC_NEXTLR_INCR = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 2, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 0 */
    using BSEC_WOSCR0 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF40, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR0_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 1 */
    using BSEC_WOSCR1 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF44, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR1_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 2 */
    using BSEC_WOSCR2 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF48, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR2_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 3 */
    using BSEC_WOSCR3 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF4C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR3_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 4 */
    using BSEC_WOSCR4 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF50, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR4_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 5 */
    using BSEC_WOSCR5 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF54, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR5_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 6 */
    using BSEC_WOSCR6 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF58, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR6_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC write once scratch register 7 */
    using BSEC_WOSCR7 = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xF5C, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Write once scratch data */
    using BSEC_WOSCR7_WOSDATA = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC hot reset count register */
    using BSEC_HRCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xFE8, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief hot reset counter */
    using BSEC_HRCR_HRC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief BSEC warm reset count register */
    using BSEC_WRCR = ::EmbeddedPP::LowLevel::Register<std::uint32_t, 0xFEC, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
    /** @brief Warm reset counter */
    using BSEC_WRCR_WRC = ::EmbeddedPP::LowLevel::BitField<std::uint32_t, 0, 32, ::EmbeddedPP::LowLevel::Accessibility::ReadWrite>;
}

#endif
